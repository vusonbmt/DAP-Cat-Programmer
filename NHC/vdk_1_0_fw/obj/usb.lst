                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.0 #11195 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module usb
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _EP0_RecData1_PARM_2
                                     12 	.globl _EP0_RecData0_PARM_2
                                     13 	.globl _EP0_SendData1_PARM_2
                                     14 	.globl _EP0_SendData0_PARM_2
                                     15 	.globl _u8Ver
                                     16 	.globl _serialDescriptor
                                     17 	.globl _productDescriptor
                                     18 	.globl _manufacturerDescriptor
                                     19 	.globl _stringDescriptor
                                     20 	.globl _configDescriptor
                                     21 	.globl _HID_DeviceReportDescriptor
                                     22 	.globl _deviceDescriptor
                                     23 	.globl _Led_Off
                                     24 	.globl _Led_On
                                     25 	.globl _EP0_Out_CallBack
                                     26 	.globl _UIF_BUS_RST
                                     27 	.globl _UIF_DETECT
                                     28 	.globl _UIF_TRANSFER
                                     29 	.globl _UIF_SUSPEND
                                     30 	.globl _UIF_HST_SOF
                                     31 	.globl _UIF_FIFO_OV
                                     32 	.globl _U_SIE_FREE
                                     33 	.globl _U_TOG_OK
                                     34 	.globl _U_IS_NAK
                                     35 	.globl _ADC_CHAN0
                                     36 	.globl _ADC_CHAN1
                                     37 	.globl _CMP_CHAN
                                     38 	.globl _ADC_START
                                     39 	.globl _ADC_IF
                                     40 	.globl _CMP_IF
                                     41 	.globl _CMPO
                                     42 	.globl _U1RI
                                     43 	.globl _U1TI
                                     44 	.globl _U1RB8
                                     45 	.globl _U1TB8
                                     46 	.globl _U1REN
                                     47 	.globl _U1SMOD
                                     48 	.globl _U1SM0
                                     49 	.globl _S0_R_FIFO
                                     50 	.globl _S0_T_FIFO
                                     51 	.globl _S0_FREE
                                     52 	.globl _S0_IF_BYTE
                                     53 	.globl _S0_IF_FIRST
                                     54 	.globl _S0_IF_OV
                                     55 	.globl _S0_FST_ACT
                                     56 	.globl _CP_RL2
                                     57 	.globl _C_T2
                                     58 	.globl _TR2
                                     59 	.globl _EXEN2
                                     60 	.globl _TCLK
                                     61 	.globl _RCLK
                                     62 	.globl _EXF2
                                     63 	.globl _CAP1F
                                     64 	.globl _TF2
                                     65 	.globl _RI
                                     66 	.globl _TI
                                     67 	.globl _RB8
                                     68 	.globl _TB8
                                     69 	.globl _REN
                                     70 	.globl _SM2
                                     71 	.globl _SM1
                                     72 	.globl _SM0
                                     73 	.globl _IT0
                                     74 	.globl _IE0
                                     75 	.globl _IT1
                                     76 	.globl _IE1
                                     77 	.globl _TR0
                                     78 	.globl _TF0
                                     79 	.globl _TR1
                                     80 	.globl _TF1
                                     81 	.globl _RXD
                                     82 	.globl _PWM1_
                                     83 	.globl _TXD
                                     84 	.globl _PWM2_
                                     85 	.globl _AIN3
                                     86 	.globl _VBUS1
                                     87 	.globl _INT0
                                     88 	.globl _TXD1_
                                     89 	.globl _INT1
                                     90 	.globl _T0
                                     91 	.globl _RXD1_
                                     92 	.globl _PWM2
                                     93 	.globl _T1
                                     94 	.globl _UDP
                                     95 	.globl _UDM
                                     96 	.globl _TIN0
                                     97 	.globl _CAP1
                                     98 	.globl _T2
                                     99 	.globl _AIN0
                                    100 	.globl _VBUS2
                                    101 	.globl _TIN1
                                    102 	.globl _CAP2
                                    103 	.globl _T2EX
                                    104 	.globl _RXD_
                                    105 	.globl _TXD_
                                    106 	.globl _AIN1
                                    107 	.globl _UCC1
                                    108 	.globl _TIN2
                                    109 	.globl _SCS
                                    110 	.globl _CAP1_
                                    111 	.globl _T2_
                                    112 	.globl _AIN2
                                    113 	.globl _UCC2
                                    114 	.globl _TIN3
                                    115 	.globl _PWM1
                                    116 	.globl _MOSI
                                    117 	.globl _TIN4
                                    118 	.globl _RXD1
                                    119 	.globl _MISO
                                    120 	.globl _TIN5
                                    121 	.globl _TXD1
                                    122 	.globl _SCK
                                    123 	.globl _IE_SPI0
                                    124 	.globl _IE_TKEY
                                    125 	.globl _IE_USB
                                    126 	.globl _IE_ADC
                                    127 	.globl _IE_UART1
                                    128 	.globl _IE_PWMX
                                    129 	.globl _IE_GPIO
                                    130 	.globl _IE_WDOG
                                    131 	.globl _PX0
                                    132 	.globl _PT0
                                    133 	.globl _PX1
                                    134 	.globl _PT1
                                    135 	.globl _PS
                                    136 	.globl _PT2
                                    137 	.globl _PL_FLAG
                                    138 	.globl _PH_FLAG
                                    139 	.globl _EX0
                                    140 	.globl _ET0
                                    141 	.globl _EX1
                                    142 	.globl _ET1
                                    143 	.globl _ES
                                    144 	.globl _ET2
                                    145 	.globl _E_DIS
                                    146 	.globl _EA
                                    147 	.globl _P
                                    148 	.globl _F1
                                    149 	.globl _OV
                                    150 	.globl _RS0
                                    151 	.globl _RS1
                                    152 	.globl _F0
                                    153 	.globl _AC
                                    154 	.globl _CY
                                    155 	.globl _UEP1_DMA_H
                                    156 	.globl _UEP1_DMA_L
                                    157 	.globl _UEP1_DMA
                                    158 	.globl _UEP0_DMA_H
                                    159 	.globl _UEP0_DMA_L
                                    160 	.globl _UEP0_DMA
                                    161 	.globl _UEP2_3_MOD
                                    162 	.globl _UEP4_1_MOD
                                    163 	.globl _UEP3_DMA_H
                                    164 	.globl _UEP3_DMA_L
                                    165 	.globl _UEP3_DMA
                                    166 	.globl _UEP2_DMA_H
                                    167 	.globl _UEP2_DMA_L
                                    168 	.globl _UEP2_DMA
                                    169 	.globl _USB_DEV_AD
                                    170 	.globl _USB_CTRL
                                    171 	.globl _USB_INT_EN
                                    172 	.globl _UEP4_T_LEN
                                    173 	.globl _UEP4_CTRL
                                    174 	.globl _UEP0_T_LEN
                                    175 	.globl _UEP0_CTRL
                                    176 	.globl _USB_RX_LEN
                                    177 	.globl _USB_MIS_ST
                                    178 	.globl _USB_INT_ST
                                    179 	.globl _USB_INT_FG
                                    180 	.globl _UEP3_T_LEN
                                    181 	.globl _UEP3_CTRL
                                    182 	.globl _UEP2_T_LEN
                                    183 	.globl _UEP2_CTRL
                                    184 	.globl _UEP1_T_LEN
                                    185 	.globl _UEP1_CTRL
                                    186 	.globl _UDEV_CTRL
                                    187 	.globl _USB_C_CTRL
                                    188 	.globl _TKEY_DATH
                                    189 	.globl _TKEY_DATL
                                    190 	.globl _TKEY_DAT
                                    191 	.globl _TKEY_CTRL
                                    192 	.globl _ADC_DATA
                                    193 	.globl _ADC_CFG
                                    194 	.globl _ADC_CTRL
                                    195 	.globl _SBAUD1
                                    196 	.globl _SBUF1
                                    197 	.globl _SCON1
                                    198 	.globl _SPI0_SETUP
                                    199 	.globl _SPI0_CK_SE
                                    200 	.globl _SPI0_CTRL
                                    201 	.globl _SPI0_DATA
                                    202 	.globl _SPI0_STAT
                                    203 	.globl _PWM_CK_SE
                                    204 	.globl _PWM_CTRL
                                    205 	.globl _PWM_DATA1
                                    206 	.globl _PWM_DATA2
                                    207 	.globl _T2CAP1H
                                    208 	.globl _T2CAP1L
                                    209 	.globl _T2CAP1
                                    210 	.globl _TH2
                                    211 	.globl _TL2
                                    212 	.globl _T2COUNT
                                    213 	.globl _RCAP2H
                                    214 	.globl _RCAP2L
                                    215 	.globl _RCAP2
                                    216 	.globl _T2MOD
                                    217 	.globl _T2CON
                                    218 	.globl _SBUF
                                    219 	.globl _SCON
                                    220 	.globl _TH1
                                    221 	.globl _TH0
                                    222 	.globl _TL1
                                    223 	.globl _TL0
                                    224 	.globl _TMOD
                                    225 	.globl _TCON
                                    226 	.globl _XBUS_AUX
                                    227 	.globl _PIN_FUNC
                                    228 	.globl _P3_DIR_PU
                                    229 	.globl _P3_MOD_OC
                                    230 	.globl _P3
                                    231 	.globl _P2
                                    232 	.globl _P1_DIR_PU
                                    233 	.globl _P1_MOD_OC
                                    234 	.globl _P1
                                    235 	.globl _ROM_CTRL
                                    236 	.globl _ROM_DATA_H
                                    237 	.globl _ROM_DATA_L
                                    238 	.globl _ROM_DATA
                                    239 	.globl _ROM_ADDR_H
                                    240 	.globl _ROM_ADDR_L
                                    241 	.globl _ROM_ADDR
                                    242 	.globl _GPIO_IE
                                    243 	.globl _IP_EX
                                    244 	.globl _IE_EX
                                    245 	.globl _IP
                                    246 	.globl _IE
                                    247 	.globl _WDOG_COUNT
                                    248 	.globl _RESET_KEEP
                                    249 	.globl _WAKE_CTRL
                                    250 	.globl _CLOCK_CFG
                                    251 	.globl _PCON
                                    252 	.globl _GLOBAL_CFG
                                    253 	.globl _SAFE_MOD
                                    254 	.globl _DPH
                                    255 	.globl _DPL
                                    256 	.globl _SP
                                    257 	.globl _B
                                    258 	.globl _ACC
                                    259 	.globl _PSW
                                    260 	.globl _u8SetupPacket
                                    261 	.globl _u8TransBuff
                                    262 	.globl _u8ReceiveBuff
                                    263 	.globl _u8Ep0Buff
                                    264 	.globl _u8ControlState
                                    265 	.globl _u8sync
                                    266 	.globl _u8Config
                                    267 	.globl _u8Addr
                                    268 	.globl _u8HidNum
                                    269 	.globl _u8HidReq
                                    270 	.globl _u8Total
                                    271 	.globl _pu8Buff
                                    272 	.globl _EP0_SendData0
                                    273 	.globl _EP0_SendData1
                                    274 	.globl _EP0_RecData0
                                    275 	.globl _EP0_RecData1
                                    276 	.globl _EP0_Stall
                                    277 	.globl _USB_InitClock
                                    278 	.globl _USB_Init
                                    279 	.globl _USB_Task
                                    280 	.globl _EP1_Out
                                    281 	.globl _EP1_In
                                    282 ;--------------------------------------------------------
                                    283 ; special function registers
                                    284 ;--------------------------------------------------------
                                    285 	.area RSEG    (ABS,DATA)
      000000                        286 	.org 0x0000
                           0000D0   287 _PSW	=	0x00d0
                           0000E0   288 _ACC	=	0x00e0
                           0000F0   289 _B	=	0x00f0
                           000081   290 _SP	=	0x0081
                           000082   291 _DPL	=	0x0082
                           000083   292 _DPH	=	0x0083
                           0000A1   293 _SAFE_MOD	=	0x00a1
                           0000B1   294 _GLOBAL_CFG	=	0x00b1
                           000087   295 _PCON	=	0x0087
                           0000B9   296 _CLOCK_CFG	=	0x00b9
                           0000A9   297 _WAKE_CTRL	=	0x00a9
                           0000FE   298 _RESET_KEEP	=	0x00fe
                           0000FF   299 _WDOG_COUNT	=	0x00ff
                           0000A8   300 _IE	=	0x00a8
                           0000B8   301 _IP	=	0x00b8
                           0000E8   302 _IE_EX	=	0x00e8
                           0000E9   303 _IP_EX	=	0x00e9
                           0000C7   304 _GPIO_IE	=	0x00c7
                           008584   305 _ROM_ADDR	=	0x8584
                           000084   306 _ROM_ADDR_L	=	0x0084
                           000085   307 _ROM_ADDR_H	=	0x0085
                           008F8E   308 _ROM_DATA	=	0x8f8e
                           00008E   309 _ROM_DATA_L	=	0x008e
                           00008F   310 _ROM_DATA_H	=	0x008f
                           000086   311 _ROM_CTRL	=	0x0086
                           000090   312 _P1	=	0x0090
                           000092   313 _P1_MOD_OC	=	0x0092
                           000093   314 _P1_DIR_PU	=	0x0093
                           0000A0   315 _P2	=	0x00a0
                           0000B0   316 _P3	=	0x00b0
                           000096   317 _P3_MOD_OC	=	0x0096
                           000097   318 _P3_DIR_PU	=	0x0097
                           0000C6   319 _PIN_FUNC	=	0x00c6
                           0000A2   320 _XBUS_AUX	=	0x00a2
                           000088   321 _TCON	=	0x0088
                           000089   322 _TMOD	=	0x0089
                           00008A   323 _TL0	=	0x008a
                           00008B   324 _TL1	=	0x008b
                           00008C   325 _TH0	=	0x008c
                           00008D   326 _TH1	=	0x008d
                           000098   327 _SCON	=	0x0098
                           000099   328 _SBUF	=	0x0099
                           0000C8   329 _T2CON	=	0x00c8
                           0000C9   330 _T2MOD	=	0x00c9
                           00CBCA   331 _RCAP2	=	0xcbca
                           0000CA   332 _RCAP2L	=	0x00ca
                           0000CB   333 _RCAP2H	=	0x00cb
                           00CDCC   334 _T2COUNT	=	0xcdcc
                           0000CC   335 _TL2	=	0x00cc
                           0000CD   336 _TH2	=	0x00cd
                           00CFCE   337 _T2CAP1	=	0xcfce
                           0000CE   338 _T2CAP1L	=	0x00ce
                           0000CF   339 _T2CAP1H	=	0x00cf
                           00009B   340 _PWM_DATA2	=	0x009b
                           00009C   341 _PWM_DATA1	=	0x009c
                           00009D   342 _PWM_CTRL	=	0x009d
                           00009E   343 _PWM_CK_SE	=	0x009e
                           0000F8   344 _SPI0_STAT	=	0x00f8
                           0000F9   345 _SPI0_DATA	=	0x00f9
                           0000FA   346 _SPI0_CTRL	=	0x00fa
                           0000FB   347 _SPI0_CK_SE	=	0x00fb
                           0000FC   348 _SPI0_SETUP	=	0x00fc
                           0000C0   349 _SCON1	=	0x00c0
                           0000C1   350 _SBUF1	=	0x00c1
                           0000C2   351 _SBAUD1	=	0x00c2
                           000080   352 _ADC_CTRL	=	0x0080
                           00009A   353 _ADC_CFG	=	0x009a
                           00009F   354 _ADC_DATA	=	0x009f
                           0000C3   355 _TKEY_CTRL	=	0x00c3
                           00C5C4   356 _TKEY_DAT	=	0xc5c4
                           0000C4   357 _TKEY_DATL	=	0x00c4
                           0000C5   358 _TKEY_DATH	=	0x00c5
                           000091   359 _USB_C_CTRL	=	0x0091
                           0000D1   360 _UDEV_CTRL	=	0x00d1
                           0000D2   361 _UEP1_CTRL	=	0x00d2
                           0000D3   362 _UEP1_T_LEN	=	0x00d3
                           0000D4   363 _UEP2_CTRL	=	0x00d4
                           0000D5   364 _UEP2_T_LEN	=	0x00d5
                           0000D6   365 _UEP3_CTRL	=	0x00d6
                           0000D7   366 _UEP3_T_LEN	=	0x00d7
                           0000D8   367 _USB_INT_FG	=	0x00d8
                           0000D9   368 _USB_INT_ST	=	0x00d9
                           0000DA   369 _USB_MIS_ST	=	0x00da
                           0000DB   370 _USB_RX_LEN	=	0x00db
                           0000DC   371 _UEP0_CTRL	=	0x00dc
                           0000DD   372 _UEP0_T_LEN	=	0x00dd
                           0000DE   373 _UEP4_CTRL	=	0x00de
                           0000DF   374 _UEP4_T_LEN	=	0x00df
                           0000E1   375 _USB_INT_EN	=	0x00e1
                           0000E2   376 _USB_CTRL	=	0x00e2
                           0000E3   377 _USB_DEV_AD	=	0x00e3
                           00E5E4   378 _UEP2_DMA	=	0xe5e4
                           0000E4   379 _UEP2_DMA_L	=	0x00e4
                           0000E5   380 _UEP2_DMA_H	=	0x00e5
                           00E7E6   381 _UEP3_DMA	=	0xe7e6
                           0000E6   382 _UEP3_DMA_L	=	0x00e6
                           0000E7   383 _UEP3_DMA_H	=	0x00e7
                           0000EA   384 _UEP4_1_MOD	=	0x00ea
                           0000EB   385 _UEP2_3_MOD	=	0x00eb
                           00EDEC   386 _UEP0_DMA	=	0xedec
                           0000EC   387 _UEP0_DMA_L	=	0x00ec
                           0000ED   388 _UEP0_DMA_H	=	0x00ed
                           00EFEE   389 _UEP1_DMA	=	0xefee
                           0000EE   390 _UEP1_DMA_L	=	0x00ee
                           0000EF   391 _UEP1_DMA_H	=	0x00ef
                                    392 ;--------------------------------------------------------
                                    393 ; special function bits
                                    394 ;--------------------------------------------------------
                                    395 	.area RSEG    (ABS,DATA)
      000000                        396 	.org 0x0000
                           0000D7   397 _CY	=	0x00d7
                           0000D6   398 _AC	=	0x00d6
                           0000D5   399 _F0	=	0x00d5
                           0000D4   400 _RS1	=	0x00d4
                           0000D3   401 _RS0	=	0x00d3
                           0000D2   402 _OV	=	0x00d2
                           0000D1   403 _F1	=	0x00d1
                           0000D0   404 _P	=	0x00d0
                           0000AF   405 _EA	=	0x00af
                           0000AE   406 _E_DIS	=	0x00ae
                           0000AD   407 _ET2	=	0x00ad
                           0000AC   408 _ES	=	0x00ac
                           0000AB   409 _ET1	=	0x00ab
                           0000AA   410 _EX1	=	0x00aa
                           0000A9   411 _ET0	=	0x00a9
                           0000A8   412 _EX0	=	0x00a8
                           0000BF   413 _PH_FLAG	=	0x00bf
                           0000BE   414 _PL_FLAG	=	0x00be
                           0000BD   415 _PT2	=	0x00bd
                           0000BC   416 _PS	=	0x00bc
                           0000BB   417 _PT1	=	0x00bb
                           0000BA   418 _PX1	=	0x00ba
                           0000B9   419 _PT0	=	0x00b9
                           0000B8   420 _PX0	=	0x00b8
                           0000EF   421 _IE_WDOG	=	0x00ef
                           0000EE   422 _IE_GPIO	=	0x00ee
                           0000ED   423 _IE_PWMX	=	0x00ed
                           0000EC   424 _IE_UART1	=	0x00ec
                           0000EB   425 _IE_ADC	=	0x00eb
                           0000EA   426 _IE_USB	=	0x00ea
                           0000E9   427 _IE_TKEY	=	0x00e9
                           0000E8   428 _IE_SPI0	=	0x00e8
                           000097   429 _SCK	=	0x0097
                           000097   430 _TXD1	=	0x0097
                           000097   431 _TIN5	=	0x0097
                           000096   432 _MISO	=	0x0096
                           000096   433 _RXD1	=	0x0096
                           000096   434 _TIN4	=	0x0096
                           000095   435 _MOSI	=	0x0095
                           000095   436 _PWM1	=	0x0095
                           000095   437 _TIN3	=	0x0095
                           000095   438 _UCC2	=	0x0095
                           000095   439 _AIN2	=	0x0095
                           000094   440 _T2_	=	0x0094
                           000094   441 _CAP1_	=	0x0094
                           000094   442 _SCS	=	0x0094
                           000094   443 _TIN2	=	0x0094
                           000094   444 _UCC1	=	0x0094
                           000094   445 _AIN1	=	0x0094
                           000093   446 _TXD_	=	0x0093
                           000092   447 _RXD_	=	0x0092
                           000091   448 _T2EX	=	0x0091
                           000091   449 _CAP2	=	0x0091
                           000091   450 _TIN1	=	0x0091
                           000091   451 _VBUS2	=	0x0091
                           000091   452 _AIN0	=	0x0091
                           000090   453 _T2	=	0x0090
                           000090   454 _CAP1	=	0x0090
                           000090   455 _TIN0	=	0x0090
                           0000B7   456 _UDM	=	0x00b7
                           0000B6   457 _UDP	=	0x00b6
                           0000B5   458 _T1	=	0x00b5
                           0000B4   459 _PWM2	=	0x00b4
                           0000B4   460 _RXD1_	=	0x00b4
                           0000B4   461 _T0	=	0x00b4
                           0000B3   462 _INT1	=	0x00b3
                           0000B2   463 _TXD1_	=	0x00b2
                           0000B2   464 _INT0	=	0x00b2
                           0000B2   465 _VBUS1	=	0x00b2
                           0000B2   466 _AIN3	=	0x00b2
                           0000B1   467 _PWM2_	=	0x00b1
                           0000B1   468 _TXD	=	0x00b1
                           0000B0   469 _PWM1_	=	0x00b0
                           0000B0   470 _RXD	=	0x00b0
                           00008F   471 _TF1	=	0x008f
                           00008E   472 _TR1	=	0x008e
                           00008D   473 _TF0	=	0x008d
                           00008C   474 _TR0	=	0x008c
                           00008B   475 _IE1	=	0x008b
                           00008A   476 _IT1	=	0x008a
                           000089   477 _IE0	=	0x0089
                           000088   478 _IT0	=	0x0088
                           00009F   479 _SM0	=	0x009f
                           00009E   480 _SM1	=	0x009e
                           00009D   481 _SM2	=	0x009d
                           00009C   482 _REN	=	0x009c
                           00009B   483 _TB8	=	0x009b
                           00009A   484 _RB8	=	0x009a
                           000099   485 _TI	=	0x0099
                           000098   486 _RI	=	0x0098
                           0000CF   487 _TF2	=	0x00cf
                           0000CF   488 _CAP1F	=	0x00cf
                           0000CE   489 _EXF2	=	0x00ce
                           0000CD   490 _RCLK	=	0x00cd
                           0000CC   491 _TCLK	=	0x00cc
                           0000CB   492 _EXEN2	=	0x00cb
                           0000CA   493 _TR2	=	0x00ca
                           0000C9   494 _C_T2	=	0x00c9
                           0000C8   495 _CP_RL2	=	0x00c8
                           0000FF   496 _S0_FST_ACT	=	0x00ff
                           0000FE   497 _S0_IF_OV	=	0x00fe
                           0000FD   498 _S0_IF_FIRST	=	0x00fd
                           0000FC   499 _S0_IF_BYTE	=	0x00fc
                           0000FB   500 _S0_FREE	=	0x00fb
                           0000FA   501 _S0_T_FIFO	=	0x00fa
                           0000F8   502 _S0_R_FIFO	=	0x00f8
                           0000C7   503 _U1SM0	=	0x00c7
                           0000C5   504 _U1SMOD	=	0x00c5
                           0000C4   505 _U1REN	=	0x00c4
                           0000C3   506 _U1TB8	=	0x00c3
                           0000C2   507 _U1RB8	=	0x00c2
                           0000C1   508 _U1TI	=	0x00c1
                           0000C0   509 _U1RI	=	0x00c0
                           000087   510 _CMPO	=	0x0087
                           000086   511 _CMP_IF	=	0x0086
                           000085   512 _ADC_IF	=	0x0085
                           000084   513 _ADC_START	=	0x0084
                           000083   514 _CMP_CHAN	=	0x0083
                           000081   515 _ADC_CHAN1	=	0x0081
                           000080   516 _ADC_CHAN0	=	0x0080
                           0000DF   517 _U_IS_NAK	=	0x00df
                           0000DE   518 _U_TOG_OK	=	0x00de
                           0000DD   519 _U_SIE_FREE	=	0x00dd
                           0000DC   520 _UIF_FIFO_OV	=	0x00dc
                           0000DB   521 _UIF_HST_SOF	=	0x00db
                           0000DA   522 _UIF_SUSPEND	=	0x00da
                           0000D9   523 _UIF_TRANSFER	=	0x00d9
                           0000D8   524 _UIF_DETECT	=	0x00d8
                           0000D8   525 _UIF_BUS_RST	=	0x00d8
                                    526 ;--------------------------------------------------------
                                    527 ; overlayable register banks
                                    528 ;--------------------------------------------------------
                                    529 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        530 	.ds 8
                                    531 ;--------------------------------------------------------
                                    532 ; internal ram data
                                    533 ;--------------------------------------------------------
                                    534 	.area DSEG    (DATA)
      000000                        535 _pu8Buff::
      000000                        536 	.ds 3
      000003                        537 _u8Total::
      000003                        538 	.ds 1
      000004                        539 _u8HidReq::
      000004                        540 	.ds 1
      000005                        541 _u8HidNum::
      000005                        542 	.ds 1
      000006                        543 _u8Addr::
      000006                        544 	.ds 1
      000007                        545 _u8Config::
      000007                        546 	.ds 1
      000008                        547 _u8sync::
      000008                        548 	.ds 1
      000009                        549 _u8ControlState::
      000009                        550 	.ds 1
                                    551 ;--------------------------------------------------------
                                    552 ; overlayable items in internal ram 
                                    553 ;--------------------------------------------------------
                                    554 	.area	OSEG    (OVR,DATA)
      000000                        555 _EP0_SendData0_PARM_2:
      000000                        556 	.ds 1
      000001                        557 _EP0_SendData0_buff_65536_33:
      000001                        558 	.ds 3
                                    559 	.area	OSEG    (OVR,DATA)
      000000                        560 _EP0_SendData1_PARM_2:
      000000                        561 	.ds 1
      000001                        562 _EP0_SendData1_buff_65536_41:
      000001                        563 	.ds 3
                                    564 	.area	OSEG    (OVR,DATA)
      000000                        565 _EP0_RecData0_PARM_2:
      000000                        566 	.ds 1
                                    567 	.area	OSEG    (OVR,DATA)
      000000                        568 _EP0_RecData1_PARM_2:
      000000                        569 	.ds 1
                                    570 ;--------------------------------------------------------
                                    571 ; indirectly addressable internal ram data
                                    572 ;--------------------------------------------------------
                                    573 	.area ISEG    (DATA)
                                    574 ;--------------------------------------------------------
                                    575 ; absolute internal ram data
                                    576 ;--------------------------------------------------------
                                    577 	.area IABS    (ABS,DATA)
                                    578 	.area IABS    (ABS,DATA)
                                    579 ;--------------------------------------------------------
                                    580 ; bit data
                                    581 ;--------------------------------------------------------
                                    582 	.area BSEG    (BIT)
                                    583 ;--------------------------------------------------------
                                    584 ; paged external ram data
                                    585 ;--------------------------------------------------------
                                    586 	.area PSEG    (PAG,XDATA)
                                    587 ;--------------------------------------------------------
                                    588 ; external ram data
                                    589 ;--------------------------------------------------------
                                    590 	.area XSEG    (XDATA)
      000000                        591 _u8Ep0Buff::
      000000                        592 	.ds 64
      000040                        593 _u8ReceiveBuff::
      000040                        594 	.ds 150
      0000D6                        595 _u8TransBuff::
      0000D6                        596 	.ds 150
      00016C                        597 _u8SetupPacket::
      00016C                        598 	.ds 8
                                    599 ;--------------------------------------------------------
                                    600 ; absolute external ram data
                                    601 ;--------------------------------------------------------
                                    602 	.area XABS    (ABS,XDATA)
                                    603 ;--------------------------------------------------------
                                    604 ; external initialized ram data
                                    605 ;--------------------------------------------------------
                                    606 	.area XISEG   (XDATA)
                                    607 	.area HOME    (CODE)
                                    608 	.area GSINIT0 (CODE)
                                    609 	.area GSINIT1 (CODE)
                                    610 	.area GSINIT2 (CODE)
                                    611 	.area GSINIT3 (CODE)
                                    612 	.area GSINIT4 (CODE)
                                    613 	.area GSINIT5 (CODE)
                                    614 	.area GSINIT  (CODE)
                                    615 	.area GSFINAL (CODE)
                                    616 	.area CSEG    (CODE)
                                    617 ;--------------------------------------------------------
                                    618 ; global & static initialisations
                                    619 ;--------------------------------------------------------
                                    620 	.area HOME    (CODE)
                                    621 	.area GSINIT  (CODE)
                                    622 	.area GSFINAL (CODE)
                                    623 	.area GSINIT  (CODE)
                                    624 ;	usb.c:209: uint8_t u8HidReq = 0;
      000000 75*04 00         [24]  625 	mov	_u8HidReq,#0x00
                                    626 ;	usb.c:210: uint8_t u8HidNum = 0;
      000003 75*05 00         [24]  627 	mov	_u8HidNum,#0x00
                                    628 ;	usb.c:212: uint8_t u8Addr = 0;
      000006 75*06 00         [24]  629 	mov	_u8Addr,#0x00
                                    630 ;	usb.c:213: uint8_t u8Config = 0;
      000009 75*07 00         [24]  631 	mov	_u8Config,#0x00
                                    632 ;	usb.c:215: uint8_t u8sync = 0;
      00000C 75*08 00         [24]  633 	mov	_u8sync,#0x00
                                    634 ;	usb.c:221: uint8_t u8ControlState = SETUP_STATE;
      00000F 75*09 00         [24]  635 	mov	_u8ControlState,#0x00
                                    636 ;--------------------------------------------------------
                                    637 ; Home
                                    638 ;--------------------------------------------------------
                                    639 	.area HOME    (CODE)
                                    640 	.area HOME    (CODE)
                                    641 ;--------------------------------------------------------
                                    642 ; code
                                    643 ;--------------------------------------------------------
                                    644 	.area CSEG    (CODE)
                                    645 ;------------------------------------------------------------
                                    646 ;Allocation info for local variables in function 'EP0_SendData0'
                                    647 ;------------------------------------------------------------
                                    648 ;len                       Allocated with name '_EP0_SendData0_PARM_2'
                                    649 ;buff                      Allocated with name '_EP0_SendData0_buff_65536_33'
                                    650 ;i                         Allocated to registers r3 
                                    651 ;------------------------------------------------------------
                                    652 ;	usb.c:254: void EP0_SendData0(uint8_t *buff, uint8_t len)
                                    653 ;	-----------------------------------------
                                    654 ;	 function EP0_SendData0
                                    655 ;	-----------------------------------------
      000000                        656 _EP0_SendData0:
                           000007   657 	ar7 = 0x07
                           000006   658 	ar6 = 0x06
                           000005   659 	ar5 = 0x05
                           000004   660 	ar4 = 0x04
                           000003   661 	ar3 = 0x03
                           000002   662 	ar2 = 0x02
                           000001   663 	ar1 = 0x01
                           000000   664 	ar0 = 0x00
      000000 85 82*01         [24]  665 	mov	_EP0_SendData0_buff_65536_33,dpl
      000003 85 83*02         [24]  666 	mov	(_EP0_SendData0_buff_65536_33 + 1),dph
      000006 85 F0*03         [24]  667 	mov	(_EP0_SendData0_buff_65536_33 + 2),b
                                    668 ;	usb.c:257: u8Total = len;
      000009 85*00*03         [24]  669 	mov	_u8Total,_EP0_SendData0_PARM_2
                                    670 ;	usb.c:258: pu8Buff = buff;
      00000C 85*01*00         [24]  671 	mov	_pu8Buff,_EP0_SendData0_buff_65536_33
      00000F 85*02*01         [24]  672 	mov	(_pu8Buff + 1),(_EP0_SendData0_buff_65536_33 + 1)
      000012 85*03*02         [24]  673 	mov	(_pu8Buff + 2),(_EP0_SendData0_buff_65536_33 + 2)
                                    674 ;	usb.c:260: if (len <= EP0_SZ) {
      000015 E5*00            [12]  675 	mov	a,_EP0_SendData0_PARM_2
      000017 24 BF            [12]  676 	add	a,#0xff - 0x40
      000019 40 31            [24]  677 	jc	00116$
                                    678 ;	usb.c:261: for (i = 0; i < len; ++i) {
      00001B 7B 00            [12]  679 	mov	r3,#0x00
      00001D                        680 00107$:
      00001D C3               [12]  681 	clr	c
      00001E EB               [12]  682 	mov	a,r3
      00001F 95*00            [12]  683 	subb	a,_EP0_SendData0_PARM_2
      000021 50 24            [24]  684 	jnc	00101$
                                    685 ;	usb.c:262: u8Ep0Buff[i] = buff[i];
      000023 EB               [12]  686 	mov	a,r3
      000024 24r00            [12]  687 	add	a,#_u8Ep0Buff
      000026 F9               [12]  688 	mov	r1,a
      000027 E4               [12]  689 	clr	a
      000028 34s00            [12]  690 	addc	a,#(_u8Ep0Buff >> 8)
      00002A FA               [12]  691 	mov	r2,a
      00002B EB               [12]  692 	mov	a,r3
      00002C 25*01            [12]  693 	add	a,_EP0_SendData0_buff_65536_33
      00002E F8               [12]  694 	mov	r0,a
      00002F E4               [12]  695 	clr	a
      000030 35*02            [12]  696 	addc	a,(_EP0_SendData0_buff_65536_33 + 1)
      000032 FC               [12]  697 	mov	r4,a
      000033 AF*03            [24]  698 	mov	r7,(_EP0_SendData0_buff_65536_33 + 2)
      000035 88 82            [24]  699 	mov	dpl,r0
      000037 8C 83            [24]  700 	mov	dph,r4
      000039 8F F0            [24]  701 	mov	b,r7
      00003B 12r00r00         [24]  702 	lcall	__gptrget
      00003E F8               [12]  703 	mov	r0,a
      00003F 89 82            [24]  704 	mov	dpl,r1
      000041 8A 83            [24]  705 	mov	dph,r2
      000043 F0               [24]  706 	movx	@dptr,a
                                    707 ;	usb.c:261: for (i = 0; i < len; ++i) {
      000044 0B               [12]  708 	inc	r3
      000045 80 D6            [24]  709 	sjmp	00107$
      000047                        710 00101$:
                                    711 ;	usb.c:264: UEP0_T_LEN = len;
      000047 85*00 DD         [24]  712 	mov	_UEP0_T_LEN,_EP0_SendData0_PARM_2
                                    713 ;	usb.c:266: for (i = 0; i < EP0_SZ; ++i) {
      00004A 80 2C            [24]  714 	sjmp	00105$
      00004C                        715 00116$:
      00004C 7F 00            [12]  716 	mov	r7,#0x00
      00004E                        717 00109$:
                                    718 ;	usb.c:267: u8Ep0Buff[i] = buff[i];
      00004E EF               [12]  719 	mov	a,r7
      00004F 24r00            [12]  720 	add	a,#_u8Ep0Buff
      000051 FD               [12]  721 	mov	r5,a
      000052 E4               [12]  722 	clr	a
      000053 34s00            [12]  723 	addc	a,#(_u8Ep0Buff >> 8)
      000055 FE               [12]  724 	mov	r6,a
      000056 EF               [12]  725 	mov	a,r7
      000057 25*01            [12]  726 	add	a,_EP0_SendData0_buff_65536_33
      000059 FA               [12]  727 	mov	r2,a
      00005A E4               [12]  728 	clr	a
      00005B 35*02            [12]  729 	addc	a,(_EP0_SendData0_buff_65536_33 + 1)
      00005D FB               [12]  730 	mov	r3,a
      00005E AC*03            [24]  731 	mov	r4,(_EP0_SendData0_buff_65536_33 + 2)
      000060 8A 82            [24]  732 	mov	dpl,r2
      000062 8B 83            [24]  733 	mov	dph,r3
      000064 8C F0            [24]  734 	mov	b,r4
      000066 12r00r00         [24]  735 	lcall	__gptrget
      000069 FA               [12]  736 	mov	r2,a
      00006A 8D 82            [24]  737 	mov	dpl,r5
      00006C 8E 83            [24]  738 	mov	dph,r6
      00006E F0               [24]  739 	movx	@dptr,a
                                    740 ;	usb.c:266: for (i = 0; i < EP0_SZ; ++i) {
      00006F 0F               [12]  741 	inc	r7
      000070 BF 40 00         [24]  742 	cjne	r7,#0x40,00137$
      000073                        743 00137$:
      000073 40 D9            [24]  744 	jc	00109$
                                    745 ;	usb.c:269: UEP0_T_LEN = EP0_SZ;
      000075 75 DD 40         [24]  746 	mov	_UEP0_T_LEN,#0x40
      000078                        747 00105$:
                                    748 ;	usb.c:271: u8sync = 0;
      000078 75*08 00         [24]  749 	mov	_u8sync,#0x00
                                    750 ;	usb.c:272: UEP0_CTRL = (UEP_T_RES_ACK | UEP_R_RES_ACK);
      00007B 75 DC 00         [24]  751 	mov	_UEP0_CTRL,#0x00
                                    752 ;	usb.c:273: }
      00007E 22               [24]  753 	ret
                                    754 ;------------------------------------------------------------
                                    755 ;Allocation info for local variables in function 'EP0_SendData1'
                                    756 ;------------------------------------------------------------
                                    757 ;len                       Allocated with name '_EP0_SendData1_PARM_2'
                                    758 ;buff                      Allocated with name '_EP0_SendData1_buff_65536_41'
                                    759 ;i                         Allocated to registers r3 
                                    760 ;------------------------------------------------------------
                                    761 ;	usb.c:274: void EP0_SendData1(uint8_t *buff, uint8_t len)
                                    762 ;	-----------------------------------------
                                    763 ;	 function EP0_SendData1
                                    764 ;	-----------------------------------------
      00007F                        765 _EP0_SendData1:
      00007F 85 82*01         [24]  766 	mov	_EP0_SendData1_buff_65536_41,dpl
      000082 85 83*02         [24]  767 	mov	(_EP0_SendData1_buff_65536_41 + 1),dph
      000085 85 F0*03         [24]  768 	mov	(_EP0_SendData1_buff_65536_41 + 2),b
                                    769 ;	usb.c:277: u8Total = len;
      000088 85*00*03         [24]  770 	mov	_u8Total,_EP0_SendData1_PARM_2
                                    771 ;	usb.c:278: pu8Buff = buff;
      00008B 85*01*00         [24]  772 	mov	_pu8Buff,_EP0_SendData1_buff_65536_41
      00008E 85*02*01         [24]  773 	mov	(_pu8Buff + 1),(_EP0_SendData1_buff_65536_41 + 1)
      000091 85*03*02         [24]  774 	mov	(_pu8Buff + 2),(_EP0_SendData1_buff_65536_41 + 2)
                                    775 ;	usb.c:280: if (len <= EP0_SZ) {
      000094 E5*00            [12]  776 	mov	a,_EP0_SendData1_PARM_2
      000096 24 BF            [12]  777 	add	a,#0xff - 0x40
      000098 40 31            [24]  778 	jc	00116$
                                    779 ;	usb.c:281: for (i = 0; i < len; ++i) {
      00009A 7B 00            [12]  780 	mov	r3,#0x00
      00009C                        781 00107$:
      00009C C3               [12]  782 	clr	c
      00009D EB               [12]  783 	mov	a,r3
      00009E 95*00            [12]  784 	subb	a,_EP0_SendData1_PARM_2
      0000A0 50 24            [24]  785 	jnc	00101$
                                    786 ;	usb.c:282: u8Ep0Buff[i] = buff[i];
      0000A2 EB               [12]  787 	mov	a,r3
      0000A3 24r00            [12]  788 	add	a,#_u8Ep0Buff
      0000A5 F9               [12]  789 	mov	r1,a
      0000A6 E4               [12]  790 	clr	a
      0000A7 34s00            [12]  791 	addc	a,#(_u8Ep0Buff >> 8)
      0000A9 FA               [12]  792 	mov	r2,a
      0000AA EB               [12]  793 	mov	a,r3
      0000AB 25*01            [12]  794 	add	a,_EP0_SendData1_buff_65536_41
      0000AD F8               [12]  795 	mov	r0,a
      0000AE E4               [12]  796 	clr	a
      0000AF 35*02            [12]  797 	addc	a,(_EP0_SendData1_buff_65536_41 + 1)
      0000B1 FC               [12]  798 	mov	r4,a
      0000B2 AF*03            [24]  799 	mov	r7,(_EP0_SendData1_buff_65536_41 + 2)
      0000B4 88 82            [24]  800 	mov	dpl,r0
      0000B6 8C 83            [24]  801 	mov	dph,r4
      0000B8 8F F0            [24]  802 	mov	b,r7
      0000BA 12r00r00         [24]  803 	lcall	__gptrget
      0000BD F8               [12]  804 	mov	r0,a
      0000BE 89 82            [24]  805 	mov	dpl,r1
      0000C0 8A 83            [24]  806 	mov	dph,r2
      0000C2 F0               [24]  807 	movx	@dptr,a
                                    808 ;	usb.c:281: for (i = 0; i < len; ++i) {
      0000C3 0B               [12]  809 	inc	r3
      0000C4 80 D6            [24]  810 	sjmp	00107$
      0000C6                        811 00101$:
                                    812 ;	usb.c:284: UEP0_T_LEN = len;
      0000C6 85*00 DD         [24]  813 	mov	_UEP0_T_LEN,_EP0_SendData1_PARM_2
                                    814 ;	usb.c:286: for (i = 0; i < EP0_SZ; ++i) {
      0000C9 80 2C            [24]  815 	sjmp	00105$
      0000CB                        816 00116$:
      0000CB 7F 00            [12]  817 	mov	r7,#0x00
      0000CD                        818 00109$:
                                    819 ;	usb.c:287: u8Ep0Buff[i] = buff[i];
      0000CD EF               [12]  820 	mov	a,r7
      0000CE 24r00            [12]  821 	add	a,#_u8Ep0Buff
      0000D0 FD               [12]  822 	mov	r5,a
      0000D1 E4               [12]  823 	clr	a
      0000D2 34s00            [12]  824 	addc	a,#(_u8Ep0Buff >> 8)
      0000D4 FE               [12]  825 	mov	r6,a
      0000D5 EF               [12]  826 	mov	a,r7
      0000D6 25*01            [12]  827 	add	a,_EP0_SendData1_buff_65536_41
      0000D8 FA               [12]  828 	mov	r2,a
      0000D9 E4               [12]  829 	clr	a
      0000DA 35*02            [12]  830 	addc	a,(_EP0_SendData1_buff_65536_41 + 1)
      0000DC FB               [12]  831 	mov	r3,a
      0000DD AC*03            [24]  832 	mov	r4,(_EP0_SendData1_buff_65536_41 + 2)
      0000DF 8A 82            [24]  833 	mov	dpl,r2
      0000E1 8B 83            [24]  834 	mov	dph,r3
      0000E3 8C F0            [24]  835 	mov	b,r4
      0000E5 12r00r00         [24]  836 	lcall	__gptrget
      0000E8 FA               [12]  837 	mov	r2,a
      0000E9 8D 82            [24]  838 	mov	dpl,r5
      0000EB 8E 83            [24]  839 	mov	dph,r6
      0000ED F0               [24]  840 	movx	@dptr,a
                                    841 ;	usb.c:286: for (i = 0; i < EP0_SZ; ++i) {
      0000EE 0F               [12]  842 	inc	r7
      0000EF BF 40 00         [24]  843 	cjne	r7,#0x40,00137$
      0000F2                        844 00137$:
      0000F2 40 D9            [24]  845 	jc	00109$
                                    846 ;	usb.c:289: UEP0_T_LEN = EP0_SZ;
      0000F4 75 DD 40         [24]  847 	mov	_UEP0_T_LEN,#0x40
      0000F7                        848 00105$:
                                    849 ;	usb.c:291: u8sync = 1;
      0000F7 75*08 01         [24]  850 	mov	_u8sync,#0x01
                                    851 ;	usb.c:292: UEP0_CTRL = (0x40 | UEP_T_RES_ACK | UEP_R_RES_ACK);
      0000FA 75 DC 40         [24]  852 	mov	_UEP0_CTRL,#0x40
                                    853 ;	usb.c:293: }
      0000FD 22               [24]  854 	ret
                                    855 ;------------------------------------------------------------
                                    856 ;Allocation info for local variables in function 'EP0_RecData0'
                                    857 ;------------------------------------------------------------
                                    858 ;len                       Allocated with name '_EP0_RecData0_PARM_2'
                                    859 ;buff                      Allocated to registers 
                                    860 ;------------------------------------------------------------
                                    861 ;	usb.c:294: void EP0_RecData0(uint8_t *buff, uint8_t len)
                                    862 ;	-----------------------------------------
                                    863 ;	 function EP0_RecData0
                                    864 ;	-----------------------------------------
      0000FE                        865 _EP0_RecData0:
      0000FE 85 82*00         [24]  866 	mov	_pu8Buff,dpl
      000101 85 83*01         [24]  867 	mov	(_pu8Buff + 1),dph
      000104 85 F0*02         [24]  868 	mov	(_pu8Buff + 2),b
                                    869 ;	usb.c:296: u8Total = len;
      000107 85*00*03         [24]  870 	mov	_u8Total,_EP0_RecData0_PARM_2
                                    871 ;	usb.c:299: UEP0_CTRL = (UEP_T_RES_NAK | UEP_R_RES_ACK);
      00010A 75 DC 02         [24]  872 	mov	_UEP0_CTRL,#0x02
                                    873 ;	usb.c:300: }
      00010D 22               [24]  874 	ret
                                    875 ;------------------------------------------------------------
                                    876 ;Allocation info for local variables in function 'EP0_RecData1'
                                    877 ;------------------------------------------------------------
                                    878 ;len                       Allocated with name '_EP0_RecData1_PARM_2'
                                    879 ;buff                      Allocated to registers 
                                    880 ;------------------------------------------------------------
                                    881 ;	usb.c:301: void EP0_RecData1(uint8_t *buff, uint8_t len)
                                    882 ;	-----------------------------------------
                                    883 ;	 function EP0_RecData1
                                    884 ;	-----------------------------------------
      00010E                        885 _EP0_RecData1:
      00010E 85 82*00         [24]  886 	mov	_pu8Buff,dpl
      000111 85 83*01         [24]  887 	mov	(_pu8Buff + 1),dph
      000114 85 F0*02         [24]  888 	mov	(_pu8Buff + 2),b
                                    889 ;	usb.c:303: u8Total = len;
      000117 85*00*03         [24]  890 	mov	_u8Total,_EP0_RecData1_PARM_2
                                    891 ;	usb.c:306: UEP0_CTRL = (0x80 | UEP_T_RES_NAK | UEP_R_RES_ACK);
      00011A 75 DC 82         [24]  892 	mov	_UEP0_CTRL,#0x82
                                    893 ;	usb.c:307: }
      00011D 22               [24]  894 	ret
                                    895 ;------------------------------------------------------------
                                    896 ;Allocation info for local variables in function 'EP0_Stall'
                                    897 ;------------------------------------------------------------
                                    898 ;	usb.c:308: void EP0_Stall()
                                    899 ;	-----------------------------------------
                                    900 ;	 function EP0_Stall
                                    901 ;	-----------------------------------------
      00011E                        902 _EP0_Stall:
                                    903 ;	usb.c:310: UEP0_T_LEN = 0x00;
      00011E 75 DD 00         [24]  904 	mov	_UEP0_T_LEN,#0x00
                                    905 ;	usb.c:311: UEP0_CTRL = 0x03;
      000121 75 DC 03         [24]  906 	mov	_UEP0_CTRL,#0x03
                                    907 ;	usb.c:312: }
      000124 22               [24]  908 	ret
                                    909 ;------------------------------------------------------------
                                    910 ;Allocation info for local variables in function 'USB_InitClock'
                                    911 ;------------------------------------------------------------
                                    912 ;	usb.c:317: void USB_InitClock(void) {
                                    913 ;	-----------------------------------------
                                    914 ;	 function USB_InitClock
                                    915 ;	-----------------------------------------
      000125                        916 _USB_InitClock:
                                    917 ;	usb.c:319: }
      000125 22               [24]  918 	ret
                                    919 ;------------------------------------------------------------
                                    920 ;Allocation info for local variables in function 'USB_Init'
                                    921 ;------------------------------------------------------------
                                    922 ;	usb.c:321: void USB_Init(void) {
                                    923 ;	-----------------------------------------
                                    924 ;	 function USB_Init
                                    925 ;	-----------------------------------------
      000126                        926 _USB_Init:
                                    927 ;	usb.c:326: USB_CTRL = 0x29;
      000126 75 E2 29         [24]  928 	mov	_USB_CTRL,#0x29
                                    929 ;	usb.c:327: UDEV_CTRL |= bUD_PORT_EN;
      000129 43 D1 01         [24]  930 	orl	_UDEV_CTRL,#0x01
                                    931 ;	usb.c:331: }
      00012C 22               [24]  932 	ret
                                    933 ;------------------------------------------------------------
                                    934 ;Allocation info for local variables in function 'USB_Task'
                                    935 ;------------------------------------------------------------
                                    936 ;	usb.c:333: void USB_Task(void) {
                                    937 ;	-----------------------------------------
                                    938 ;	 function USB_Task
                                    939 ;	-----------------------------------------
      00012D                        940 _USB_Task:
                                    941 ;	usb.c:336: if (UIF_SUSPEND) {
                                    942 ;	usb.c:337: UIF_SUSPEND = 0;
                                    943 ;	assignBit
      00012D 10 DA 02         [24]  944 	jbc	_UIF_SUSPEND,00163$
      000130 80 01            [24]  945 	sjmp	00123$
      000132                        946 00163$:
      000132 22               [24]  947 	ret
      000133                        948 00123$:
                                    949 ;	usb.c:338: } else if (UIF_BUS_RST) {
      000133 30 D8 1A         [24]  950 	jnb	_UIF_BUS_RST,00120$
                                    951 ;	usb.c:340: USB_DEV_AD = 0x00;
      000136 75 E3 00         [24]  952 	mov	_USB_DEV_AD,#0x00
                                    953 ;	usb.c:341: UEP0_T_LEN = EP0_SZ;
      000139 75 DD 40         [24]  954 	mov	_UEP0_T_LEN,#0x40
                                    955 ;	usb.c:342: UEP0_CTRL = UEP_R_RES_ACK | UEP_T_RES_NAK;
      00013C 75 DC 02         [24]  956 	mov	_UEP0_CTRL,#0x02
                                    957 ;	usb.c:343: UIF_TRANSFER = 0;
                                    958 ;	assignBit
      00013F C2 D9            [12]  959 	clr	_UIF_TRANSFER
                                    960 ;	usb.c:344: UIF_BUS_RST = 0;
                                    961 ;	assignBit
      000141 C2 D8            [12]  962 	clr	_UIF_BUS_RST
                                    963 ;	usb.c:345: UEP0_DMA = (uint16_t)u8Ep0Buff;
      000143 75 ECr00         [24]  964 	mov	((_UEP0_DMA >> 0) & 0xFF),#_u8Ep0Buff
      000146 75 EDs00         [24]  965 	mov	((_UEP0_DMA >> 8) & 0xFF),#(_u8Ep0Buff >> 8)
                                    966 ;	usb.c:346: u8Addr = 0;
      000149 75*06 00         [24]  967 	mov	_u8Addr,#0x00
                                    968 ;	usb.c:347: u8Config = 0;
      00014C 75*07 00         [24]  969 	mov	_u8Config,#0x00
      00014F 22               [24]  970 	ret
      000150                        971 00120$:
                                    972 ;	usb.c:348: } else if (UIF_TRANSFER) {
      000150 20 D9 01         [24]  973 	jb	_UIF_TRANSFER,00165$
      000153 22               [24]  974 	ret
      000154                        975 00165$:
                                    976 ;	usb.c:356: UEP0_CTRL = UEP_R_RES_NAK | UEP_T_RES_NAK;
      000154 75 DC 0A         [24]  977 	mov	_UEP0_CTRL,#0x0a
                                    978 ;	usb.c:358: if((USB_INT_ST & 0x0F) == 0x00) {
      000157 E5 D9            [12]  979 	mov	a,_USB_INT_ST
      000159 54 0F            [12]  980 	anl	a,#0x0f
      00015B 60 02            [24]  981 	jz	00167$
      00015D 80 31            [24]  982 	sjmp	00115$
      00015F                        983 00167$:
                                    984 ;	usb.c:360: if((USB_INT_ST & 0x30) == 0x20) {
      00015F AE D9            [24]  985 	mov	r6,_USB_INT_ST
      000161 53 06 30         [24]  986 	anl	ar6,#0x30
      000164 7F 00            [12]  987 	mov	r7,#0x00
      000166 BE 20 08         [24]  988 	cjne	r6,#0x20,00107$
      000169 BF 00 05         [24]  989 	cjne	r7,#0x00,00107$
                                    990 ;	usb.c:362: EP0_In();
      00016C 12r02rE7         [24]  991 	lcall	_EP0_In
      00016F 80 41            [24]  992 	sjmp	00116$
      000171                        993 00107$:
                                    994 ;	usb.c:365: if((USB_INT_ST & 0x30) == 0x30) {
      000171 AE D9            [24]  995 	mov	r6,_USB_INT_ST
      000173 53 06 30         [24]  996 	anl	ar6,#0x30
      000176 7F 00            [12]  997 	mov	r7,#0x00
      000178 BE 30 08         [24]  998 	cjne	r6,#0x30,00104$
      00017B BF 00 05         [24]  999 	cjne	r7,#0x00,00104$
                                   1000 ;	usb.c:367: EP0_Setup();
      00017E 12r01rB5         [24] 1001 	lcall	_EP0_Setup
      000181 80 2F            [24] 1002 	sjmp	00116$
      000183                       1003 00104$:
                                   1004 ;	usb.c:368: } else if ((USB_INT_ST & 0x30) == 0x00) {
      000183 E5 D9            [12] 1005 	mov	a,_USB_INT_ST
      000185 54 30            [12] 1006 	anl	a,#0x30
      000187 60 02            [24] 1007 	jz	00173$
      000189 80 27            [24] 1008 	sjmp	00116$
      00018B                       1009 00173$:
                                   1010 ;	usb.c:370: EP0_Out();
      00018B 12r02r1D         [24] 1011 	lcall	_EP0_Out
      00018E 80 22            [24] 1012 	sjmp	00116$
      000190                       1013 00115$:
                                   1014 ;	usb.c:376: if((USB_INT_ST & 0x0F) == 0x01) {
      000190 AE D9            [24] 1015 	mov	r6,_USB_INT_ST
      000192 53 06 0F         [24] 1016 	anl	ar6,#0x0f
      000195 7F 00            [12] 1017 	mov	r7,#0x00
      000197 BE 01 18         [24] 1018 	cjne	r6,#0x01,00116$
      00019A BF 00 15         [24] 1019 	cjne	r7,#0x00,00116$
                                   1020 ;	usb.c:378: if((USB_INT_ST & 0x30) == 0x20) {
      00019D AE D9            [24] 1021 	mov	r6,_USB_INT_ST
      00019F 53 06 30         [24] 1022 	anl	ar6,#0x30
      0001A2 7F 00            [12] 1023 	mov	r7,#0x00
      0001A4 BE 20 08         [24] 1024 	cjne	r6,#0x20,00110$
      0001A7 BF 00 05         [24] 1025 	cjne	r7,#0x00,00110$
                                   1026 ;	usb.c:379: EP1_In();
      0001AA 12r07rDB         [24] 1027 	lcall	_EP1_In
      0001AD 80 03            [24] 1028 	sjmp	00116$
      0001AF                       1029 00110$:
                                   1030 ;	usb.c:381: EP1_Out();
      0001AF 12r07rDA         [24] 1031 	lcall	_EP1_Out
      0001B2                       1032 00116$:
                                   1033 ;	usb.c:385: UIF_TRANSFER = 0;
                                   1034 ;	assignBit
      0001B2 C2 D9            [12] 1035 	clr	_UIF_TRANSFER
                                   1036 ;	usb.c:388: }
      0001B4 22               [24] 1037 	ret
                                   1038 ;------------------------------------------------------------
                                   1039 ;Allocation info for local variables in function 'EP0_Setup'
                                   1040 ;------------------------------------------------------------
                                   1041 ;i                         Allocated to registers r7 
                                   1042 ;u8RequestType             Allocated to registers r7 
                                   1043 ;------------------------------------------------------------
                                   1044 ;	usb.c:390: static void EP0_Setup(void) {
                                   1045 ;	-----------------------------------------
                                   1046 ;	 function EP0_Setup
                                   1047 ;	-----------------------------------------
      0001B5                       1048 _EP0_Setup:
                                   1049 ;	usb.c:394: Led_On();
      0001B5 12r00r00         [24] 1050 	lcall	_Led_On
                                   1051 ;	usb.c:395: for (i = 0; i < 8; ++i) {
      0001B8 7F 00            [12] 1052 	mov	r7,#0x00
      0001BA                       1053 00107$:
                                   1054 ;	usb.c:396: u8SetupPacket[i] = u8Ep0Buff[i];
      0001BA EF               [12] 1055 	mov	a,r7
      0001BB 24r6C            [12] 1056 	add	a,#_u8SetupPacket
      0001BD FD               [12] 1057 	mov	r5,a
      0001BE E4               [12] 1058 	clr	a
      0001BF 34s01            [12] 1059 	addc	a,#(_u8SetupPacket >> 8)
      0001C1 FE               [12] 1060 	mov	r6,a
      0001C2 EF               [12] 1061 	mov	a,r7
      0001C3 24r00            [12] 1062 	add	a,#_u8Ep0Buff
      0001C5 F5 82            [12] 1063 	mov	dpl,a
      0001C7 E4               [12] 1064 	clr	a
      0001C8 34s00            [12] 1065 	addc	a,#(_u8Ep0Buff >> 8)
      0001CA F5 83            [12] 1066 	mov	dph,a
      0001CC E0               [24] 1067 	movx	a,@dptr
      0001CD FC               [12] 1068 	mov	r4,a
      0001CE 8D 82            [24] 1069 	mov	dpl,r5
      0001D0 8E 83            [24] 1070 	mov	dph,r6
      0001D2 F0               [24] 1071 	movx	@dptr,a
                                   1072 ;	usb.c:395: for (i = 0; i < 8; ++i) {
      0001D3 0F               [12] 1073 	inc	r7
      0001D4 BF 08 00         [24] 1074 	cjne	r7,#0x08,00132$
      0001D7                       1075 00132$:
      0001D7 40 E1            [24] 1076 	jc	00107$
                                   1077 ;	usb.c:402: u8RequestType = (u8Ep0Buff[0] & 0x60) >> 5;
      0001D9 90r00r00         [24] 1078 	mov	dptr,#_u8Ep0Buff
      0001DC E0               [24] 1079 	movx	a,@dptr
      0001DD FF               [12] 1080 	mov	r7,a
      0001DE 53 07 60         [24] 1081 	anl	ar7,#0x60
      0001E1 E4               [12] 1082 	clr	a
      0001E2 C4               [12] 1083 	swap	a
      0001E3 03               [12] 1084 	rr	a
      0001E4 CF               [12] 1085 	xch	a,r7
      0001E5 C4               [12] 1086 	swap	a
      0001E6 03               [12] 1087 	rr	a
      0001E7 54 07            [12] 1088 	anl	a,#0x07
      0001E9 6F               [12] 1089 	xrl	a,r7
      0001EA CF               [12] 1090 	xch	a,r7
      0001EB 54 07            [12] 1091 	anl	a,#0x07
      0001ED CF               [12] 1092 	xch	a,r7
      0001EE 6F               [12] 1093 	xrl	a,r7
      0001EF CF               [12] 1094 	xch	a,r7
      0001F0 30 E2 02         [24] 1095 	jnb	acc.2,00134$
      0001F3 44 F8            [12] 1096 	orl	a,#0xf8
      0001F5                       1097 00134$:
      0001F5 FE               [12] 1098 	mov	r6,a
                                   1099 ;	usb.c:403: switch(u8RequestType) {
      0001F6 BF 00 02         [24] 1100 	cjne	r7,#0x00,00135$
      0001F9 80 0A            [24] 1101 	sjmp	00102$
      0001FB                       1102 00135$:
      0001FB BF 01 02         [24] 1103 	cjne	r7,#0x01,00136$
      0001FE 80 08            [24] 1104 	sjmp	00103$
      000200                       1105 00136$:
                                   1106 ;	usb.c:404: case 0x00:
      000200 BF 02 0B         [24] 1107 	cjne	r7,#0x02,00105$
      000203 80 06            [24] 1108 	sjmp	00104$
      000205                       1109 00102$:
                                   1110 ;	usb.c:406: StandardRequest();
                                   1111 ;	usb.c:407: break;
                                   1112 ;	usb.c:408: case 0x01:
      000205 02r03r8A         [24] 1113 	ljmp	_StandardRequest
      000208                       1114 00103$:
                                   1115 ;	usb.c:410: ClassRequest();
                                   1116 ;	usb.c:411: break;
                                   1117 ;	usb.c:412: case 0x02:
      000208 02r03rDE         [24] 1118 	ljmp	_ClassRequest
      00020B                       1119 00104$:
                                   1120 ;	usb.c:414: VendorRequest();
                                   1121 ;	usb.c:415: break;
                                   1122 ;	usb.c:416: default:
      00020B 02r03rFA         [24] 1123 	ljmp	_VendorRequest
      00020E                       1124 00105$:
                                   1125 ;	usb.c:419: EP0_RecData0(u8ReceiveBuff, EP0_SZ);
      00020E 75*00 40         [24] 1126 	mov	_EP0_RecData0_PARM_2,#0x40
      000211 90r00r40         [24] 1127 	mov	dptr,#_u8ReceiveBuff
      000214 75 F0 00         [24] 1128 	mov	b,#0x00
      000217 12r00rFE         [24] 1129 	lcall	_EP0_RecData0
                                   1130 ;	usb.c:420: EP0_Stall();
                                   1131 ;	usb.c:422: }
                                   1132 ;	usb.c:423: }
      00021A 02r01r1E         [24] 1133 	ljmp	_EP0_Stall
                                   1134 ;------------------------------------------------------------
                                   1135 ;Allocation info for local variables in function 'EP0_Out'
                                   1136 ;------------------------------------------------------------
                                   1137 ;i                         Allocated to registers r7 
                                   1138 ;------------------------------------------------------------
                                   1139 ;	usb.c:425: static void EP0_Out(void) {
                                   1140 ;	-----------------------------------------
                                   1141 ;	 function EP0_Out
                                   1142 ;	-----------------------------------------
      00021D                       1143 _EP0_Out:
                                   1144 ;	usb.c:427: if (u8ControlState == DATA_STATE) {
      00021D 74 01            [12] 1145 	mov	a,#0x01
      00021F B5*09 02         [24] 1146 	cjne	a,_u8ControlState,00161$
      000222 80 03            [24] 1147 	sjmp	00162$
      000224                       1148 00161$:
      000224 02r02rCF         [24] 1149 	ljmp	00114$
      000227                       1150 00162$:
                                   1151 ;	usb.c:428: if (u8Total <= EP0_SZ) {
      000227 E5*03            [12] 1152 	mov	a,_u8Total
      000229 24 BF            [12] 1153 	add	a,#0xff - 0x40
      00022B 40 43            [24] 1154 	jc	00128$
                                   1155 ;	usb.c:430: for (i = 0; i < u8Total; ++i) {
      00022D 7F 00            [12] 1156 	mov	r7,#0x00
      00022F                       1157 00117$:
      00022F C3               [12] 1158 	clr	c
      000230 EF               [12] 1159 	mov	a,r7
      000231 95*03            [12] 1160 	subb	a,_u8Total
      000233 50 22            [24] 1161 	jnc	00101$
                                   1162 ;	usb.c:431: pu8Buff[i] = u8Ep0Buff[i];
      000235 EF               [12] 1163 	mov	a,r7
      000236 25*00            [12] 1164 	add	a,_pu8Buff
      000238 FC               [12] 1165 	mov	r4,a
      000239 E4               [12] 1166 	clr	a
      00023A 35*01            [12] 1167 	addc	a,(_pu8Buff + 1)
      00023C FD               [12] 1168 	mov	r5,a
      00023D AE*02            [24] 1169 	mov	r6,(_pu8Buff + 2)
      00023F EF               [12] 1170 	mov	a,r7
      000240 24r00            [12] 1171 	add	a,#_u8Ep0Buff
      000242 F5 82            [12] 1172 	mov	dpl,a
      000244 E4               [12] 1173 	clr	a
      000245 34s00            [12] 1174 	addc	a,#(_u8Ep0Buff >> 8)
      000247 F5 83            [12] 1175 	mov	dph,a
      000249 E0               [24] 1176 	movx	a,@dptr
      00024A FB               [12] 1177 	mov	r3,a
      00024B 8C 82            [24] 1178 	mov	dpl,r4
      00024D 8D 83            [24] 1179 	mov	dph,r5
      00024F 8E F0            [24] 1180 	mov	b,r6
      000251 12r00r00         [24] 1181 	lcall	__gptrput
                                   1182 ;	usb.c:430: for (i = 0; i < u8Total; ++i) {
      000254 0F               [12] 1183 	inc	r7
      000255 80 D8            [24] 1184 	sjmp	00117$
      000257                       1185 00101$:
                                   1186 ;	usb.c:439: if (u8HidReq) {
      000257 E5*04            [12] 1187 	mov	a,_u8HidReq
      000259 60 06            [24] 1188 	jz	00103$
                                   1189 ;	usb.c:441: EP0_Out_CallBack();
      00025B 12r00r00         [24] 1190 	lcall	_EP0_Out_CallBack
                                   1191 ;	usb.c:443: u8HidReq = 0;
      00025E 75*04 00         [24] 1192 	mov	_u8HidReq,#0x00
      000261                       1193 00103$:
                                   1194 ;	usb.c:445: u8ControlState = STATUS_STATE;
      000261 75*09 02         [24] 1195 	mov	_u8ControlState,#0x02
                                   1196 ;	usb.c:446: EP0_SendData1(u8TransBuff, 0);
      000264 75*00 00         [24] 1197 	mov	_EP0_SendData1_PARM_2,#0x00
      000267 90r00rD6         [24] 1198 	mov	dptr,#_u8TransBuff
      00026A 75 F0 00         [24] 1199 	mov	b,#0x00
      00026D 02r00r7F         [24] 1200 	ljmp	_EP0_SendData1
                                   1201 ;	usb.c:448: for (i = 0; i < EP0_SZ; ++i) {
      000270                       1202 00128$:
      000270 7F 00            [12] 1203 	mov	r7,#0x00
      000272                       1204 00119$:
                                   1205 ;	usb.c:449: pu8Buff[i] = u8Ep0Buff[i];
      000272 EF               [12] 1206 	mov	a,r7
      000273 25*00            [12] 1207 	add	a,_pu8Buff
      000275 FC               [12] 1208 	mov	r4,a
      000276 E4               [12] 1209 	clr	a
      000277 35*01            [12] 1210 	addc	a,(_pu8Buff + 1)
      000279 FD               [12] 1211 	mov	r5,a
      00027A AE*02            [24] 1212 	mov	r6,(_pu8Buff + 2)
      00027C EF               [12] 1213 	mov	a,r7
      00027D 24r00            [12] 1214 	add	a,#_u8Ep0Buff
      00027F F5 82            [12] 1215 	mov	dpl,a
      000281 E4               [12] 1216 	clr	a
      000282 34s00            [12] 1217 	addc	a,#(_u8Ep0Buff >> 8)
      000284 F5 83            [12] 1218 	mov	dph,a
      000286 E0               [24] 1219 	movx	a,@dptr
      000287 8C 82            [24] 1220 	mov	dpl,r4
      000289 8D 83            [24] 1221 	mov	dph,r5
      00028B 8E F0            [24] 1222 	mov	b,r6
      00028D 12r00r00         [24] 1223 	lcall	__gptrput
                                   1224 ;	usb.c:448: for (i = 0; i < EP0_SZ; ++i) {
      000290 0F               [12] 1225 	inc	r7
      000291 BF 40 00         [24] 1226 	cjne	r7,#0x40,00166$
      000294                       1227 00166$:
      000294 40 DC            [24] 1228 	jc	00119$
                                   1229 ;	usb.c:454: if (UEP0_CTRL & 0x80) {
      000296 E5 DC            [12] 1230 	mov	a,_UEP0_CTRL
      000298 30 E7 1A         [24] 1231 	jnb	acc.7,00106$
                                   1232 ;	usb.c:455: EP0_RecData0(pu8Buff + EP0_SZ, u8Total - EP0_SZ);
      00029B 74 40            [12] 1233 	mov	a,#0x40
      00029D 25*00            [12] 1234 	add	a,_pu8Buff
      00029F FD               [12] 1235 	mov	r5,a
      0002A0 E4               [12] 1236 	clr	a
      0002A1 35*01            [12] 1237 	addc	a,(_pu8Buff + 1)
      0002A3 FE               [12] 1238 	mov	r6,a
      0002A4 AF*02            [24] 1239 	mov	r7,(_pu8Buff + 2)
      0002A6 E5*03            [12] 1240 	mov	a,_u8Total
      0002A8 24 C0            [12] 1241 	add	a,#0xc0
      0002AA F5*00            [12] 1242 	mov	_EP0_RecData0_PARM_2,a
      0002AC 8D 82            [24] 1243 	mov	dpl,r5
      0002AE 8E 83            [24] 1244 	mov	dph,r6
      0002B0 8F F0            [24] 1245 	mov	b,r7
      0002B2 02r00rFE         [24] 1246 	ljmp	_EP0_RecData0
      0002B5                       1247 00106$:
                                   1248 ;	usb.c:457: EP0_RecData1(pu8Buff + EP0_SZ, u8Total - EP0_SZ);
      0002B5 74 40            [12] 1249 	mov	a,#0x40
      0002B7 25*00            [12] 1250 	add	a,_pu8Buff
      0002B9 FD               [12] 1251 	mov	r5,a
      0002BA E4               [12] 1252 	clr	a
      0002BB 35*01            [12] 1253 	addc	a,(_pu8Buff + 1)
      0002BD FE               [12] 1254 	mov	r6,a
      0002BE AF*02            [24] 1255 	mov	r7,(_pu8Buff + 2)
      0002C0 E5*03            [12] 1256 	mov	a,_u8Total
      0002C2 24 C0            [12] 1257 	add	a,#0xc0
      0002C4 F5*00            [12] 1258 	mov	_EP0_RecData1_PARM_2,a
      0002C6 8D 82            [24] 1259 	mov	dpl,r5
      0002C8 8E 83            [24] 1260 	mov	dph,r6
      0002CA 8F F0            [24] 1261 	mov	b,r7
      0002CC 02r01r0E         [24] 1262 	ljmp	_EP0_RecData1
      0002CF                       1263 00114$:
                                   1264 ;	usb.c:460: } else if (u8ControlState == STATUS_STATE) {
      0002CF 74 02            [12] 1265 	mov	a,#0x02
      0002D1 B5*09 12         [24] 1266 	cjne	a,_u8ControlState,00121$
                                   1267 ;	usb.c:461: u8ControlState = SETUP_STATE;
      0002D4 75*09 00         [24] 1268 	mov	_u8ControlState,#0x00
                                   1269 ;	usb.c:462: EP0_RecData0(u8ReceiveBuff, EP0_SZ);
      0002D7 75*00 40         [24] 1270 	mov	_EP0_RecData0_PARM_2,#0x40
      0002DA 90r00r40         [24] 1271 	mov	dptr,#_u8ReceiveBuff
      0002DD 75 F0 00         [24] 1272 	mov	b,#0x00
      0002E0 12r00rFE         [24] 1273 	lcall	_EP0_RecData0
                                   1274 ;	usb.c:463: Led_Off();
                                   1275 ;	usb.c:465: }
      0002E3 02r00r00         [24] 1276 	ljmp	_Led_Off
      0002E6                       1277 00121$:
      0002E6 22               [24] 1278 	ret
                                   1279 ;------------------------------------------------------------
                                   1280 ;Allocation info for local variables in function 'EP0_In'
                                   1281 ;------------------------------------------------------------
                                   1282 ;	usb.c:466: static void EP0_In(void) {
                                   1283 ;	-----------------------------------------
                                   1284 ;	 function EP0_In
                                   1285 ;	-----------------------------------------
      0002E7                       1286 _EP0_In:
                                   1287 ;	usb.c:468: if (u8ControlState == DATA_STATE) {
      0002E7 74 01            [12] 1288 	mov	a,#0x01
      0002E9 B5*09 02         [24] 1289 	cjne	a,_u8ControlState,00143$
      0002EC 80 03            [24] 1290 	sjmp	00144$
      0002EE                       1291 00143$:
      0002EE 02r03r68         [24] 1292 	ljmp	00115$
      0002F1                       1293 00144$:
                                   1294 ;	usb.c:469: if (u8Total <= EP0_SZ) {
      0002F1 E5*03            [12] 1295 	mov	a,_u8Total
      0002F3 24 BF            [12] 1296 	add	a,#0xff - 0x40
      0002F5 40 39            [24] 1297 	jc	00108$
                                   1298 ;	usb.c:470: u8Total = 0;
      0002F7 75*03 00         [24] 1299 	mov	_u8Total,#0x00
                                   1300 ;	usb.c:471: u8ControlState = STATUS_STATE;
      0002FA 75*09 02         [24] 1301 	mov	_u8ControlState,#0x02
                                   1302 ;	usb.c:472: EP0_RecData1(u8ReceiveBuff, 0);
      0002FD 75*00 00         [24] 1303 	mov	_EP0_RecData1_PARM_2,#0x00
      000300 90r00r40         [24] 1304 	mov	dptr,#_u8ReceiveBuff
      000303 75 F0 00         [24] 1305 	mov	b,#0x00
      000306 12r01r0E         [24] 1306 	lcall	_EP0_RecData1
                                   1307 ;	usb.c:473: if (u8sync) {
      000309 E5*08            [12] 1308 	mov	a,_u8sync
      00030B 60 11            [24] 1309 	jz	00102$
                                   1310 ;	usb.c:474: EP0_SendData0(pu8Buff, 0);
      00030D 75*00 00         [24] 1311 	mov	_EP0_SendData0_PARM_2,#0x00
      000310 85*00 82         [24] 1312 	mov	dpl,_pu8Buff
      000313 85*01 83         [24] 1313 	mov	dph,(_pu8Buff + 1)
      000316 85*02 F0         [24] 1314 	mov	b,(_pu8Buff + 2)
      000319 12r00r00         [24] 1315 	lcall	_EP0_SendData0
      00031C 80 0F            [24] 1316 	sjmp	00103$
      00031E                       1317 00102$:
                                   1318 ;	usb.c:476: EP0_SendData1(pu8Buff, 0);
      00031E 75*00 00         [24] 1319 	mov	_EP0_SendData1_PARM_2,#0x00
      000321 85*00 82         [24] 1320 	mov	dpl,_pu8Buff
      000324 85*01 83         [24] 1321 	mov	dph,(_pu8Buff + 1)
      000327 85*02 F0         [24] 1322 	mov	b,(_pu8Buff + 2)
      00032A 12r00r7F         [24] 1323 	lcall	_EP0_SendData1
      00032D                       1324 00103$:
                                   1325 ;	usb.c:478: Led_Off();
      00032D 02r00r00         [24] 1326 	ljmp	_Led_Off
      000330                       1327 00108$:
                                   1328 ;	usb.c:480: if (u8sync) {
      000330 E5*08            [12] 1329 	mov	a,_u8sync
      000332 60 1A            [24] 1330 	jz	00105$
                                   1331 ;	usb.c:481: EP0_SendData0(pu8Buff + EP0_SZ, u8Total - EP0_SZ);
      000334 74 40            [12] 1332 	mov	a,#0x40
      000336 25*00            [12] 1333 	add	a,_pu8Buff
      000338 FD               [12] 1334 	mov	r5,a
      000339 E4               [12] 1335 	clr	a
      00033A 35*01            [12] 1336 	addc	a,(_pu8Buff + 1)
      00033C FE               [12] 1337 	mov	r6,a
      00033D AF*02            [24] 1338 	mov	r7,(_pu8Buff + 2)
      00033F E5*03            [12] 1339 	mov	a,_u8Total
      000341 24 C0            [12] 1340 	add	a,#0xc0
      000343 F5*00            [12] 1341 	mov	_EP0_SendData0_PARM_2,a
      000345 8D 82            [24] 1342 	mov	dpl,r5
      000347 8E 83            [24] 1343 	mov	dph,r6
      000349 8F F0            [24] 1344 	mov	b,r7
      00034B 02r00r00         [24] 1345 	ljmp	_EP0_SendData0
      00034E                       1346 00105$:
                                   1347 ;	usb.c:483: EP0_SendData1(pu8Buff + EP0_SZ, u8Total - EP0_SZ);
      00034E 74 40            [12] 1348 	mov	a,#0x40
      000350 25*00            [12] 1349 	add	a,_pu8Buff
      000352 FD               [12] 1350 	mov	r5,a
      000353 E4               [12] 1351 	clr	a
      000354 35*01            [12] 1352 	addc	a,(_pu8Buff + 1)
      000356 FE               [12] 1353 	mov	r6,a
      000357 AF*02            [24] 1354 	mov	r7,(_pu8Buff + 2)
      000359 E5*03            [12] 1355 	mov	a,_u8Total
      00035B 24 C0            [12] 1356 	add	a,#0xc0
      00035D F5*00            [12] 1357 	mov	_EP0_SendData1_PARM_2,a
      00035F 8D 82            [24] 1358 	mov	dpl,r5
      000361 8E 83            [24] 1359 	mov	dph,r6
      000363 8F F0            [24] 1360 	mov	b,r7
      000365 02r00r7F         [24] 1361 	ljmp	_EP0_SendData1
      000368                       1362 00115$:
                                   1363 ;	usb.c:486: } else if (u8ControlState == STATUS_STATE) {
      000368 74 02            [12] 1364 	mov	a,#0x02
      00036A B5*09 1C         [24] 1365 	cjne	a,_u8ControlState,00117$
                                   1366 ;	usb.c:487: if (u8Addr) {
      00036D E5*06            [12] 1367 	mov	a,_u8Addr
      00036F 60 06            [24] 1368 	jz	00111$
                                   1369 ;	usb.c:488: USB_DEV_AD = u8Addr;
      000371 85*06 E3         [24] 1370 	mov	_USB_DEV_AD,_u8Addr
                                   1371 ;	usb.c:489: u8Addr = 0;
      000374 75*06 00         [24] 1372 	mov	_u8Addr,#0x00
      000377                       1373 00111$:
                                   1374 ;	usb.c:492: u8ControlState = SETUP_STATE;
      000377 75*09 00         [24] 1375 	mov	_u8ControlState,#0x00
                                   1376 ;	usb.c:493: EP0_RecData0(u8ReceiveBuff, EP0_SZ);
      00037A 75*00 40         [24] 1377 	mov	_EP0_RecData0_PARM_2,#0x40
      00037D 90r00r40         [24] 1378 	mov	dptr,#_u8ReceiveBuff
      000380 75 F0 00         [24] 1379 	mov	b,#0x00
      000383 12r00rFE         [24] 1380 	lcall	_EP0_RecData0
                                   1381 ;	usb.c:494: Led_Off();
                                   1382 ;	usb.c:496: }
      000386 02r00r00         [24] 1383 	ljmp	_Led_Off
      000389                       1384 00117$:
      000389 22               [24] 1385 	ret
                                   1386 ;------------------------------------------------------------
                                   1387 ;Allocation info for local variables in function 'StandardRequest'
                                   1388 ;------------------------------------------------------------
                                   1389 ;	usb.c:498: static void StandardRequest(void) {
                                   1390 ;	-----------------------------------------
                                   1391 ;	 function StandardRequest
                                   1392 ;	-----------------------------------------
      00038A                       1393 _StandardRequest:
                                   1394 ;	usb.c:500: switch(u8SetupPacket[1]) {
      00038A 90r01r6D         [24] 1395 	mov	dptr,#(_u8SetupPacket + 0x0001)
      00038D E0               [24] 1396 	movx	a,@dptr
      00038E FF               [12] 1397 	mov  r7,a
      00038F 24 F3            [12] 1398 	add	a,#0xff - 0x0c
      000391 50 01            [24] 1399 	jnc	00119$
      000393 22               [24] 1400 	ret
      000394                       1401 00119$:
      000394 EF               [12] 1402 	mov	a,r7
      000395 24 0A            [12] 1403 	add	a,#(00120$-3-.)
      000397 83               [24] 1404 	movc	a,@a+pc
      000398 F5 82            [12] 1405 	mov	dpl,a
      00039A EF               [12] 1406 	mov	a,r7
      00039B 24 11            [12] 1407 	add	a,#(00121$-3-.)
      00039D 83               [24] 1408 	movc	a,@a+pc
      00039E F5 83            [12] 1409 	mov	dph,a
      0003A0 E4               [12] 1410 	clr	a
      0003A1 73               [24] 1411 	jmp	@a+dptr
      0003A2                       1412 00120$:
      0003A2rBC                    1413 	.db	00101$
      0003A3rBF                    1414 	.db	00102$
      0003A4rDD                    1415 	.db	00113$
      0003A5rC2                    1416 	.db	00103$
      0003A6rDD                    1417 	.db	00113$
      0003A7rC5                    1418 	.db	00104$
      0003A8rC8                    1419 	.db	00105$
      0003A9rCB                    1420 	.db	00106$
      0003AArCE                    1421 	.db	00107$
      0003ABrD1                    1422 	.db	00108$
      0003ACrD4                    1423 	.db	00109$
      0003ADrD7                    1424 	.db	00110$
      0003AErDA                    1425 	.db	00111$
      0003AF                       1426 00121$:
      0003AFs03                    1427 	.db	00101$>>8
      0003B0s03                    1428 	.db	00102$>>8
      0003B1s03                    1429 	.db	00113$>>8
      0003B2s03                    1430 	.db	00103$>>8
      0003B3s03                    1431 	.db	00113$>>8
      0003B4s03                    1432 	.db	00104$>>8
      0003B5s03                    1433 	.db	00105$>>8
      0003B6s03                    1434 	.db	00106$>>8
      0003B7s03                    1435 	.db	00107$>>8
      0003B8s03                    1436 	.db	00108$>>8
      0003B9s03                    1437 	.db	00109$>>8
      0003BAs03                    1438 	.db	00110$>>8
      0003BBs03                    1439 	.db	00111$>>8
                                   1440 ;	usb.c:501: case 0x00:
      0003BC                       1441 00101$:
                                   1442 ;	usb.c:503: GetStatus();
                                   1443 ;	usb.c:504: break;
                                   1444 ;	usb.c:505: case 0x01:
      0003BC 02r03rFB         [24] 1445 	ljmp	_GetStatus
      0003BF                       1446 00102$:
                                   1447 ;	usb.c:507: ClearFeature();
                                   1448 ;	usb.c:508: break;
                                   1449 ;	usb.c:509: case 0x03:
      0003BF 02r04r6F         [24] 1450 	ljmp	_ClearFeature
      0003C2                       1451 00103$:
                                   1452 ;	usb.c:511: SetFeature();
                                   1453 ;	usb.c:512: break;
                                   1454 ;	usb.c:513: case 0x05:
      0003C2 02r04rB4         [24] 1455 	ljmp	_SetFeature
      0003C5                       1456 00104$:
                                   1457 ;	usb.c:515: SetAddress();
                                   1458 ;	usb.c:516: break;
                                   1459 ;	usb.c:517: case 0x06:
      0003C5 02r04rF9         [24] 1460 	ljmp	_SetAddress
      0003C8                       1461 00105$:
                                   1462 ;	usb.c:519: GetDescriptor();
                                   1463 ;	usb.c:520: break;
                                   1464 ;	usb.c:521: case 0x07:
      0003C8 02r05r0F         [24] 1465 	ljmp	_GetDescriptor
      0003CB                       1466 00106$:
                                   1467 ;	usb.c:523: SetDescriptor();
                                   1468 ;	usb.c:524: break;
                                   1469 ;	usb.c:525: case 0x08:
      0003CB 02r07r75         [24] 1470 	ljmp	_SetDescriptor
      0003CE                       1471 00107$:
                                   1472 ;	usb.c:527: GetConfiguration();
                                   1473 ;	usb.c:528: break;
                                   1474 ;	usb.c:529: case 0x09:
      0003CE 02r07r88         [24] 1475 	ljmp	_GetConfiguration
      0003D1                       1476 00108$:
                                   1477 ;	usb.c:531: SetConfiguration();
                                   1478 ;	usb.c:532: break;
                                   1479 ;	usb.c:533: case 0x0A:
      0003D1 02r07r9E         [24] 1480 	ljmp	_SetConfiguration
      0003D4                       1481 00109$:
                                   1482 ;	usb.c:535: GetInterface();
                                   1483 ;	usb.c:536: break;
                                   1484 ;	usb.c:537: case 0x0B:
      0003D4 02r07rB4         [24] 1485 	ljmp	_GetInterface
      0003D7                       1486 00110$:
                                   1487 ;	usb.c:539: SetInterface();
                                   1488 ;	usb.c:540: break;
                                   1489 ;	usb.c:541: case 0x0C:
      0003D7 02r07rC9         [24] 1490 	ljmp	_SetInterface
      0003DA                       1491 00111$:
                                   1492 ;	usb.c:543: SynchFrame();
                                   1493 ;	usb.c:545: }
                                   1494 ;	usb.c:546: }
      0003DA 02r07rD9         [24] 1495 	ljmp	_SynchFrame
      0003DD                       1496 00113$:
      0003DD 22               [24] 1497 	ret
                                   1498 ;------------------------------------------------------------
                                   1499 ;Allocation info for local variables in function 'ClassRequest'
                                   1500 ;------------------------------------------------------------
                                   1501 ;	usb.c:547: static void ClassRequest(void) {
                                   1502 ;	-----------------------------------------
                                   1503 ;	 function ClassRequest
                                   1504 ;	-----------------------------------------
      0003DE                       1505 _ClassRequest:
                                   1506 ;	usb.c:548: switch(u8SetupPacket[1]) {
      0003DE 90r01r6D         [24] 1507 	mov	dptr,#(_u8SetupPacket + 0x0001)
      0003E1 E0               [24] 1508 	movx	a,@dptr
      0003E2 FF               [12] 1509 	mov	r7,a
      0003E3 BF 01 02         [24] 1510 	cjne	r7,#0x01,00119$
      0003E6 80 0E            [24] 1511 	sjmp	00103$
      0003E8                       1512 00119$:
      0003E8 BF 09 02         [24] 1513 	cjne	r7,#0x09,00120$
      0003EB 80 06            [24] 1514 	sjmp	00102$
      0003ED                       1515 00120$:
      0003ED BF 0A 09         [24] 1516 	cjne	r7,#0x0a,00105$
                                   1517 ;	usb.c:550: HID_SetIdle();
                                   1518 ;	usb.c:551: break;
                                   1519 ;	usb.c:552: case 0x09:
      0003F0 02r07rDC         [24] 1520 	ljmp	_HID_SetIdle
      0003F3                       1521 00102$:
                                   1522 ;	usb.c:553: HID_SetReport();
                                   1523 ;	usb.c:554: break;
                                   1524 ;	usb.c:555: case 0x01:
      0003F3 02r07rE2         [24] 1525 	ljmp	_HID_SetReport
      0003F6                       1526 00103$:
                                   1527 ;	usb.c:556: HID_GetReport();
                                   1528 ;	usb.c:558: }
                                   1529 ;	usb.c:559: }
      0003F6 02r08r21         [24] 1530 	ljmp	_HID_GetReport
      0003F9                       1531 00105$:
      0003F9 22               [24] 1532 	ret
                                   1533 ;------------------------------------------------------------
                                   1534 ;Allocation info for local variables in function 'VendorRequest'
                                   1535 ;------------------------------------------------------------
                                   1536 ;	usb.c:561: static void VendorRequest(void) {
                                   1537 ;	-----------------------------------------
                                   1538 ;	 function VendorRequest
                                   1539 ;	-----------------------------------------
      0003FA                       1540 _VendorRequest:
                                   1541 ;	usb.c:563: }
      0003FA 22               [24] 1542 	ret
                                   1543 ;------------------------------------------------------------
                                   1544 ;Allocation info for local variables in function 'GetStatus'
                                   1545 ;------------------------------------------------------------
                                   1546 ;u8R                       Allocated to registers r7 
                                   1547 ;------------------------------------------------------------
                                   1548 ;	usb.c:565: static void GetStatus(void) {
                                   1549 ;	-----------------------------------------
                                   1550 ;	 function GetStatus
                                   1551 ;	-----------------------------------------
      0003FB                       1552 _GetStatus:
                                   1553 ;	usb.c:572: u8R=u8SetupPacket[0] & 0x1F;
      0003FB 90r01r6C         [24] 1554 	mov	dptr,#_u8SetupPacket
      0003FE E0               [24] 1555 	movx	a,@dptr
      0003FF FF               [12] 1556 	mov	r7,a
      000400 53 07 1F         [24] 1557 	anl	ar7,#0x1f
                                   1558 ;	usb.c:574: switch(u8R) {
      000403 BF 00 02         [24] 1559 	cjne	r7,#0x00,00120$
      000406 80 0A            [24] 1560 	sjmp	00101$
      000408                       1561 00120$:
      000408 BF 01 02         [24] 1562 	cjne	r7,#0x01,00121$
      00040B 80 1E            [24] 1563 	sjmp	00102$
      00040D                       1564 00121$:
                                   1565 ;	usb.c:575: case 0x00:
      00040D BF 02 4D         [24] 1566 	cjne	r7,#0x02,00104$
      000410 80 32            [24] 1567 	sjmp	00103$
      000412                       1568 00101$:
                                   1569 ;	usb.c:577: u8TransBuff[0] = 0x00;
      000412 90r00rD6         [24] 1570 	mov	dptr,#_u8TransBuff
      000415 E4               [12] 1571 	clr	a
      000416 F0               [24] 1572 	movx	@dptr,a
                                   1573 ;	usb.c:578: u8TransBuff[1] = 0x00;
      000417 90r00rD7         [24] 1574 	mov	dptr,#(_u8TransBuff + 0x0001)
      00041A F0               [24] 1575 	movx	@dptr,a
                                   1576 ;	usb.c:580: EP0_SendData1(u8TransBuff, 2);
      00041B 75*00 02         [24] 1577 	mov	_EP0_SendData1_PARM_2,#0x02
      00041E 90r00rD6         [24] 1578 	mov	dptr,#_u8TransBuff
      000421 75 F0 00         [24] 1579 	mov	b,#0x00
      000424 12r00r7F         [24] 1580 	lcall	_EP0_SendData1
                                   1581 ;	usb.c:582: u8ControlState = DATA_STATE;
      000427 75*09 01         [24] 1582 	mov	_u8ControlState,#0x01
                                   1583 ;	usb.c:583: break;
                                   1584 ;	usb.c:584: case 0x01:
      00042A 22               [24] 1585 	ret
      00042B                       1586 00102$:
                                   1587 ;	usb.c:586: u8TransBuff[0] = 0x00;
      00042B 90r00rD6         [24] 1588 	mov	dptr,#_u8TransBuff
      00042E E4               [12] 1589 	clr	a
      00042F F0               [24] 1590 	movx	@dptr,a
                                   1591 ;	usb.c:587: u8TransBuff[1] = 0x00;
      000430 90r00rD7         [24] 1592 	mov	dptr,#(_u8TransBuff + 0x0001)
      000433 F0               [24] 1593 	movx	@dptr,a
                                   1594 ;	usb.c:588: EP0_SendData1(u8TransBuff, 2);
      000434 75*00 02         [24] 1595 	mov	_EP0_SendData1_PARM_2,#0x02
      000437 90r00rD6         [24] 1596 	mov	dptr,#_u8TransBuff
      00043A 75 F0 00         [24] 1597 	mov	b,#0x00
      00043D 12r00r7F         [24] 1598 	lcall	_EP0_SendData1
                                   1599 ;	usb.c:589: u8ControlState = DATA_STATE;
      000440 75*09 01         [24] 1600 	mov	_u8ControlState,#0x01
                                   1601 ;	usb.c:590: break;
                                   1602 ;	usb.c:591: case 0x02:
      000443 22               [24] 1603 	ret
      000444                       1604 00103$:
                                   1605 ;	usb.c:595: u8TransBuff[0] = 0x00;	
      000444 90r00rD6         [24] 1606 	mov	dptr,#_u8TransBuff
      000447 E4               [12] 1607 	clr	a
      000448 F0               [24] 1608 	movx	@dptr,a
                                   1609 ;	usb.c:596: u8TransBuff[1] = 0x00;
      000449 90r00rD7         [24] 1610 	mov	dptr,#(_u8TransBuff + 0x0001)
      00044C F0               [24] 1611 	movx	@dptr,a
                                   1612 ;	usb.c:597: EP0_SendData1(u8TransBuff, 2);
      00044D 75*00 02         [24] 1613 	mov	_EP0_SendData1_PARM_2,#0x02
      000450 90r00rD6         [24] 1614 	mov	dptr,#_u8TransBuff
      000453 75 F0 00         [24] 1615 	mov	b,#0x00
      000456 12r00r7F         [24] 1616 	lcall	_EP0_SendData1
                                   1617 ;	usb.c:598: u8ControlState = DATA_STATE;
      000459 75*09 01         [24] 1618 	mov	_u8ControlState,#0x01
                                   1619 ;	usb.c:599: break;
                                   1620 ;	usb.c:600: default:
      00045C 22               [24] 1621 	ret
      00045D                       1622 00104$:
                                   1623 ;	usb.c:603: EP0_RecData0(u8ReceiveBuff, EP0_SZ);
      00045D 75*00 40         [24] 1624 	mov	_EP0_RecData0_PARM_2,#0x40
      000460 90r00r40         [24] 1625 	mov	dptr,#_u8ReceiveBuff
      000463 75 F0 00         [24] 1626 	mov	b,#0x00
      000466 12r00rFE         [24] 1627 	lcall	_EP0_RecData0
                                   1628 ;	usb.c:604: u8ControlState = SETUP_STATE;
      000469 75*09 00         [24] 1629 	mov	_u8ControlState,#0x00
                                   1630 ;	usb.c:608: EP0_Stall();
                                   1631 ;	usb.c:610: }
                                   1632 ;	usb.c:611: }
      00046C 02r01r1E         [24] 1633 	ljmp	_EP0_Stall
                                   1634 ;------------------------------------------------------------
                                   1635 ;Allocation info for local variables in function 'ClearFeature'
                                   1636 ;------------------------------------------------------------
                                   1637 ;u8R                       Allocated to registers r7 
                                   1638 ;------------------------------------------------------------
                                   1639 ;	usb.c:612: static void ClearFeature(void) {
                                   1640 ;	-----------------------------------------
                                   1641 ;	 function ClearFeature
                                   1642 ;	-----------------------------------------
      00046F                       1643 _ClearFeature:
                                   1644 ;	usb.c:620: u8R=u8SetupPacket[0] & 0x1F;
      00046F 90r01r6C         [24] 1645 	mov	dptr,#_u8SetupPacket
      000472 E0               [24] 1646 	movx	a,@dptr
      000473 FF               [12] 1647 	mov	r7,a
      000474 53 07 1F         [24] 1648 	anl	ar7,#0x1f
                                   1649 ;	usb.c:622: switch(u8R) {
      000477 BF 00 02         [24] 1650 	cjne	r7,#0x00,00115$
      00047A 80 05            [24] 1651 	sjmp	00101$
      00047C                       1652 00115$:
                                   1653 ;	usb.c:623: case 0x00:
      00047C BF 02 22         [24] 1654 	cjne	r7,#0x02,00103$
      00047F 80 10            [24] 1655 	sjmp	00102$
      000481                       1656 00101$:
                                   1657 ;	usb.c:625: EP0_SendData1(u8TransBuff, 0);
      000481 75*00 00         [24] 1658 	mov	_EP0_SendData1_PARM_2,#0x00
      000484 90r00rD6         [24] 1659 	mov	dptr,#_u8TransBuff
      000487 75 F0 00         [24] 1660 	mov	b,#0x00
      00048A 12r00r7F         [24] 1661 	lcall	_EP0_SendData1
                                   1662 ;	usb.c:626: u8ControlState = STATUS_STATE;
      00048D 75*09 02         [24] 1663 	mov	_u8ControlState,#0x02
                                   1664 ;	usb.c:634: break;
                                   1665 ;	usb.c:638: case 0x02:
      000490 22               [24] 1666 	ret
      000491                       1667 00102$:
                                   1668 ;	usb.c:644: EP0_SendData1(u8TransBuff, 0);
      000491 75*00 00         [24] 1669 	mov	_EP0_SendData1_PARM_2,#0x00
      000494 90r00rD6         [24] 1670 	mov	dptr,#_u8TransBuff
      000497 75 F0 00         [24] 1671 	mov	b,#0x00
      00049A 12r00r7F         [24] 1672 	lcall	_EP0_SendData1
                                   1673 ;	usb.c:645: u8ControlState = STATUS_STATE;
      00049D 75*09 02         [24] 1674 	mov	_u8ControlState,#0x02
                                   1675 ;	usb.c:646: break;
                                   1676 ;	usb.c:647: default:
      0004A0 22               [24] 1677 	ret
      0004A1                       1678 00103$:
                                   1679 ;	usb.c:654: EP0_RecData0(u8ReceiveBuff, EP0_SZ);
      0004A1 75*00 40         [24] 1680 	mov	_EP0_RecData0_PARM_2,#0x40
      0004A4 90r00r40         [24] 1681 	mov	dptr,#_u8ReceiveBuff
      0004A7 75 F0 00         [24] 1682 	mov	b,#0x00
      0004AA 12r00rFE         [24] 1683 	lcall	_EP0_RecData0
                                   1684 ;	usb.c:658: EP0_Stall();
      0004AD 12r01r1E         [24] 1685 	lcall	_EP0_Stall
                                   1686 ;	usb.c:659: u8ControlState = SETUP_STATE;
      0004B0 75*09 00         [24] 1687 	mov	_u8ControlState,#0x00
                                   1688 ;	usb.c:661: }
                                   1689 ;	usb.c:663: }
      0004B3 22               [24] 1690 	ret
                                   1691 ;------------------------------------------------------------
                                   1692 ;Allocation info for local variables in function 'SetFeature'
                                   1693 ;------------------------------------------------------------
                                   1694 ;u8R                       Allocated to registers r7 
                                   1695 ;------------------------------------------------------------
                                   1696 ;	usb.c:664: static void SetFeature(void) {
                                   1697 ;	-----------------------------------------
                                   1698 ;	 function SetFeature
                                   1699 ;	-----------------------------------------
      0004B4                       1700 _SetFeature:
                                   1701 ;	usb.c:672: u8R=u8Ep0Buff[0] & 0x1F;
      0004B4 90r00r00         [24] 1702 	mov	dptr,#_u8Ep0Buff
      0004B7 E0               [24] 1703 	movx	a,@dptr
      0004B8 FF               [12] 1704 	mov	r7,a
      0004B9 53 07 1F         [24] 1705 	anl	ar7,#0x1f
                                   1706 ;	usb.c:674: switch(u8R) {
      0004BC BF 00 02         [24] 1707 	cjne	r7,#0x00,00115$
      0004BF 80 05            [24] 1708 	sjmp	00101$
      0004C1                       1709 00115$:
                                   1710 ;	usb.c:675: case 0x00:
      0004C1 BF 02 22         [24] 1711 	cjne	r7,#0x02,00103$
      0004C4 80 10            [24] 1712 	sjmp	00102$
      0004C6                       1713 00101$:
                                   1714 ;	usb.c:684: EP0_SendData1(u8TransBuff, 0);
      0004C6 75*00 00         [24] 1715 	mov	_EP0_SendData1_PARM_2,#0x00
      0004C9 90r00rD6         [24] 1716 	mov	dptr,#_u8TransBuff
      0004CC 75 F0 00         [24] 1717 	mov	b,#0x00
      0004CF 12r00r7F         [24] 1718 	lcall	_EP0_SendData1
                                   1719 ;	usb.c:685: u8ControlState = STATUS_STATE;
      0004D2 75*09 02         [24] 1720 	mov	_u8ControlState,#0x02
                                   1721 ;	usb.c:686: break;
                                   1722 ;	usb.c:690: case 0x02:
      0004D5 22               [24] 1723 	ret
      0004D6                       1724 00102$:
                                   1725 ;	usb.c:695: EP0_SendData1(u8TransBuff, 0);
      0004D6 75*00 00         [24] 1726 	mov	_EP0_SendData1_PARM_2,#0x00
      0004D9 90r00rD6         [24] 1727 	mov	dptr,#_u8TransBuff
      0004DC 75 F0 00         [24] 1728 	mov	b,#0x00
      0004DF 12r00r7F         [24] 1729 	lcall	_EP0_SendData1
                                   1730 ;	usb.c:696: u8ControlState = STATUS_STATE;
      0004E2 75*09 02         [24] 1731 	mov	_u8ControlState,#0x02
                                   1732 ;	usb.c:697: break;
                                   1733 ;	usb.c:698: default:
      0004E5 22               [24] 1734 	ret
      0004E6                       1735 00103$:
                                   1736 ;	usb.c:703: EP0_RecData0(u8ReceiveBuff, EP0_SZ);
      0004E6 75*00 40         [24] 1737 	mov	_EP0_RecData0_PARM_2,#0x40
      0004E9 90r00r40         [24] 1738 	mov	dptr,#_u8ReceiveBuff
      0004EC 75 F0 00         [24] 1739 	mov	b,#0x00
      0004EF 12r00rFE         [24] 1740 	lcall	_EP0_RecData0
                                   1741 ;	usb.c:707: EP0_Stall();
      0004F2 12r01r1E         [24] 1742 	lcall	_EP0_Stall
                                   1743 ;	usb.c:708: u8ControlState = SETUP_STATE;
      0004F5 75*09 00         [24] 1744 	mov	_u8ControlState,#0x00
                                   1745 ;	usb.c:710: }
                                   1746 ;	usb.c:711: }
      0004F8 22               [24] 1747 	ret
                                   1748 ;------------------------------------------------------------
                                   1749 ;Allocation info for local variables in function 'SetAddress'
                                   1750 ;------------------------------------------------------------
                                   1751 ;	usb.c:712: static void SetAddress(void) {
                                   1752 ;	-----------------------------------------
                                   1753 ;	 function SetAddress
                                   1754 ;	-----------------------------------------
      0004F9                       1755 _SetAddress:
                                   1756 ;	usb.c:714: u8Addr = u8SetupPacket[2];
      0004F9 90r01r6E         [24] 1757 	mov	dptr,#(_u8SetupPacket + 0x0002)
      0004FC E0               [24] 1758 	movx	a,@dptr
      0004FD F5*06            [12] 1759 	mov	_u8Addr,a
                                   1760 ;	usb.c:716: EP0_SendData1(u8TransBuff, 0);
      0004FF 75*00 00         [24] 1761 	mov	_EP0_SendData1_PARM_2,#0x00
      000502 90r00rD6         [24] 1762 	mov	dptr,#_u8TransBuff
      000505 75 F0 00         [24] 1763 	mov	b,#0x00
      000508 12r00r7F         [24] 1764 	lcall	_EP0_SendData1
                                   1765 ;	usb.c:717: u8ControlState = STATUS_STATE;
      00050B 75*09 02         [24] 1766 	mov	_u8ControlState,#0x02
                                   1767 ;	usb.c:719: }
      00050E 22               [24] 1768 	ret
                                   1769 ;------------------------------------------------------------
                                   1770 ;Allocation info for local variables in function 'GetDescriptor'
                                   1771 ;------------------------------------------------------------
                                   1772 ;i                         Allocated to registers r4 r5 
                                   1773 ;u16Len                    Allocated to registers r7 r6 
                                   1774 ;------------------------------------------------------------
                                   1775 ;	usb.c:720: static void GetDescriptor(void) {
                                   1776 ;	-----------------------------------------
                                   1777 ;	 function GetDescriptor
                                   1778 ;	-----------------------------------------
      00050F                       1779 _GetDescriptor:
                                   1780 ;	usb.c:723: u16Len = u8SetupPacket[7];
      00050F 90r01r73         [24] 1781 	mov	dptr,#(_u8SetupPacket + 0x0007)
      000512 E0               [24] 1782 	movx	a,@dptr
                                   1783 ;	usb.c:724: u16Len <<= 8;
      000513 FE               [12] 1784 	mov	r6,a
      000514 7F 00            [12] 1785 	mov	r7,#0x00
                                   1786 ;	usb.c:725: u16Len += u8SetupPacket[6];	
      000516 90r01r72         [24] 1787 	mov	dptr,#(_u8SetupPacket + 0x0006)
      000519 E0               [24] 1788 	movx	a,@dptr
      00051A 7C 00            [12] 1789 	mov	r4,#0x00
      00051C 2F               [12] 1790 	add	a,r7
      00051D FF               [12] 1791 	mov	r7,a
      00051E EC               [12] 1792 	mov	a,r4
      00051F 3E               [12] 1793 	addc	a,r6
      000520 FE               [12] 1794 	mov	r6,a
                                   1795 ;	usb.c:726: switch(u8SetupPacket[3]) {
      000521 90r01r6F         [24] 1796 	mov	dptr,#(_u8SetupPacket + 0x0003)
      000524 E0               [24] 1797 	movx	a,@dptr
      000525 FD               [12] 1798 	mov	r5,a
      000526 BD 01 02         [24] 1799 	cjne	r5,#0x01,00301$
      000529 80 14            [24] 1800 	sjmp	00101$
      00052B                       1801 00301$:
      00052B BD 02 02         [24] 1802 	cjne	r5,#0x02,00302$
      00052E 80 55            [24] 1803 	sjmp	00105$
      000530                       1804 00302$:
      000530 BD 03 03         [24] 1805 	cjne	r5,#0x03,00303$
      000533 02r05rCB         [24] 1806 	ljmp	00109$
      000536                       1807 00303$:
      000536 BD 22 03         [24] 1808 	cjne	r5,#0x22,00304$
      000539 02r07r15         [24] 1809 	ljmp	00128$
      00053C                       1810 00304$:
      00053C 02r07r62         [24] 1811 	ljmp	00134$
                                   1812 ;	usb.c:727: case 0x01:
      00053F                       1813 00101$:
                                   1814 ;	usb.c:739: if(u16Len >= 0x12) {
      00053F C3               [12] 1815 	clr	c
      000540 EF               [12] 1816 	mov	a,r7
      000541 94 12            [12] 1817 	subb	a,#0x12
      000543 EE               [12] 1818 	mov	a,r6
      000544 94 00            [12] 1819 	subb	a,#0x00
      000546 40 04            [24] 1820 	jc	00165$
                                   1821 ;	usb.c:740: u16Len = 0x12;
      000548 7F 12            [12] 1822 	mov	r7,#0x12
      00054A 7E 00            [12] 1823 	mov	r6,#0x00
                                   1824 ;	usb.c:742: for(i = 0; i < u16Len; ++i) {
      00054C                       1825 00165$:
      00054C 7C 00            [12] 1826 	mov	r4,#0x00
      00054E 7D 00            [12] 1827 	mov	r5,#0x00
      000550                       1828 00137$:
      000550 C3               [12] 1829 	clr	c
      000551 EC               [12] 1830 	mov	a,r4
      000552 9F               [12] 1831 	subb	a,r7
      000553 ED               [12] 1832 	mov	a,r5
      000554 9E               [12] 1833 	subb	a,r6
      000555 50 20            [24] 1834 	jnc	00104$
                                   1835 ;	usb.c:743: u8TransBuff[i] = deviceDescriptor[i];
      000557 EC               [12] 1836 	mov	a,r4
      000558 24rD6            [12] 1837 	add	a,#_u8TransBuff
      00055A FA               [12] 1838 	mov	r2,a
      00055B ED               [12] 1839 	mov	a,r5
      00055C 34s00            [12] 1840 	addc	a,#(_u8TransBuff >> 8)
      00055E FB               [12] 1841 	mov	r3,a
      00055F EC               [12] 1842 	mov	a,r4
      000560 24r00            [12] 1843 	add	a,#_deviceDescriptor
      000562 F5 82            [12] 1844 	mov	dpl,a
      000564 ED               [12] 1845 	mov	a,r5
      000565 34s00            [12] 1846 	addc	a,#(_deviceDescriptor >> 8)
      000567 F5 83            [12] 1847 	mov	dph,a
      000569 E4               [12] 1848 	clr	a
      00056A 93               [24] 1849 	movc	a,@a+dptr
      00056B 8A 82            [24] 1850 	mov	dpl,r2
      00056D 8B 83            [24] 1851 	mov	dph,r3
      00056F F0               [24] 1852 	movx	@dptr,a
                                   1853 ;	usb.c:742: for(i = 0; i < u16Len; ++i) {
      000570 0C               [12] 1854 	inc	r4
      000571 BC 00 DC         [24] 1855 	cjne	r4,#0x00,00137$
      000574 0D               [12] 1856 	inc	r5
      000575 80 D9            [24] 1857 	sjmp	00137$
      000577                       1858 00104$:
                                   1859 ;	usb.c:745: u8ControlState = DATA_STATE;
      000577 75*09 01         [24] 1860 	mov	_u8ControlState,#0x01
                                   1861 ;	usb.c:746: EP0_SendData1(u8TransBuff, (uint8_t)u16Len);
      00057A 8F*00            [24] 1862 	mov	_EP0_SendData1_PARM_2,r7
      00057C 90r00rD6         [24] 1863 	mov	dptr,#_u8TransBuff
      00057F 75 F0 00         [24] 1864 	mov	b,#0x00
                                   1865 ;	usb.c:747: break;
      000582 02r00r7F         [24] 1866 	ljmp	_EP0_SendData1
                                   1867 ;	usb.c:748: case 0x02:
      000585                       1868 00105$:
                                   1869 ;	usb.c:750: if(u16Len >= 34) {
      000585 C3               [12] 1870 	clr	c
      000586 EF               [12] 1871 	mov	a,r7
      000587 94 22            [12] 1872 	subb	a,#0x22
      000589 EE               [12] 1873 	mov	a,r6
      00058A 94 00            [12] 1874 	subb	a,#0x00
      00058C 40 04            [24] 1875 	jc	00168$
                                   1876 ;	usb.c:751: u16Len = 34;
      00058E 7F 22            [12] 1877 	mov	r7,#0x22
      000590 7E 00            [12] 1878 	mov	r6,#0x00
                                   1879 ;	usb.c:753: for(i = 0; i < u16Len; ++i) {
      000592                       1880 00168$:
      000592 7C 00            [12] 1881 	mov	r4,#0x00
      000594 7D 00            [12] 1882 	mov	r5,#0x00
      000596                       1883 00140$:
      000596 C3               [12] 1884 	clr	c
      000597 EC               [12] 1885 	mov	a,r4
      000598 9F               [12] 1886 	subb	a,r7
      000599 ED               [12] 1887 	mov	a,r5
      00059A 9E               [12] 1888 	subb	a,r6
      00059B 50 20            [24] 1889 	jnc	00108$
                                   1890 ;	usb.c:754: u8TransBuff[i]=configDescriptor[i];
      00059D EC               [12] 1891 	mov	a,r4
      00059E 24rD6            [12] 1892 	add	a,#_u8TransBuff
      0005A0 FA               [12] 1893 	mov	r2,a
      0005A1 ED               [12] 1894 	mov	a,r5
      0005A2 34s00            [12] 1895 	addc	a,#(_u8TransBuff >> 8)
      0005A4 FB               [12] 1896 	mov	r3,a
      0005A5 EC               [12] 1897 	mov	a,r4
      0005A6 24r45            [12] 1898 	add	a,#_configDescriptor
      0005A8 F5 82            [12] 1899 	mov	dpl,a
      0005AA ED               [12] 1900 	mov	a,r5
      0005AB 34s00            [12] 1901 	addc	a,#(_configDescriptor >> 8)
      0005AD F5 83            [12] 1902 	mov	dph,a
      0005AF E4               [12] 1903 	clr	a
      0005B0 93               [24] 1904 	movc	a,@a+dptr
      0005B1 8A 82            [24] 1905 	mov	dpl,r2
      0005B3 8B 83            [24] 1906 	mov	dph,r3
      0005B5 F0               [24] 1907 	movx	@dptr,a
                                   1908 ;	usb.c:753: for(i = 0; i < u16Len; ++i) {
      0005B6 0C               [12] 1909 	inc	r4
      0005B7 BC 00 DC         [24] 1910 	cjne	r4,#0x00,00140$
      0005BA 0D               [12] 1911 	inc	r5
      0005BB 80 D9            [24] 1912 	sjmp	00140$
      0005BD                       1913 00108$:
                                   1914 ;	usb.c:757: u8ControlState = DATA_STATE;
      0005BD 75*09 01         [24] 1915 	mov	_u8ControlState,#0x01
                                   1916 ;	usb.c:758: EP0_SendData1(u8TransBuff, (uint8_t)u16Len);
      0005C0 8F*00            [24] 1917 	mov	_EP0_SendData1_PARM_2,r7
      0005C2 90r00rD6         [24] 1918 	mov	dptr,#_u8TransBuff
      0005C5 75 F0 00         [24] 1919 	mov	b,#0x00
                                   1920 ;	usb.c:759: break;
      0005C8 02r00r7F         [24] 1921 	ljmp	_EP0_SendData1
                                   1922 ;	usb.c:760: case 0x03:
      0005CB                       1923 00109$:
                                   1924 ;	usb.c:762: switch(u8SetupPacket[2]) {
      0005CB 90r01r6E         [24] 1925 	mov	dptr,#(_u8SetupPacket + 0x0002)
      0005CE E0               [24] 1926 	movx	a,@dptr
      0005CF FD               [12] 1927 	mov  r5,a
      0005D0 24 FC            [12] 1928 	add	a,#0xff - 0x03
      0005D2 50 03            [24] 1929 	jnc	00311$
      0005D4 02r07r02         [24] 1930 	ljmp	00126$
      0005D7                       1931 00311$:
      0005D7 ED               [12] 1932 	mov	a,r5
      0005D8 2D               [12] 1933 	add	a,r5
      0005D9 2D               [12] 1934 	add	a,r5
      0005DA 90r05rDE         [24] 1935 	mov	dptr,#00312$
      0005DD 73               [24] 1936 	jmp	@a+dptr
      0005DE                       1937 00312$:
      0005DE 02r05rEA         [24] 1938 	ljmp	00110$
      0005E1 02r06r30         [24] 1939 	ljmp	00114$
      0005E4 02r06r76         [24] 1940 	ljmp	00118$
      0005E7 02r06rBC         [24] 1941 	ljmp	00122$
                                   1942 ;	usb.c:763: case 0x00:
      0005EA                       1943 00110$:
                                   1944 ;	usb.c:765: if(u16Len >= 0x04) {
      0005EA C3               [12] 1945 	clr	c
      0005EB EF               [12] 1946 	mov	a,r7
      0005EC 94 04            [12] 1947 	subb	a,#0x04
      0005EE EE               [12] 1948 	mov	a,r6
      0005EF 94 00            [12] 1949 	subb	a,#0x00
      0005F1 40 04            [24] 1950 	jc	00172$
                                   1951 ;	usb.c:766: u16Len = 0x04;
      0005F3 7F 04            [12] 1952 	mov	r7,#0x04
      0005F5 7E 00            [12] 1953 	mov	r6,#0x00
                                   1954 ;	usb.c:768: for(i = 0; i < u16Len; ++i) {
      0005F7                       1955 00172$:
      0005F7 7C 00            [12] 1956 	mov	r4,#0x00
      0005F9 7D 00            [12] 1957 	mov	r5,#0x00
      0005FB                       1958 00143$:
      0005FB C3               [12] 1959 	clr	c
      0005FC EC               [12] 1960 	mov	a,r4
      0005FD 9F               [12] 1961 	subb	a,r7
      0005FE ED               [12] 1962 	mov	a,r5
      0005FF 9E               [12] 1963 	subb	a,r6
      000600 50 20            [24] 1964 	jnc	00113$
                                   1965 ;	usb.c:769: u8TransBuff[i]=stringDescriptor[i];
      000602 EC               [12] 1966 	mov	a,r4
      000603 24rD6            [12] 1967 	add	a,#_u8TransBuff
      000605 FA               [12] 1968 	mov	r2,a
      000606 ED               [12] 1969 	mov	a,r5
      000607 34s00            [12] 1970 	addc	a,#(_u8TransBuff >> 8)
      000609 FB               [12] 1971 	mov	r3,a
      00060A EC               [12] 1972 	mov	a,r4
      00060B 24r67            [12] 1973 	add	a,#_stringDescriptor
      00060D F5 82            [12] 1974 	mov	dpl,a
      00060F ED               [12] 1975 	mov	a,r5
      000610 34s00            [12] 1976 	addc	a,#(_stringDescriptor >> 8)
      000612 F5 83            [12] 1977 	mov	dph,a
      000614 E4               [12] 1978 	clr	a
      000615 93               [24] 1979 	movc	a,@a+dptr
      000616 8A 82            [24] 1980 	mov	dpl,r2
      000618 8B 83            [24] 1981 	mov	dph,r3
      00061A F0               [24] 1982 	movx	@dptr,a
                                   1983 ;	usb.c:768: for(i = 0; i < u16Len; ++i) {
      00061B 0C               [12] 1984 	inc	r4
      00061C BC 00 DC         [24] 1985 	cjne	r4,#0x00,00143$
      00061F 0D               [12] 1986 	inc	r5
      000620 80 D9            [24] 1987 	sjmp	00143$
      000622                       1988 00113$:
                                   1989 ;	usb.c:772: u8ControlState = DATA_STATE;
      000622 75*09 01         [24] 1990 	mov	_u8ControlState,#0x01
                                   1991 ;	usb.c:773: EP0_SendData1(u8TransBuff, (uint8_t)u16Len);
      000625 8F*00            [24] 1992 	mov	_EP0_SendData1_PARM_2,r7
      000627 90r00rD6         [24] 1993 	mov	dptr,#_u8TransBuff
      00062A 75 F0 00         [24] 1994 	mov	b,#0x00
                                   1995 ;	usb.c:774: break;
      00062D 02r00r7F         [24] 1996 	ljmp	_EP0_SendData1
                                   1997 ;	usb.c:775: case 0x01:
      000630                       1998 00114$:
                                   1999 ;	usb.c:777: if(u16Len >= 32) {
      000630 C3               [12] 2000 	clr	c
      000631 EF               [12] 2001 	mov	a,r7
      000632 94 20            [12] 2002 	subb	a,#0x20
      000634 EE               [12] 2003 	mov	a,r6
      000635 94 00            [12] 2004 	subb	a,#0x00
      000637 40 04            [24] 2005 	jc	00175$
                                   2006 ;	usb.c:778: u16Len = 32;
      000639 7F 20            [12] 2007 	mov	r7,#0x20
      00063B 7E 00            [12] 2008 	mov	r6,#0x00
                                   2009 ;	usb.c:780: for(i = 0; i < u16Len; ++i) {
      00063D                       2010 00175$:
      00063D 7C 00            [12] 2011 	mov	r4,#0x00
      00063F 7D 00            [12] 2012 	mov	r5,#0x00
      000641                       2013 00146$:
      000641 C3               [12] 2014 	clr	c
      000642 EC               [12] 2015 	mov	a,r4
      000643 9F               [12] 2016 	subb	a,r7
      000644 ED               [12] 2017 	mov	a,r5
      000645 9E               [12] 2018 	subb	a,r6
      000646 50 20            [24] 2019 	jnc	00117$
                                   2020 ;	usb.c:781: u8TransBuff[i]=manufacturerDescriptor[i];
      000648 EC               [12] 2021 	mov	a,r4
      000649 24rD6            [12] 2022 	add	a,#_u8TransBuff
      00064B FA               [12] 2023 	mov	r2,a
      00064C ED               [12] 2024 	mov	a,r5
      00064D 34s00            [12] 2025 	addc	a,#(_u8TransBuff >> 8)
      00064F FB               [12] 2026 	mov	r3,a
      000650 EC               [12] 2027 	mov	a,r4
      000651 24r6B            [12] 2028 	add	a,#_manufacturerDescriptor
      000653 F5 82            [12] 2029 	mov	dpl,a
      000655 ED               [12] 2030 	mov	a,r5
      000656 34s00            [12] 2031 	addc	a,#(_manufacturerDescriptor >> 8)
      000658 F5 83            [12] 2032 	mov	dph,a
      00065A E4               [12] 2033 	clr	a
      00065B 93               [24] 2034 	movc	a,@a+dptr
      00065C 8A 82            [24] 2035 	mov	dpl,r2
      00065E 8B 83            [24] 2036 	mov	dph,r3
      000660 F0               [24] 2037 	movx	@dptr,a
                                   2038 ;	usb.c:780: for(i = 0; i < u16Len; ++i) {
      000661 0C               [12] 2039 	inc	r4
      000662 BC 00 DC         [24] 2040 	cjne	r4,#0x00,00146$
      000665 0D               [12] 2041 	inc	r5
      000666 80 D9            [24] 2042 	sjmp	00146$
      000668                       2043 00117$:
                                   2044 ;	usb.c:784: u8ControlState = DATA_STATE;
      000668 75*09 01         [24] 2045 	mov	_u8ControlState,#0x01
                                   2046 ;	usb.c:785: EP0_SendData1(u8TransBuff, (uint8_t)u16Len);
      00066B 8F*00            [24] 2047 	mov	_EP0_SendData1_PARM_2,r7
      00066D 90r00rD6         [24] 2048 	mov	dptr,#_u8TransBuff
      000670 75 F0 00         [24] 2049 	mov	b,#0x00
                                   2050 ;	usb.c:786: break;
      000673 02r00r7F         [24] 2051 	ljmp	_EP0_SendData1
                                   2052 ;	usb.c:787: case 0x02:
      000676                       2053 00118$:
                                   2054 ;	usb.c:789: if(u16Len >= 24) {
      000676 C3               [12] 2055 	clr	c
      000677 EF               [12] 2056 	mov	a,r7
      000678 94 18            [12] 2057 	subb	a,#0x18
      00067A EE               [12] 2058 	mov	a,r6
      00067B 94 00            [12] 2059 	subb	a,#0x00
      00067D 40 04            [24] 2060 	jc	00178$
                                   2061 ;	usb.c:790: u16Len = 24;
      00067F 7F 18            [12] 2062 	mov	r7,#0x18
      000681 7E 00            [12] 2063 	mov	r6,#0x00
                                   2064 ;	usb.c:792: for(i = 0; i < u16Len; ++i) {
      000683                       2065 00178$:
      000683 7C 00            [12] 2066 	mov	r4,#0x00
      000685 7D 00            [12] 2067 	mov	r5,#0x00
      000687                       2068 00149$:
      000687 C3               [12] 2069 	clr	c
      000688 EC               [12] 2070 	mov	a,r4
      000689 9F               [12] 2071 	subb	a,r7
      00068A ED               [12] 2072 	mov	a,r5
      00068B 9E               [12] 2073 	subb	a,r6
      00068C 50 20            [24] 2074 	jnc	00121$
                                   2075 ;	usb.c:793: u8TransBuff[i]=productDescriptor[i];
      00068E EC               [12] 2076 	mov	a,r4
      00068F 24rD6            [12] 2077 	add	a,#_u8TransBuff
      000691 FA               [12] 2078 	mov	r2,a
      000692 ED               [12] 2079 	mov	a,r5
      000693 34s00            [12] 2080 	addc	a,#(_u8TransBuff >> 8)
      000695 FB               [12] 2081 	mov	r3,a
      000696 EC               [12] 2082 	mov	a,r4
      000697 24r8B            [12] 2083 	add	a,#_productDescriptor
      000699 F5 82            [12] 2084 	mov	dpl,a
      00069B ED               [12] 2085 	mov	a,r5
      00069C 34s00            [12] 2086 	addc	a,#(_productDescriptor >> 8)
      00069E F5 83            [12] 2087 	mov	dph,a
      0006A0 E4               [12] 2088 	clr	a
      0006A1 93               [24] 2089 	movc	a,@a+dptr
      0006A2 8A 82            [24] 2090 	mov	dpl,r2
      0006A4 8B 83            [24] 2091 	mov	dph,r3
      0006A6 F0               [24] 2092 	movx	@dptr,a
                                   2093 ;	usb.c:792: for(i = 0; i < u16Len; ++i) {
      0006A7 0C               [12] 2094 	inc	r4
      0006A8 BC 00 DC         [24] 2095 	cjne	r4,#0x00,00149$
      0006AB 0D               [12] 2096 	inc	r5
      0006AC 80 D9            [24] 2097 	sjmp	00149$
      0006AE                       2098 00121$:
                                   2099 ;	usb.c:796: u8ControlState = DATA_STATE;
      0006AE 75*09 01         [24] 2100 	mov	_u8ControlState,#0x01
                                   2101 ;	usb.c:797: EP0_SendData1(u8TransBuff, (uint8_t)u16Len);
      0006B1 8F*00            [24] 2102 	mov	_EP0_SendData1_PARM_2,r7
      0006B3 90r00rD6         [24] 2103 	mov	dptr,#_u8TransBuff
      0006B6 75 F0 00         [24] 2104 	mov	b,#0x00
                                   2105 ;	usb.c:798: break;
      0006B9 02r00r7F         [24] 2106 	ljmp	_EP0_SendData1
                                   2107 ;	usb.c:799: case 0x03:
      0006BC                       2108 00122$:
                                   2109 ;	usb.c:801: if(u16Len >= 26) {
      0006BC C3               [12] 2110 	clr	c
      0006BD EF               [12] 2111 	mov	a,r7
      0006BE 94 1A            [12] 2112 	subb	a,#0x1a
      0006C0 EE               [12] 2113 	mov	a,r6
      0006C1 94 00            [12] 2114 	subb	a,#0x00
      0006C3 40 04            [24] 2115 	jc	00181$
                                   2116 ;	usb.c:802: u16Len = 26;
      0006C5 7F 1A            [12] 2117 	mov	r7,#0x1a
      0006C7 7E 00            [12] 2118 	mov	r6,#0x00
                                   2119 ;	usb.c:804: for(i = 0; i < u16Len; ++i) {
      0006C9                       2120 00181$:
      0006C9 7C 00            [12] 2121 	mov	r4,#0x00
      0006CB 7D 00            [12] 2122 	mov	r5,#0x00
      0006CD                       2123 00152$:
      0006CD C3               [12] 2124 	clr	c
      0006CE EC               [12] 2125 	mov	a,r4
      0006CF 9F               [12] 2126 	subb	a,r7
      0006D0 ED               [12] 2127 	mov	a,r5
      0006D1 9E               [12] 2128 	subb	a,r6
      0006D2 50 20            [24] 2129 	jnc	00125$
                                   2130 ;	usb.c:805: u8TransBuff[i]=serialDescriptor[i];
      0006D4 EC               [12] 2131 	mov	a,r4
      0006D5 24rD6            [12] 2132 	add	a,#_u8TransBuff
      0006D7 FA               [12] 2133 	mov	r2,a
      0006D8 ED               [12] 2134 	mov	a,r5
      0006D9 34s00            [12] 2135 	addc	a,#(_u8TransBuff >> 8)
      0006DB FB               [12] 2136 	mov	r3,a
      0006DC EC               [12] 2137 	mov	a,r4
      0006DD 24rA3            [12] 2138 	add	a,#_serialDescriptor
      0006DF F5 82            [12] 2139 	mov	dpl,a
      0006E1 ED               [12] 2140 	mov	a,r5
      0006E2 34s00            [12] 2141 	addc	a,#(_serialDescriptor >> 8)
      0006E4 F5 83            [12] 2142 	mov	dph,a
      0006E6 E4               [12] 2143 	clr	a
      0006E7 93               [24] 2144 	movc	a,@a+dptr
      0006E8 8A 82            [24] 2145 	mov	dpl,r2
      0006EA 8B 83            [24] 2146 	mov	dph,r3
      0006EC F0               [24] 2147 	movx	@dptr,a
                                   2148 ;	usb.c:804: for(i = 0; i < u16Len; ++i) {
      0006ED 0C               [12] 2149 	inc	r4
      0006EE BC 00 DC         [24] 2150 	cjne	r4,#0x00,00152$
      0006F1 0D               [12] 2151 	inc	r5
      0006F2 80 D9            [24] 2152 	sjmp	00152$
      0006F4                       2153 00125$:
                                   2154 ;	usb.c:808: u8ControlState = DATA_STATE;
      0006F4 75*09 01         [24] 2155 	mov	_u8ControlState,#0x01
                                   2156 ;	usb.c:809: EP0_SendData1(u8TransBuff, (uint8_t)u16Len);
      0006F7 8F*00            [24] 2157 	mov	_EP0_SendData1_PARM_2,r7
      0006F9 90r00rD6         [24] 2158 	mov	dptr,#_u8TransBuff
      0006FC 75 F0 00         [24] 2159 	mov	b,#0x00
                                   2160 ;	usb.c:810: break;
      0006FF 02r00r7F         [24] 2161 	ljmp	_EP0_SendData1
                                   2162 ;	usb.c:811: default:
      000702                       2163 00126$:
                                   2164 ;	usb.c:812: EP0_RecData0(u8ReceiveBuff, EP0_SZ);
      000702 75*00 40         [24] 2165 	mov	_EP0_RecData0_PARM_2,#0x40
      000705 90r00r40         [24] 2166 	mov	dptr,#_u8ReceiveBuff
      000708 75 F0 00         [24] 2167 	mov	b,#0x00
      00070B 12r00rFE         [24] 2168 	lcall	_EP0_RecData0
                                   2169 ;	usb.c:814: EP0_Stall();
      00070E 12r01r1E         [24] 2170 	lcall	_EP0_Stall
                                   2171 ;	usb.c:816: u8ControlState = SETUP_STATE;
      000711 75*09 00         [24] 2172 	mov	_u8ControlState,#0x00
                                   2173 ;	usb.c:820: break;
                                   2174 ;	usb.c:821: case 0x22:
      000714 22               [24] 2175 	ret
      000715                       2176 00128$:
                                   2177 ;	usb.c:822: switch (u8SetupPacket[2]) {
      000715 90r01r6E         [24] 2178 	mov	dptr,#(_u8SetupPacket + 0x0002)
      000718 E0               [24] 2179 	movx	a,@dptr
      000719 60 01            [24] 2180 	jz	00326$
      00071B 22               [24] 2181 	ret
      00071C                       2182 00326$:
                                   2183 ;	usb.c:824: if(u16Len >= /*42*/51) {
      00071C C3               [12] 2184 	clr	c
      00071D EF               [12] 2185 	mov	a,r7
      00071E 94 33            [12] 2186 	subb	a,#0x33
      000720 EE               [12] 2187 	mov	a,r6
      000721 94 00            [12] 2188 	subb	a,#0x00
      000723 40 04            [24] 2189 	jc	00185$
                                   2190 ;	usb.c:825: u16Len = /*42*/51;
      000725 7F 33            [12] 2191 	mov	r7,#0x33
      000727 7E 00            [12] 2192 	mov	r6,#0x00
                                   2193 ;	usb.c:828: for(i=0; i<u16Len; ++i) {
      000729                       2194 00185$:
      000729 7C 00            [12] 2195 	mov	r4,#0x00
      00072B 7D 00            [12] 2196 	mov	r5,#0x00
      00072D                       2197 00155$:
      00072D C3               [12] 2198 	clr	c
      00072E EC               [12] 2199 	mov	a,r4
      00072F 9F               [12] 2200 	subb	a,r7
      000730 ED               [12] 2201 	mov	a,r5
      000731 9E               [12] 2202 	subb	a,r6
      000732 50 20            [24] 2203 	jnc	00132$
                                   2204 ;	usb.c:829: u8TransBuff[i]=HID_DeviceReportDescriptor[i];
      000734 EC               [12] 2205 	mov	a,r4
      000735 24rD6            [12] 2206 	add	a,#_u8TransBuff
      000737 FA               [12] 2207 	mov	r2,a
      000738 ED               [12] 2208 	mov	a,r5
      000739 34s00            [12] 2209 	addc	a,#(_u8TransBuff >> 8)
      00073B FB               [12] 2210 	mov	r3,a
      00073C EC               [12] 2211 	mov	a,r4
      00073D 24r12            [12] 2212 	add	a,#_HID_DeviceReportDescriptor
      00073F F5 82            [12] 2213 	mov	dpl,a
      000741 ED               [12] 2214 	mov	a,r5
      000742 34s00            [12] 2215 	addc	a,#(_HID_DeviceReportDescriptor >> 8)
      000744 F5 83            [12] 2216 	mov	dph,a
      000746 E4               [12] 2217 	clr	a
      000747 93               [24] 2218 	movc	a,@a+dptr
      000748 8A 82            [24] 2219 	mov	dpl,r2
      00074A 8B 83            [24] 2220 	mov	dph,r3
      00074C F0               [24] 2221 	movx	@dptr,a
                                   2222 ;	usb.c:828: for(i=0; i<u16Len; ++i) {
      00074D 0C               [12] 2223 	inc	r4
      00074E BC 00 DC         [24] 2224 	cjne	r4,#0x00,00155$
      000751 0D               [12] 2225 	inc	r5
      000752 80 D9            [24] 2226 	sjmp	00155$
      000754                       2227 00132$:
                                   2228 ;	usb.c:832: u8ControlState = DATA_STATE;
      000754 75*09 01         [24] 2229 	mov	_u8ControlState,#0x01
                                   2230 ;	usb.c:833: EP0_SendData1(u8TransBuff, (uint8_t)u16Len);
      000757 8F*00            [24] 2231 	mov	_EP0_SendData1_PARM_2,r7
      000759 90r00rD6         [24] 2232 	mov	dptr,#_u8TransBuff
      00075C 75 F0 00         [24] 2233 	mov	b,#0x00
                                   2234 ;	usb.c:836: break;
                                   2235 ;	usb.c:837: default:
      00075F 02r00r7F         [24] 2236 	ljmp	_EP0_SendData1
      000762                       2237 00134$:
                                   2238 ;	usb.c:838: EP0_RecData0(u8ReceiveBuff, EP0_SZ);
      000762 75*00 40         [24] 2239 	mov	_EP0_RecData0_PARM_2,#0x40
      000765 90r00r40         [24] 2240 	mov	dptr,#_u8ReceiveBuff
      000768 75 F0 00         [24] 2241 	mov	b,#0x00
      00076B 12r00rFE         [24] 2242 	lcall	_EP0_RecData0
                                   2243 ;	usb.c:840: EP0_Stall();
      00076E 12r01r1E         [24] 2244 	lcall	_EP0_Stall
                                   2245 ;	usb.c:842: u8ControlState = SETUP_STATE;
      000771 75*09 00         [24] 2246 	mov	_u8ControlState,#0x00
                                   2247 ;	usb.c:845: }
                                   2248 ;	usb.c:846: }
      000774 22               [24] 2249 	ret
                                   2250 ;------------------------------------------------------------
                                   2251 ;Allocation info for local variables in function 'SetDescriptor'
                                   2252 ;------------------------------------------------------------
                                   2253 ;	usb.c:847: static void SetDescriptor(void) {
                                   2254 ;	-----------------------------------------
                                   2255 ;	 function SetDescriptor
                                   2256 ;	-----------------------------------------
      000775                       2257 _SetDescriptor:
                                   2258 ;	usb.c:848: EP0_RecData0(u8ReceiveBuff, EP0_SZ);
      000775 75*00 40         [24] 2259 	mov	_EP0_RecData0_PARM_2,#0x40
      000778 90r00r40         [24] 2260 	mov	dptr,#_u8ReceiveBuff
      00077B 75 F0 00         [24] 2261 	mov	b,#0x00
      00077E 12r00rFE         [24] 2262 	lcall	_EP0_RecData0
                                   2263 ;	usb.c:855: EP0_Stall();
      000781 12r01r1E         [24] 2264 	lcall	_EP0_Stall
                                   2265 ;	usb.c:856: u8ControlState = SETUP_STATE;
      000784 75*09 00         [24] 2266 	mov	_u8ControlState,#0x00
                                   2267 ;	usb.c:857: }
      000787 22               [24] 2268 	ret
                                   2269 ;------------------------------------------------------------
                                   2270 ;Allocation info for local variables in function 'GetConfiguration'
                                   2271 ;------------------------------------------------------------
                                   2272 ;	usb.c:858: static void GetConfiguration(void) {
                                   2273 ;	-----------------------------------------
                                   2274 ;	 function GetConfiguration
                                   2275 ;	-----------------------------------------
      000788                       2276 _GetConfiguration:
                                   2277 ;	usb.c:859: u8TransBuff[0] = u8Config;
      000788 90r00rD6         [24] 2278 	mov	dptr,#_u8TransBuff
      00078B E5*07            [12] 2279 	mov	a,_u8Config
      00078D F0               [24] 2280 	movx	@dptr,a
                                   2281 ;	usb.c:863: EP0_SendData1(u8TransBuff, 0x01);
      00078E 75*00 01         [24] 2282 	mov	_EP0_SendData1_PARM_2,#0x01
      000791 90r00rD6         [24] 2283 	mov	dptr,#_u8TransBuff
      000794 75 F0 00         [24] 2284 	mov	b,#0x00
      000797 12r00r7F         [24] 2285 	lcall	_EP0_SendData1
                                   2286 ;	usb.c:866: u8ControlState = DATA_STATE;
      00079A 75*09 01         [24] 2287 	mov	_u8ControlState,#0x01
                                   2288 ;	usb.c:867: }
      00079D 22               [24] 2289 	ret
                                   2290 ;------------------------------------------------------------
                                   2291 ;Allocation info for local variables in function 'SetConfiguration'
                                   2292 ;------------------------------------------------------------
                                   2293 ;	usb.c:868: static void SetConfiguration(void) {
                                   2294 ;	-----------------------------------------
                                   2295 ;	 function SetConfiguration
                                   2296 ;	-----------------------------------------
      00079E                       2297 _SetConfiguration:
                                   2298 ;	usb.c:869: u8Config=u8SetupPacket[2];
      00079E 90r01r6E         [24] 2299 	mov	dptr,#(_u8SetupPacket + 0x0002)
      0007A1 E0               [24] 2300 	movx	a,@dptr
      0007A2 F5*07            [12] 2301 	mov	_u8Config,a
                                   2302 ;	usb.c:888: EP0_SendData1(u8TransBuff, 0);
      0007A4 75*00 00         [24] 2303 	mov	_EP0_SendData1_PARM_2,#0x00
      0007A7 90r00rD6         [24] 2304 	mov	dptr,#_u8TransBuff
      0007AA 75 F0 00         [24] 2305 	mov	b,#0x00
      0007AD 12r00r7F         [24] 2306 	lcall	_EP0_SendData1
                                   2307 ;	usb.c:890: u8ControlState = STATUS_STATE;
      0007B0 75*09 02         [24] 2308 	mov	_u8ControlState,#0x02
                                   2309 ;	usb.c:891: }
      0007B3 22               [24] 2310 	ret
                                   2311 ;------------------------------------------------------------
                                   2312 ;Allocation info for local variables in function 'GetInterface'
                                   2313 ;------------------------------------------------------------
                                   2314 ;	usb.c:892: static void GetInterface(void) {
                                   2315 ;	-----------------------------------------
                                   2316 ;	 function GetInterface
                                   2317 ;	-----------------------------------------
      0007B4                       2318 _GetInterface:
                                   2319 ;	usb.c:893: u8TransBuff[0] = 0x00;
      0007B4 90r00rD6         [24] 2320 	mov	dptr,#_u8TransBuff
      0007B7 E4               [12] 2321 	clr	a
      0007B8 F0               [24] 2322 	movx	@dptr,a
                                   2323 ;	usb.c:900: EP0_SendData1(u8TransBuff, 0x01);
      0007B9 75*00 01         [24] 2324 	mov	_EP0_SendData1_PARM_2,#0x01
      0007BC 90r00rD6         [24] 2325 	mov	dptr,#_u8TransBuff
      0007BF 75 F0 00         [24] 2326 	mov	b,#0x00
      0007C2 12r00r7F         [24] 2327 	lcall	_EP0_SendData1
                                   2328 ;	usb.c:901: u8ControlState = DATA_STATE;
      0007C5 75*09 01         [24] 2329 	mov	_u8ControlState,#0x01
                                   2330 ;	usb.c:902: }
      0007C8 22               [24] 2331 	ret
                                   2332 ;------------------------------------------------------------
                                   2333 ;Allocation info for local variables in function 'SetInterface'
                                   2334 ;------------------------------------------------------------
                                   2335 ;	usb.c:903: static void SetInterface(void) {
                                   2336 ;	-----------------------------------------
                                   2337 ;	 function SetInterface
                                   2338 ;	-----------------------------------------
      0007C9                       2339 _SetInterface:
                                   2340 ;	usb.c:911: EP0_SendData1(u8TransBuff, 0);
      0007C9 75*00 00         [24] 2341 	mov	_EP0_SendData1_PARM_2,#0x00
      0007CC 90r00rD6         [24] 2342 	mov	dptr,#_u8TransBuff
      0007CF 75 F0 00         [24] 2343 	mov	b,#0x00
      0007D2 12r00r7F         [24] 2344 	lcall	_EP0_SendData1
                                   2345 ;	usb.c:912: u8ControlState = STATUS_STATE;
      0007D5 75*09 02         [24] 2346 	mov	_u8ControlState,#0x02
                                   2347 ;	usb.c:913: }
      0007D8 22               [24] 2348 	ret
                                   2349 ;------------------------------------------------------------
                                   2350 ;Allocation info for local variables in function 'SynchFrame'
                                   2351 ;------------------------------------------------------------
                                   2352 ;	usb.c:914: static void SynchFrame(void) {
                                   2353 ;	-----------------------------------------
                                   2354 ;	 function SynchFrame
                                   2355 ;	-----------------------------------------
      0007D9                       2356 _SynchFrame:
                                   2357 ;	usb.c:916: }
      0007D9 22               [24] 2358 	ret
                                   2359 ;------------------------------------------------------------
                                   2360 ;Allocation info for local variables in function 'EP1_Out'
                                   2361 ;------------------------------------------------------------
                                   2362 ;	usb.c:918: void EP1_Out(void) {
                                   2363 ;	-----------------------------------------
                                   2364 ;	 function EP1_Out
                                   2365 ;	-----------------------------------------
      0007DA                       2366 _EP1_Out:
                                   2367 ;	usb.c:920: }
      0007DA 22               [24] 2368 	ret
                                   2369 ;------------------------------------------------------------
                                   2370 ;Allocation info for local variables in function 'EP1_In'
                                   2371 ;------------------------------------------------------------
                                   2372 ;	usb.c:922: void EP1_In(void) {
                                   2373 ;	-----------------------------------------
                                   2374 ;	 function EP1_In
                                   2375 ;	-----------------------------------------
      0007DB                       2376 _EP1_In:
                                   2377 ;	usb.c:924: }
      0007DB 22               [24] 2378 	ret
                                   2379 ;------------------------------------------------------------
                                   2380 ;Allocation info for local variables in function 'HID_SetIdle'
                                   2381 ;------------------------------------------------------------
                                   2382 ;	usb.c:926: static void HID_SetIdle(void) {
                                   2383 ;	-----------------------------------------
                                   2384 ;	 function HID_SetIdle
                                   2385 ;	-----------------------------------------
      0007DC                       2386 _HID_SetIdle:
                                   2387 ;	usb.c:928: u8ControlState = SETUP_STATE;
      0007DC 75*09 00         [24] 2388 	mov	_u8ControlState,#0x00
                                   2389 ;	usb.c:929: EP0_Stall();
                                   2390 ;	usb.c:930: }
      0007DF 02r01r1E         [24] 2391 	ljmp	_EP0_Stall
                                   2392 ;------------------------------------------------------------
                                   2393 ;Allocation info for local variables in function 'HID_SetReport'
                                   2394 ;------------------------------------------------------------
                                   2395 ;	usb.c:932: static void HID_SetReport(void) {
                                   2396 ;	-----------------------------------------
                                   2397 ;	 function HID_SetReport
                                   2398 ;	-----------------------------------------
      0007E2                       2399 _HID_SetReport:
                                   2400 ;	usb.c:933: switch (u8SetupPacket[2]) {
      0007E2 90r01r6E         [24] 2401 	mov	dptr,#(_u8SetupPacket + 0x0002)
      0007E5 E0               [24] 2402 	movx	a,@dptr
      0007E6 FF               [12] 2403 	mov	r7,a
      0007E7 BF 01 02         [24] 2404 	cjne	r7,#0x01,00119$
      0007EA 80 0A            [24] 2405 	sjmp	00102$
      0007EC                       2406 00119$:
      0007EC BF 02 02         [24] 2407 	cjne	r7,#0x02,00120$
      0007EF 80 05            [24] 2408 	sjmp	00102$
      0007F1                       2409 00120$:
                                   2410 ;	usb.c:935: case 0x02:
      0007F1 BF 04 2C         [24] 2411 	cjne	r7,#0x04,00105$
      0007F4 80 15            [24] 2412 	sjmp	00103$
      0007F6                       2413 00102$:
                                   2414 ;	usb.c:936: u8HidReq = 1;
      0007F6 75*04 01         [24] 2415 	mov	_u8HidReq,#0x01
                                   2416 ;	usb.c:937: u8ControlState = DATA_STATE;
      0007F9 75*09 01         [24] 2417 	mov	_u8ControlState,#0x01
                                   2418 ;	usb.c:938: EP0_RecData1(u8ReceiveBuff, u8SetupPacket[6]);
      0007FC 90r01r72         [24] 2419 	mov	dptr,#(_u8SetupPacket + 0x0006)
      0007FF E0               [24] 2420 	movx	a,@dptr
      000800 F5*00            [12] 2421 	mov	_EP0_RecData1_PARM_2,a
      000802 90r00r40         [24] 2422 	mov	dptr,#_u8ReceiveBuff
      000805 75 F0 00         [24] 2423 	mov	b,#0x00
                                   2424 ;	usb.c:939: break;
                                   2425 ;	usb.c:940: case 0x04:
      000808 02r01r0E         [24] 2426 	ljmp	_EP0_RecData1
      00080B                       2427 00103$:
                                   2428 ;	usb.c:941: u8HidReq = 1;
      00080B 75*04 01         [24] 2429 	mov	_u8HidReq,#0x01
                                   2430 ;	usb.c:942: u8ControlState = DATA_STATE;
      00080E 75*09 01         [24] 2431 	mov	_u8ControlState,#0x01
                                   2432 ;	usb.c:943: EP0_RecData1(u8ReceiveBuff, u8SetupPacket[6]);
      000811 90r01r72         [24] 2433 	mov	dptr,#(_u8SetupPacket + 0x0006)
      000814 E0               [24] 2434 	movx	a,@dptr
      000815 F5*00            [12] 2435 	mov	_EP0_RecData1_PARM_2,a
      000817 90r00r40         [24] 2436 	mov	dptr,#_u8ReceiveBuff
      00081A 75 F0 00         [24] 2437 	mov	b,#0x00
                                   2438 ;	usb.c:945: }
                                   2439 ;	usb.c:946: }
      00081D 02r01r0E         [24] 2440 	ljmp	_EP0_RecData1
      000820                       2441 00105$:
      000820 22               [24] 2442 	ret
                                   2443 ;------------------------------------------------------------
                                   2444 ;Allocation info for local variables in function 'HID_GetReport'
                                   2445 ;------------------------------------------------------------
                                   2446 ;	usb.c:948: static void HID_GetReport(void) {
                                   2447 ;	-----------------------------------------
                                   2448 ;	 function HID_GetReport
                                   2449 ;	-----------------------------------------
      000821                       2450 _HID_GetReport:
                                   2451 ;	usb.c:951: u8ControlState = DATA_STATE;
      000821 75*09 01         [24] 2452 	mov	_u8ControlState,#0x01
                                   2453 ;	usb.c:952: EP0_SendData1(u8TransBuff, u8HidNum);
      000824 85*05*00         [24] 2454 	mov	_EP0_SendData1_PARM_2,_u8HidNum
      000827 90r00rD6         [24] 2455 	mov	dptr,#_u8TransBuff
      00082A 75 F0 00         [24] 2456 	mov	b,#0x00
                                   2457 ;	usb.c:953: }
      00082D 02r00r7F         [24] 2458 	ljmp	_EP0_SendData1
                                   2459 	.area CSEG    (CODE)
                                   2460 	.area CONST   (CODE)
      000000                       2461 _deviceDescriptor:
      000000 12                    2462 	.db #0x12	; 18
      000001 01                    2463 	.db #0x01	; 1
      000002 00                    2464 	.db #0x00	; 0
      000003 02                    2465 	.db #0x02	; 2
      000004 00                    2466 	.db #0x00	; 0
      000005 00                    2467 	.db #0x00	; 0
      000006 00                    2468 	.db #0x00	; 0
      000007 40                    2469 	.db #0x40	; 64
      000008 48                    2470 	.db #0x48	; 72	'H'
      000009 43                    2471 	.db #0x43	; 67	'C'
      00000A 02                    2472 	.db #0x02	; 2
      00000B 00                    2473 	.db #0x00	; 0
      00000C 01                    2474 	.db #0x01	; 1
      00000D 00                    2475 	.db #0x00	; 0
      00000E 01                    2476 	.db #0x01	; 1
      00000F 02                    2477 	.db #0x02	; 2
      000010 03                    2478 	.db #0x03	; 3
      000011 01                    2479 	.db #0x01	; 1
      000012                       2480 _HID_DeviceReportDescriptor:
      000012 06                    2481 	.db #0x06	; 6
      000013 00                    2482 	.db #0x00	; 0
      000014 FF                    2483 	.db #0xff	; 255
      000015 09                    2484 	.db #0x09	; 9
      000016 01                    2485 	.db #0x01	; 1
      000017 A1                    2486 	.db #0xa1	; 161
      000018 01                    2487 	.db #0x01	; 1
      000019 15                    2488 	.db #0x15	; 21
      00001A 00                    2489 	.db #0x00	; 0
      00001B 26                    2490 	.db #0x26	; 38
      00001C FF                    2491 	.db #0xff	; 255
      00001D 00                    2492 	.db #0x00	; 0
      00001E 75                    2493 	.db #0x75	; 117	'u'
      00001F 08                    2494 	.db #0x08	; 8
      000020 85                    2495 	.db #0x85	; 133
      000021 01                    2496 	.db #0x01	; 1
      000022 95                    2497 	.db #0x95	; 149
      000023 07                    2498 	.db #0x07	; 7
      000024 09                    2499 	.db #0x09	; 9
      000025 00                    2500 	.db #0x00	; 0
      000026 B2                    2501 	.db #0xb2	; 178
      000027 02                    2502 	.db #0x02	; 2
      000028 01                    2503 	.db #0x01	; 1
      000029 85                    2504 	.db #0x85	; 133
      00002A 02                    2505 	.db #0x02	; 2
      00002B 95                    2506 	.db #0x95	; 149
      00002C 87                    2507 	.db #0x87	; 135
      00002D 09                    2508 	.db #0x09	; 9
      00002E 00                    2509 	.db #0x00	; 0
      00002F B2                    2510 	.db #0xb2	; 178
      000030 02                    2511 	.db #0x02	; 2
      000031 01                    2512 	.db #0x01	; 1
      000032 85                    2513 	.db #0x85	; 133
      000033 03                    2514 	.db #0x03	; 3
      000034 95                    2515 	.db #0x95	; 149
      000035 7F                    2516 	.db #0x7f	; 127
      000036 09                    2517 	.db #0x09	; 9
      000037 00                    2518 	.db #0x00	; 0
      000038 B2                    2519 	.db #0xb2	; 178
      000039 02                    2520 	.db #0x02	; 2
      00003A 01                    2521 	.db #0x01	; 1
      00003B 85                    2522 	.db #0x85	; 133
      00003C 04                    2523 	.db #0x04	; 4
      00003D 95                    2524 	.db #0x95	; 149
      00003E 3F                    2525 	.db #0x3f	; 63
      00003F 09                    2526 	.db #0x09	; 9
      000040 00                    2527 	.db #0x00	; 0
      000041 B2                    2528 	.db #0xb2	; 178
      000042 02                    2529 	.db #0x02	; 2
      000043 01                    2530 	.db #0x01	; 1
      000044 C0                    2531 	.db #0xc0	; 192
      000045                       2532 _configDescriptor:
      000045 09                    2533 	.db #0x09	; 9
      000046 02                    2534 	.db #0x02	; 2
      000047 22                    2535 	.db #0x22	; 34
      000048 00                    2536 	.db #0x00	; 0
      000049 01                    2537 	.db #0x01	; 1
      00004A 01                    2538 	.db #0x01	; 1
      00004B 00                    2539 	.db #0x00	; 0
      00004C C0                    2540 	.db #0xc0	; 192
      00004D 32                    2541 	.db #0x32	; 50	'2'
      00004E 09                    2542 	.db #0x09	; 9
      00004F 04                    2543 	.db #0x04	; 4
      000050 00                    2544 	.db #0x00	; 0
      000051 00                    2545 	.db #0x00	; 0
      000052 01                    2546 	.db #0x01	; 1
      000053 03                    2547 	.db #0x03	; 3
      000054 00                    2548 	.db #0x00	; 0
      000055 00                    2549 	.db #0x00	; 0
      000056 00                    2550 	.db #0x00	; 0
      000057 09                    2551 	.db #0x09	; 9
      000058 21                    2552 	.db #0x21	; 33
      000059 01                    2553 	.db #0x01	; 1
      00005A 01                    2554 	.db #0x01	; 1
      00005B 00                    2555 	.db #0x00	; 0
      00005C 01                    2556 	.db #0x01	; 1
      00005D 22                    2557 	.db #0x22	; 34
      00005E 33                    2558 	.db #0x33	; 51	'3'
      00005F 00                    2559 	.db #0x00	; 0
      000060 07                    2560 	.db #0x07	; 7
      000061 05                    2561 	.db #0x05	; 5
      000062 81                    2562 	.db #0x81	; 129
      000063 03                    2563 	.db #0x03	; 3
      000064 08                    2564 	.db #0x08	; 8
      000065 00                    2565 	.db #0x00	; 0
      000066 01                    2566 	.db #0x01	; 1
      000067                       2567 _stringDescriptor:
      000067 04                    2568 	.db #0x04	; 4
      000068 03                    2569 	.db #0x03	; 3
      000069 09                    2570 	.db #0x09	; 9
      00006A 04                    2571 	.db #0x04	; 4
      00006B                       2572 _manufacturerDescriptor:
      00006B 20                    2573 	.db #0x20	; 32
      00006C 03                    2574 	.db #0x03	; 3
      00006D 56                    2575 	.db #0x56	; 86	'V'
      00006E 00                    2576 	.db #0x00	; 0
      00006F 69                    2577 	.db #0x69	; 105	'i'
      000070 00                    2578 	.db #0x00	; 0
      000071 64                    2579 	.db #0x64	; 100	'd'
      000072 00                    2580 	.db #0x00	; 0
      000073 69                    2581 	.db #0x69	; 105	'i'
      000074 00                    2582 	.db #0x00	; 0
      000075 65                    2583 	.db #0x65	; 101	'e'
      000076 00                    2584 	.db #0x00	; 0
      000077 75                    2585 	.db #0x75	; 117	'u'
      000078 00                    2586 	.db #0x00	; 0
      000079 6B                    2587 	.db #0x6b	; 107	'k'
      00007A 00                    2588 	.db #0x00	; 0
      00007B 68                    2589 	.db #0x68	; 104	'h'
      00007C 00                    2590 	.db #0x00	; 0
      00007D 69                    2591 	.db #0x69	; 105	'i'
      00007E 00                    2592 	.db #0x00	; 0
      00007F 65                    2593 	.db #0x65	; 101	'e'
      000080 00                    2594 	.db #0x00	; 0
      000081 6E                    2595 	.db #0x6e	; 110	'n'
      000082 00                    2596 	.db #0x00	; 0
      000083 2E                    2597 	.db #0x2e	; 46
      000084 00                    2598 	.db #0x00	; 0
      000085 6F                    2599 	.db #0x6f	; 111	'o'
      000086 00                    2600 	.db #0x00	; 0
      000087 72                    2601 	.db #0x72	; 114	'r'
      000088 00                    2602 	.db #0x00	; 0
      000089 67                    2603 	.db #0x67	; 103	'g'
      00008A 00                    2604 	.db #0x00	; 0
      00008B                       2605 _productDescriptor:
      00008B 18                    2606 	.db #0x18	; 24
      00008C 03                    2607 	.db #0x03	; 3
      00008D 56                    2608 	.db #0x56	; 86	'V'
      00008E 00                    2609 	.db #0x00	; 0
      00008F 44                    2610 	.db #0x44	; 68	'D'
      000090 00                    2611 	.db #0x00	; 0
      000091 4B                    2612 	.db #0x4b	; 75	'K'
      000092 00                    2613 	.db #0x00	; 0
      000093 20                    2614 	.db #0x20	; 32
      000094 00                    2615 	.db #0x00	; 0
      000095 4B                    2616 	.db #0x4b	; 75	'K'
      000096 00                    2617 	.db #0x00	; 0
      000097 49                    2618 	.db #0x49	; 73	'I'
      000098 00                    2619 	.db #0x00	; 0
      000099 54                    2620 	.db #0x54	; 84	'T'
      00009A 00                    2621 	.db #0x00	; 0
      00009B 20                    2622 	.db #0x20	; 32
      00009C 00                    2623 	.db #0x00	; 0
      00009D 31                    2624 	.db #0x31	; 49	'1'
      00009E 00                    2625 	.db #0x00	; 0
      00009F 2E                    2626 	.db #0x2e	; 46
      0000A0 00                    2627 	.db #0x00	; 0
      0000A1 30                    2628 	.db #0x30	; 48	'0'
      0000A2 00                    2629 	.db #0x00	; 0
      0000A3                       2630 _serialDescriptor:
      0000A3 1A                    2631 	.db #0x1a	; 26
      0000A4 03                    2632 	.db #0x03	; 3
      0000A5 43                    2633 	.db #0x43	; 67	'C'
      0000A6 00                    2634 	.db #0x00	; 0
      0000A7 48                    2635 	.db #0x48	; 72	'H'
      0000A8 00                    2636 	.db #0x00	; 0
      0000A9 35                    2637 	.db #0x35	; 53	'5'
      0000AA 00                    2638 	.db #0x00	; 0
      0000AB 35                    2639 	.db #0x35	; 53	'5'
      0000AC 00                    2640 	.db #0x00	; 0
      0000AD 78                    2641 	.db #0x78	; 120	'x'
      0000AE 00                    2642 	.db #0x00	; 0
      0000AF 2D                    2643 	.db #0x2d	; 45
      0000B0 00                    2644 	.db #0x00	; 0
      0000B1 31                    2645 	.db #0x31	; 49	'1'
      0000B2 00                    2646 	.db #0x00	; 0
      0000B3 39                    2647 	.db #0x39	; 57	'9'
      0000B4 00                    2648 	.db #0x00	; 0
      0000B5 31                    2649 	.db #0x31	; 49	'1'
      0000B6 00                    2650 	.db #0x00	; 0
      0000B7 30                    2651 	.db #0x30	; 48	'0'
      0000B8 00                    2652 	.db #0x00	; 0
      0000B9 32                    2653 	.db #0x32	; 50	'2'
      0000BA 00                    2654 	.db #0x00	; 0
      0000BB 33                    2655 	.db #0x33	; 51	'3'
      0000BC 00                    2656 	.db #0x00	; 0
      0000BD                       2657 _u8Ver:
      0000BD 6D 63 75 50 72 6F 67  2658 	.ascii "mcuProg v1.0 b181231"
             20 76 31 2E 30 20 62
             31 38 31 32 33 31
      0000D1 00                    2659 	.db 0x00
                                   2660 	.area XINIT   (CODE)
                                   2661 	.area CABS    (ABS,CODE)
