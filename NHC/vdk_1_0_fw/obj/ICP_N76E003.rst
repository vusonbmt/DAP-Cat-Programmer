                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.0 #11195 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module ICP_N76E003
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl ___delay_us
                                     12 	.globl ___delay_ms
                                     13 	.globl _UIF_BUS_RST
                                     14 	.globl _UIF_DETECT
                                     15 	.globl _UIF_TRANSFER
                                     16 	.globl _UIF_SUSPEND
                                     17 	.globl _UIF_HST_SOF
                                     18 	.globl _UIF_FIFO_OV
                                     19 	.globl _U_SIE_FREE
                                     20 	.globl _U_TOG_OK
                                     21 	.globl _U_IS_NAK
                                     22 	.globl _ADC_CHAN0
                                     23 	.globl _ADC_CHAN1
                                     24 	.globl _CMP_CHAN
                                     25 	.globl _ADC_START
                                     26 	.globl _ADC_IF
                                     27 	.globl _CMP_IF
                                     28 	.globl _CMPO
                                     29 	.globl _U1RI
                                     30 	.globl _U1TI
                                     31 	.globl _U1RB8
                                     32 	.globl _U1TB8
                                     33 	.globl _U1REN
                                     34 	.globl _U1SMOD
                                     35 	.globl _U1SM0
                                     36 	.globl _S0_R_FIFO
                                     37 	.globl _S0_T_FIFO
                                     38 	.globl _S0_FREE
                                     39 	.globl _S0_IF_BYTE
                                     40 	.globl _S0_IF_FIRST
                                     41 	.globl _S0_IF_OV
                                     42 	.globl _S0_FST_ACT
                                     43 	.globl _CP_RL2
                                     44 	.globl _C_T2
                                     45 	.globl _TR2
                                     46 	.globl _EXEN2
                                     47 	.globl _TCLK
                                     48 	.globl _RCLK
                                     49 	.globl _EXF2
                                     50 	.globl _CAP1F
                                     51 	.globl _TF2
                                     52 	.globl _RI
                                     53 	.globl _TI
                                     54 	.globl _RB8
                                     55 	.globl _TB8
                                     56 	.globl _REN
                                     57 	.globl _SM2
                                     58 	.globl _SM1
                                     59 	.globl _SM0
                                     60 	.globl _IT0
                                     61 	.globl _IE0
                                     62 	.globl _IT1
                                     63 	.globl _IE1
                                     64 	.globl _TR0
                                     65 	.globl _TF0
                                     66 	.globl _TR1
                                     67 	.globl _TF1
                                     68 	.globl _RXD
                                     69 	.globl _PWM1_
                                     70 	.globl _TXD
                                     71 	.globl _PWM2_
                                     72 	.globl _AIN3
                                     73 	.globl _VBUS1
                                     74 	.globl _INT0
                                     75 	.globl _TXD1_
                                     76 	.globl _INT1
                                     77 	.globl _T0
                                     78 	.globl _RXD1_
                                     79 	.globl _PWM2
                                     80 	.globl _T1
                                     81 	.globl _UDP
                                     82 	.globl _UDM
                                     83 	.globl _TIN0
                                     84 	.globl _CAP1
                                     85 	.globl _T2
                                     86 	.globl _AIN0
                                     87 	.globl _VBUS2
                                     88 	.globl _TIN1
                                     89 	.globl _CAP2
                                     90 	.globl _T2EX
                                     91 	.globl _RXD_
                                     92 	.globl _TXD_
                                     93 	.globl _AIN1
                                     94 	.globl _UCC1
                                     95 	.globl _TIN2
                                     96 	.globl _SCS
                                     97 	.globl _CAP1_
                                     98 	.globl _T2_
                                     99 	.globl _AIN2
                                    100 	.globl _UCC2
                                    101 	.globl _TIN3
                                    102 	.globl _PWM1
                                    103 	.globl _MOSI
                                    104 	.globl _TIN4
                                    105 	.globl _RXD1
                                    106 	.globl _MISO
                                    107 	.globl _TIN5
                                    108 	.globl _TXD1
                                    109 	.globl _SCK
                                    110 	.globl _IE_SPI0
                                    111 	.globl _IE_TKEY
                                    112 	.globl _IE_USB
                                    113 	.globl _IE_ADC
                                    114 	.globl _IE_UART1
                                    115 	.globl _IE_PWMX
                                    116 	.globl _IE_GPIO
                                    117 	.globl _IE_WDOG
                                    118 	.globl _PX0
                                    119 	.globl _PT0
                                    120 	.globl _PX1
                                    121 	.globl _PT1
                                    122 	.globl _PS
                                    123 	.globl _PT2
                                    124 	.globl _PL_FLAG
                                    125 	.globl _PH_FLAG
                                    126 	.globl _EX0
                                    127 	.globl _ET0
                                    128 	.globl _EX1
                                    129 	.globl _ET1
                                    130 	.globl _ES
                                    131 	.globl _ET2
                                    132 	.globl _E_DIS
                                    133 	.globl _EA
                                    134 	.globl _P
                                    135 	.globl _F1
                                    136 	.globl _OV
                                    137 	.globl _RS0
                                    138 	.globl _RS1
                                    139 	.globl _F0
                                    140 	.globl _AC
                                    141 	.globl _CY
                                    142 	.globl _UEP1_DMA_H
                                    143 	.globl _UEP1_DMA_L
                                    144 	.globl _UEP1_DMA
                                    145 	.globl _UEP0_DMA_H
                                    146 	.globl _UEP0_DMA_L
                                    147 	.globl _UEP0_DMA
                                    148 	.globl _UEP2_3_MOD
                                    149 	.globl _UEP4_1_MOD
                                    150 	.globl _UEP3_DMA_H
                                    151 	.globl _UEP3_DMA_L
                                    152 	.globl _UEP3_DMA
                                    153 	.globl _UEP2_DMA_H
                                    154 	.globl _UEP2_DMA_L
                                    155 	.globl _UEP2_DMA
                                    156 	.globl _USB_DEV_AD
                                    157 	.globl _USB_CTRL
                                    158 	.globl _USB_INT_EN
                                    159 	.globl _UEP4_T_LEN
                                    160 	.globl _UEP4_CTRL
                                    161 	.globl _UEP0_T_LEN
                                    162 	.globl _UEP0_CTRL
                                    163 	.globl _USB_RX_LEN
                                    164 	.globl _USB_MIS_ST
                                    165 	.globl _USB_INT_ST
                                    166 	.globl _USB_INT_FG
                                    167 	.globl _UEP3_T_LEN
                                    168 	.globl _UEP3_CTRL
                                    169 	.globl _UEP2_T_LEN
                                    170 	.globl _UEP2_CTRL
                                    171 	.globl _UEP1_T_LEN
                                    172 	.globl _UEP1_CTRL
                                    173 	.globl _UDEV_CTRL
                                    174 	.globl _USB_C_CTRL
                                    175 	.globl _TKEY_DATH
                                    176 	.globl _TKEY_DATL
                                    177 	.globl _TKEY_DAT
                                    178 	.globl _TKEY_CTRL
                                    179 	.globl _ADC_DATA
                                    180 	.globl _ADC_CFG
                                    181 	.globl _ADC_CTRL
                                    182 	.globl _SBAUD1
                                    183 	.globl _SBUF1
                                    184 	.globl _SCON1
                                    185 	.globl _SPI0_SETUP
                                    186 	.globl _SPI0_CK_SE
                                    187 	.globl _SPI0_CTRL
                                    188 	.globl _SPI0_DATA
                                    189 	.globl _SPI0_STAT
                                    190 	.globl _PWM_CK_SE
                                    191 	.globl _PWM_CTRL
                                    192 	.globl _PWM_DATA1
                                    193 	.globl _PWM_DATA2
                                    194 	.globl _T2CAP1H
                                    195 	.globl _T2CAP1L
                                    196 	.globl _T2CAP1
                                    197 	.globl _TH2
                                    198 	.globl _TL2
                                    199 	.globl _T2COUNT
                                    200 	.globl _RCAP2H
                                    201 	.globl _RCAP2L
                                    202 	.globl _RCAP2
                                    203 	.globl _T2MOD
                                    204 	.globl _T2CON
                                    205 	.globl _SBUF
                                    206 	.globl _SCON
                                    207 	.globl _TH1
                                    208 	.globl _TH0
                                    209 	.globl _TL1
                                    210 	.globl _TL0
                                    211 	.globl _TMOD
                                    212 	.globl _TCON
                                    213 	.globl _XBUS_AUX
                                    214 	.globl _PIN_FUNC
                                    215 	.globl _P3_DIR_PU
                                    216 	.globl _P3_MOD_OC
                                    217 	.globl _P3
                                    218 	.globl _P2
                                    219 	.globl _P1_DIR_PU
                                    220 	.globl _P1_MOD_OC
                                    221 	.globl _P1
                                    222 	.globl _ROM_CTRL
                                    223 	.globl _ROM_DATA_H
                                    224 	.globl _ROM_DATA_L
                                    225 	.globl _ROM_DATA
                                    226 	.globl _ROM_ADDR_H
                                    227 	.globl _ROM_ADDR_L
                                    228 	.globl _ROM_ADDR
                                    229 	.globl _GPIO_IE
                                    230 	.globl _IP_EX
                                    231 	.globl _IE_EX
                                    232 	.globl _IP
                                    233 	.globl _IE
                                    234 	.globl _WDOG_COUNT
                                    235 	.globl _RESET_KEEP
                                    236 	.globl _WAKE_CTRL
                                    237 	.globl _CLOCK_CFG
                                    238 	.globl _PCON
                                    239 	.globl _GLOBAL_CFG
                                    240 	.globl _SAFE_MOD
                                    241 	.globl _DPH
                                    242 	.globl _DPL
                                    243 	.globl _SP
                                    244 	.globl _B
                                    245 	.globl _ACC
                                    246 	.globl _PSW
                                    247 	.globl _ICP_Send
                                    248 	.globl _ICP_Recv
                                    249 	.globl _ICP_Init
                                    250 	.globl _ICP_Enter
                                    251 	.globl _ICP_Write
                                    252 	.globl _ICP_Read
                                    253 	.globl _ICP_SetWire
                                    254 	.globl _ICP_Exit
                                    255 	.globl _ICP_FlashWrite
                                    256 	.globl _ICP_FlashRead
                                    257 ;--------------------------------------------------------
                                    258 ; special function registers
                                    259 ;--------------------------------------------------------
                                    260 	.area RSEG    (ABS,DATA)
      000000                        261 	.org 0x0000
                           0000D0   262 _PSW	=	0x00d0
                           0000E0   263 _ACC	=	0x00e0
                           0000F0   264 _B	=	0x00f0
                           000081   265 _SP	=	0x0081
                           000082   266 _DPL	=	0x0082
                           000083   267 _DPH	=	0x0083
                           0000A1   268 _SAFE_MOD	=	0x00a1
                           0000B1   269 _GLOBAL_CFG	=	0x00b1
                           000087   270 _PCON	=	0x0087
                           0000B9   271 _CLOCK_CFG	=	0x00b9
                           0000A9   272 _WAKE_CTRL	=	0x00a9
                           0000FE   273 _RESET_KEEP	=	0x00fe
                           0000FF   274 _WDOG_COUNT	=	0x00ff
                           0000A8   275 _IE	=	0x00a8
                           0000B8   276 _IP	=	0x00b8
                           0000E8   277 _IE_EX	=	0x00e8
                           0000E9   278 _IP_EX	=	0x00e9
                           0000C7   279 _GPIO_IE	=	0x00c7
                           008584   280 _ROM_ADDR	=	0x8584
                           000084   281 _ROM_ADDR_L	=	0x0084
                           000085   282 _ROM_ADDR_H	=	0x0085
                           008F8E   283 _ROM_DATA	=	0x8f8e
                           00008E   284 _ROM_DATA_L	=	0x008e
                           00008F   285 _ROM_DATA_H	=	0x008f
                           000086   286 _ROM_CTRL	=	0x0086
                           000090   287 _P1	=	0x0090
                           000092   288 _P1_MOD_OC	=	0x0092
                           000093   289 _P1_DIR_PU	=	0x0093
                           0000A0   290 _P2	=	0x00a0
                           0000B0   291 _P3	=	0x00b0
                           000096   292 _P3_MOD_OC	=	0x0096
                           000097   293 _P3_DIR_PU	=	0x0097
                           0000C6   294 _PIN_FUNC	=	0x00c6
                           0000A2   295 _XBUS_AUX	=	0x00a2
                           000088   296 _TCON	=	0x0088
                           000089   297 _TMOD	=	0x0089
                           00008A   298 _TL0	=	0x008a
                           00008B   299 _TL1	=	0x008b
                           00008C   300 _TH0	=	0x008c
                           00008D   301 _TH1	=	0x008d
                           000098   302 _SCON	=	0x0098
                           000099   303 _SBUF	=	0x0099
                           0000C8   304 _T2CON	=	0x00c8
                           0000C9   305 _T2MOD	=	0x00c9
                           00CBCA   306 _RCAP2	=	0xcbca
                           0000CA   307 _RCAP2L	=	0x00ca
                           0000CB   308 _RCAP2H	=	0x00cb
                           00CDCC   309 _T2COUNT	=	0xcdcc
                           0000CC   310 _TL2	=	0x00cc
                           0000CD   311 _TH2	=	0x00cd
                           00CFCE   312 _T2CAP1	=	0xcfce
                           0000CE   313 _T2CAP1L	=	0x00ce
                           0000CF   314 _T2CAP1H	=	0x00cf
                           00009B   315 _PWM_DATA2	=	0x009b
                           00009C   316 _PWM_DATA1	=	0x009c
                           00009D   317 _PWM_CTRL	=	0x009d
                           00009E   318 _PWM_CK_SE	=	0x009e
                           0000F8   319 _SPI0_STAT	=	0x00f8
                           0000F9   320 _SPI0_DATA	=	0x00f9
                           0000FA   321 _SPI0_CTRL	=	0x00fa
                           0000FB   322 _SPI0_CK_SE	=	0x00fb
                           0000FC   323 _SPI0_SETUP	=	0x00fc
                           0000C0   324 _SCON1	=	0x00c0
                           0000C1   325 _SBUF1	=	0x00c1
                           0000C2   326 _SBAUD1	=	0x00c2
                           000080   327 _ADC_CTRL	=	0x0080
                           00009A   328 _ADC_CFG	=	0x009a
                           00009F   329 _ADC_DATA	=	0x009f
                           0000C3   330 _TKEY_CTRL	=	0x00c3
                           00C5C4   331 _TKEY_DAT	=	0xc5c4
                           0000C4   332 _TKEY_DATL	=	0x00c4
                           0000C5   333 _TKEY_DATH	=	0x00c5
                           000091   334 _USB_C_CTRL	=	0x0091
                           0000D1   335 _UDEV_CTRL	=	0x00d1
                           0000D2   336 _UEP1_CTRL	=	0x00d2
                           0000D3   337 _UEP1_T_LEN	=	0x00d3
                           0000D4   338 _UEP2_CTRL	=	0x00d4
                           0000D5   339 _UEP2_T_LEN	=	0x00d5
                           0000D6   340 _UEP3_CTRL	=	0x00d6
                           0000D7   341 _UEP3_T_LEN	=	0x00d7
                           0000D8   342 _USB_INT_FG	=	0x00d8
                           0000D9   343 _USB_INT_ST	=	0x00d9
                           0000DA   344 _USB_MIS_ST	=	0x00da
                           0000DB   345 _USB_RX_LEN	=	0x00db
                           0000DC   346 _UEP0_CTRL	=	0x00dc
                           0000DD   347 _UEP0_T_LEN	=	0x00dd
                           0000DE   348 _UEP4_CTRL	=	0x00de
                           0000DF   349 _UEP4_T_LEN	=	0x00df
                           0000E1   350 _USB_INT_EN	=	0x00e1
                           0000E2   351 _USB_CTRL	=	0x00e2
                           0000E3   352 _USB_DEV_AD	=	0x00e3
                           00E5E4   353 _UEP2_DMA	=	0xe5e4
                           0000E4   354 _UEP2_DMA_L	=	0x00e4
                           0000E5   355 _UEP2_DMA_H	=	0x00e5
                           00E7E6   356 _UEP3_DMA	=	0xe7e6
                           0000E6   357 _UEP3_DMA_L	=	0x00e6
                           0000E7   358 _UEP3_DMA_H	=	0x00e7
                           0000EA   359 _UEP4_1_MOD	=	0x00ea
                           0000EB   360 _UEP2_3_MOD	=	0x00eb
                           00EDEC   361 _UEP0_DMA	=	0xedec
                           0000EC   362 _UEP0_DMA_L	=	0x00ec
                           0000ED   363 _UEP0_DMA_H	=	0x00ed
                           00EFEE   364 _UEP1_DMA	=	0xefee
                           0000EE   365 _UEP1_DMA_L	=	0x00ee
                           0000EF   366 _UEP1_DMA_H	=	0x00ef
                                    367 ;--------------------------------------------------------
                                    368 ; special function bits
                                    369 ;--------------------------------------------------------
                                    370 	.area RSEG    (ABS,DATA)
      000000                        371 	.org 0x0000
                           0000D7   372 _CY	=	0x00d7
                           0000D6   373 _AC	=	0x00d6
                           0000D5   374 _F0	=	0x00d5
                           0000D4   375 _RS1	=	0x00d4
                           0000D3   376 _RS0	=	0x00d3
                           0000D2   377 _OV	=	0x00d2
                           0000D1   378 _F1	=	0x00d1
                           0000D0   379 _P	=	0x00d0
                           0000AF   380 _EA	=	0x00af
                           0000AE   381 _E_DIS	=	0x00ae
                           0000AD   382 _ET2	=	0x00ad
                           0000AC   383 _ES	=	0x00ac
                           0000AB   384 _ET1	=	0x00ab
                           0000AA   385 _EX1	=	0x00aa
                           0000A9   386 _ET0	=	0x00a9
                           0000A8   387 _EX0	=	0x00a8
                           0000BF   388 _PH_FLAG	=	0x00bf
                           0000BE   389 _PL_FLAG	=	0x00be
                           0000BD   390 _PT2	=	0x00bd
                           0000BC   391 _PS	=	0x00bc
                           0000BB   392 _PT1	=	0x00bb
                           0000BA   393 _PX1	=	0x00ba
                           0000B9   394 _PT0	=	0x00b9
                           0000B8   395 _PX0	=	0x00b8
                           0000EF   396 _IE_WDOG	=	0x00ef
                           0000EE   397 _IE_GPIO	=	0x00ee
                           0000ED   398 _IE_PWMX	=	0x00ed
                           0000EC   399 _IE_UART1	=	0x00ec
                           0000EB   400 _IE_ADC	=	0x00eb
                           0000EA   401 _IE_USB	=	0x00ea
                           0000E9   402 _IE_TKEY	=	0x00e9
                           0000E8   403 _IE_SPI0	=	0x00e8
                           000097   404 _SCK	=	0x0097
                           000097   405 _TXD1	=	0x0097
                           000097   406 _TIN5	=	0x0097
                           000096   407 _MISO	=	0x0096
                           000096   408 _RXD1	=	0x0096
                           000096   409 _TIN4	=	0x0096
                           000095   410 _MOSI	=	0x0095
                           000095   411 _PWM1	=	0x0095
                           000095   412 _TIN3	=	0x0095
                           000095   413 _UCC2	=	0x0095
                           000095   414 _AIN2	=	0x0095
                           000094   415 _T2_	=	0x0094
                           000094   416 _CAP1_	=	0x0094
                           000094   417 _SCS	=	0x0094
                           000094   418 _TIN2	=	0x0094
                           000094   419 _UCC1	=	0x0094
                           000094   420 _AIN1	=	0x0094
                           000093   421 _TXD_	=	0x0093
                           000092   422 _RXD_	=	0x0092
                           000091   423 _T2EX	=	0x0091
                           000091   424 _CAP2	=	0x0091
                           000091   425 _TIN1	=	0x0091
                           000091   426 _VBUS2	=	0x0091
                           000091   427 _AIN0	=	0x0091
                           000090   428 _T2	=	0x0090
                           000090   429 _CAP1	=	0x0090
                           000090   430 _TIN0	=	0x0090
                           0000B7   431 _UDM	=	0x00b7
                           0000B6   432 _UDP	=	0x00b6
                           0000B5   433 _T1	=	0x00b5
                           0000B4   434 _PWM2	=	0x00b4
                           0000B4   435 _RXD1_	=	0x00b4
                           0000B4   436 _T0	=	0x00b4
                           0000B3   437 _INT1	=	0x00b3
                           0000B2   438 _TXD1_	=	0x00b2
                           0000B2   439 _INT0	=	0x00b2
                           0000B2   440 _VBUS1	=	0x00b2
                           0000B2   441 _AIN3	=	0x00b2
                           0000B1   442 _PWM2_	=	0x00b1
                           0000B1   443 _TXD	=	0x00b1
                           0000B0   444 _PWM1_	=	0x00b0
                           0000B0   445 _RXD	=	0x00b0
                           00008F   446 _TF1	=	0x008f
                           00008E   447 _TR1	=	0x008e
                           00008D   448 _TF0	=	0x008d
                           00008C   449 _TR0	=	0x008c
                           00008B   450 _IE1	=	0x008b
                           00008A   451 _IT1	=	0x008a
                           000089   452 _IE0	=	0x0089
                           000088   453 _IT0	=	0x0088
                           00009F   454 _SM0	=	0x009f
                           00009E   455 _SM1	=	0x009e
                           00009D   456 _SM2	=	0x009d
                           00009C   457 _REN	=	0x009c
                           00009B   458 _TB8	=	0x009b
                           00009A   459 _RB8	=	0x009a
                           000099   460 _TI	=	0x0099
                           000098   461 _RI	=	0x0098
                           0000CF   462 _TF2	=	0x00cf
                           0000CF   463 _CAP1F	=	0x00cf
                           0000CE   464 _EXF2	=	0x00ce
                           0000CD   465 _RCLK	=	0x00cd
                           0000CC   466 _TCLK	=	0x00cc
                           0000CB   467 _EXEN2	=	0x00cb
                           0000CA   468 _TR2	=	0x00ca
                           0000C9   469 _C_T2	=	0x00c9
                           0000C8   470 _CP_RL2	=	0x00c8
                           0000FF   471 _S0_FST_ACT	=	0x00ff
                           0000FE   472 _S0_IF_OV	=	0x00fe
                           0000FD   473 _S0_IF_FIRST	=	0x00fd
                           0000FC   474 _S0_IF_BYTE	=	0x00fc
                           0000FB   475 _S0_FREE	=	0x00fb
                           0000FA   476 _S0_T_FIFO	=	0x00fa
                           0000F8   477 _S0_R_FIFO	=	0x00f8
                           0000C7   478 _U1SM0	=	0x00c7
                           0000C5   479 _U1SMOD	=	0x00c5
                           0000C4   480 _U1REN	=	0x00c4
                           0000C3   481 _U1TB8	=	0x00c3
                           0000C2   482 _U1RB8	=	0x00c2
                           0000C1   483 _U1TI	=	0x00c1
                           0000C0   484 _U1RI	=	0x00c0
                           000087   485 _CMPO	=	0x0087
                           000086   486 _CMP_IF	=	0x0086
                           000085   487 _ADC_IF	=	0x0085
                           000084   488 _ADC_START	=	0x0084
                           000083   489 _CMP_CHAN	=	0x0083
                           000081   490 _ADC_CHAN1	=	0x0081
                           000080   491 _ADC_CHAN0	=	0x0080
                           0000DF   492 _U_IS_NAK	=	0x00df
                           0000DE   493 _U_TOG_OK	=	0x00de
                           0000DD   494 _U_SIE_FREE	=	0x00dd
                           0000DC   495 _UIF_FIFO_OV	=	0x00dc
                           0000DB   496 _UIF_HST_SOF	=	0x00db
                           0000DA   497 _UIF_SUSPEND	=	0x00da
                           0000D9   498 _UIF_TRANSFER	=	0x00d9
                           0000D8   499 _UIF_DETECT	=	0x00d8
                           0000D8   500 _UIF_BUS_RST	=	0x00d8
                           0000B2   501 _NHC_SS_PIN	=	0x00b2
                           000095   502 _NHC_MOSI	=	0x0095
                           000095   503 _NHC_MOSI_R	=	0x0095
                           000097   504 _NHC_SCK	=	0x0097
                                    505 ;--------------------------------------------------------
                                    506 ; overlayable register banks
                                    507 ;--------------------------------------------------------
                                    508 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        509 	.ds 8
                                    510 ;--------------------------------------------------------
                                    511 ; internal ram data
                                    512 ;--------------------------------------------------------
                                    513 	.area DSEG    (DATA)
      00001C                        514 _ICP_Read_ack_65536_35:
      00001C                        515 	.ds 1
                                    516 ;--------------------------------------------------------
                                    517 ; overlayable items in internal ram 
                                    518 ;--------------------------------------------------------
                                    519 ;--------------------------------------------------------
                                    520 ; indirectly addressable internal ram data
                                    521 ;--------------------------------------------------------
                                    522 	.area ISEG    (DATA)
                                    523 ;--------------------------------------------------------
                                    524 ; absolute internal ram data
                                    525 ;--------------------------------------------------------
                                    526 	.area IABS    (ABS,DATA)
                                    527 	.area IABS    (ABS,DATA)
                                    528 ;--------------------------------------------------------
                                    529 ; bit data
                                    530 ;--------------------------------------------------------
                                    531 	.area BSEG    (BIT)
                                    532 ;--------------------------------------------------------
                                    533 ; paged external ram data
                                    534 ;--------------------------------------------------------
                                    535 	.area PSEG    (PAG,XDATA)
                                    536 ;--------------------------------------------------------
                                    537 ; external ram data
                                    538 ;--------------------------------------------------------
                                    539 	.area XSEG    (XDATA)
                                    540 ;--------------------------------------------------------
                                    541 ; absolute external ram data
                                    542 ;--------------------------------------------------------
                                    543 	.area XABS    (ABS,XDATA)
                                    544 ;--------------------------------------------------------
                                    545 ; external initialized ram data
                                    546 ;--------------------------------------------------------
                                    547 	.area XISEG   (XDATA)
                                    548 	.area HOME    (CODE)
                                    549 	.area GSINIT0 (CODE)
                                    550 	.area GSINIT1 (CODE)
                                    551 	.area GSINIT2 (CODE)
                                    552 	.area GSINIT3 (CODE)
                                    553 	.area GSINIT4 (CODE)
                                    554 	.area GSINIT5 (CODE)
                                    555 	.area GSINIT  (CODE)
                                    556 	.area GSFINAL (CODE)
                                    557 	.area CSEG    (CODE)
                                    558 ;--------------------------------------------------------
                                    559 ; global & static initialisations
                                    560 ;--------------------------------------------------------
                                    561 	.area HOME    (CODE)
                                    562 	.area GSINIT  (CODE)
                                    563 	.area GSFINAL (CODE)
                                    564 	.area GSINIT  (CODE)
                                    565 ;--------------------------------------------------------
                                    566 ; Home
                                    567 ;--------------------------------------------------------
                                    568 	.area HOME    (CODE)
                                    569 	.area HOME    (CODE)
                                    570 ;--------------------------------------------------------
                                    571 ; code
                                    572 ;--------------------------------------------------------
                                    573 	.area CSEG    (CODE)
                                    574 ;------------------------------------------------------------
                                    575 ;Allocation info for local variables in function 'ICP_Send'
                                    576 ;------------------------------------------------------------
                                    577 ;u8Data                    Allocated to registers r7 
                                    578 ;i                         Allocated to registers r6 
                                    579 ;------------------------------------------------------------
                                    580 ;	ICP_N76E003.c:17: void ICP_Send(uint8_t u8Data) {
                                    581 ;	-----------------------------------------
                                    582 ;	 function ICP_Send
                                    583 ;	-----------------------------------------
      000CE9                        584 _ICP_Send:
                           000007   585 	ar7 = 0x07
                           000006   586 	ar6 = 0x06
                           000005   587 	ar5 = 0x05
                           000004   588 	ar4 = 0x04
                           000003   589 	ar3 = 0x03
                           000002   590 	ar2 = 0x02
                           000001   591 	ar1 = 0x01
                           000000   592 	ar0 = 0x00
      000CE9 AF 82            [24]  593 	mov	r7,dpl
                                    594 ;	ICP_N76E003.c:21: P1_DIR_PU |= (1 << 5);
      000CEB 43 93 20         [24]  595 	orl	_P1_DIR_PU,#0x20
                                    596 ;	ICP_N76E003.c:22: for(i=0; i<8; ++i) {
      000CEE 7E 00            [12]  597 	mov	r6,#0x00
      000CF0                        598 00105$:
                                    599 ;	ICP_N76E003.c:23: if(u8Data&0x80) {
      000CF0 EF               [12]  600 	mov	a,r7
      000CF1 30 E7 04         [24]  601 	jnb	acc.7,00102$
                                    602 ;	ICP_N76E003.c:24: NHC_MOSI=1;
                                    603 ;	assignBit
      000CF4 D2 95            [12]  604 	setb	_NHC_MOSI
      000CF6 80 02            [24]  605 	sjmp	00103$
      000CF8                        606 00102$:
                                    607 ;	ICP_N76E003.c:26: NHC_MOSI=0;
                                    608 ;	assignBit
      000CF8 C2 95            [12]  609 	clr	_NHC_MOSI
      000CFA                        610 00103$:
                                    611 ;	ICP_N76E003.c:29: __delay_us(1);
      000CFA 90 00 01         [24]  612 	mov	dptr,#0x0001
      000CFD C0 07            [24]  613 	push	ar7
      000CFF C0 06            [24]  614 	push	ar6
      000D01 12 00 C2         [24]  615 	lcall	___delay_us
                                    616 ;	ICP_N76E003.c:30: NHC_SCK=1;
                                    617 ;	assignBit
      000D04 D2 97            [12]  618 	setb	_NHC_SCK
                                    619 ;	ICP_N76E003.c:32: __delay_us(1);
      000D06 90 00 01         [24]  620 	mov	dptr,#0x0001
      000D09 12 00 C2         [24]  621 	lcall	___delay_us
      000D0C D0 06            [24]  622 	pop	ar6
      000D0E D0 07            [24]  623 	pop	ar7
                                    624 ;	ICP_N76E003.c:33: NHC_SCK=0;
                                    625 ;	assignBit
      000D10 C2 97            [12]  626 	clr	_NHC_SCK
                                    627 ;	ICP_N76E003.c:34: u8Data<<=1;
      000D12 8F 05            [24]  628 	mov	ar5,r7
      000D14 ED               [12]  629 	mov	a,r5
      000D15 2D               [12]  630 	add	a,r5
      000D16 FF               [12]  631 	mov	r7,a
                                    632 ;	ICP_N76E003.c:22: for(i=0; i<8; ++i) {
      000D17 0E               [12]  633 	inc	r6
      000D18 BE 08 00         [24]  634 	cjne	r6,#0x08,00123$
      000D1B                        635 00123$:
      000D1B 40 D3            [24]  636 	jc	00105$
                                    637 ;	ICP_N76E003.c:36: __delay_us(1);
      000D1D 90 00 01         [24]  638 	mov	dptr,#0x0001
                                    639 ;	ICP_N76E003.c:37: }
      000D20 02 00 C2         [24]  640 	ljmp	___delay_us
                                    641 ;------------------------------------------------------------
                                    642 ;Allocation info for local variables in function 'ICP_Recv'
                                    643 ;------------------------------------------------------------
                                    644 ;u8Ack                     Allocated to registers r7 
                                    645 ;i                         Allocated to registers r5 
                                    646 ;ret                       Allocated to registers r6 
                                    647 ;------------------------------------------------------------
                                    648 ;	ICP_N76E003.c:38: uint8_t ICP_Recv(uint8_t u8Ack) {
                                    649 ;	-----------------------------------------
                                    650 ;	 function ICP_Recv
                                    651 ;	-----------------------------------------
      000D23                        652 _ICP_Recv:
      000D23 AF 82            [24]  653 	mov	r7,dpl
                                    654 ;	ICP_N76E003.c:39: uint8_t i, ret=0;
      000D25 7E 00            [12]  655 	mov	r6,#0x00
                                    656 ;	ICP_N76E003.c:41: NHC_MOSI = 1;
                                    657 ;	assignBit
      000D27 D2 95            [12]  658 	setb	_NHC_MOSI
                                    659 ;	ICP_N76E003.c:42: P1_DIR_PU &= ~(1 << 5);
      000D29 53 93 DF         [24]  660 	anl	_P1_DIR_PU,#0xdf
                                    661 ;	ICP_N76E003.c:44: for(i=0; i<8; ++i) {
      000D2C 7D 00            [12]  662 	mov	r5,#0x00
      000D2E                        663 00107$:
                                    664 ;	ICP_N76E003.c:45: ret<<=1;
      000D2E 8E 04            [24]  665 	mov	ar4,r6
      000D30 EC               [12]  666 	mov	a,r4
      000D31 2C               [12]  667 	add	a,r4
      000D32 FE               [12]  668 	mov	r6,a
                                    669 ;	ICP_N76E003.c:46: NHC_SCK=1;
                                    670 ;	assignBit
      000D33 D2 97            [12]  671 	setb	_NHC_SCK
                                    672 ;	ICP_N76E003.c:48: __delay_us(1);
      000D35 90 00 01         [24]  673 	mov	dptr,#0x0001
      000D38 C0 07            [24]  674 	push	ar7
      000D3A C0 06            [24]  675 	push	ar6
      000D3C C0 05            [24]  676 	push	ar5
      000D3E 12 00 C2         [24]  677 	lcall	___delay_us
      000D41 D0 05            [24]  678 	pop	ar5
      000D43 D0 06            [24]  679 	pop	ar6
      000D45 D0 07            [24]  680 	pop	ar7
                                    681 ;	ICP_N76E003.c:49: if(NHC_MOSI_R) {
      000D47 30 95 03         [24]  682 	jnb	_NHC_MOSI_R,00102$
                                    683 ;	ICP_N76E003.c:50: ret|=0x01;
      000D4A 43 06 01         [24]  684 	orl	ar6,#0x01
      000D4D                        685 00102$:
                                    686 ;	ICP_N76E003.c:52: NHC_SCK=0;
                                    687 ;	assignBit
      000D4D C2 97            [12]  688 	clr	_NHC_SCK
                                    689 ;	ICP_N76E003.c:54: __delay_us(1);
      000D4F 90 00 01         [24]  690 	mov	dptr,#0x0001
      000D52 C0 07            [24]  691 	push	ar7
      000D54 C0 06            [24]  692 	push	ar6
      000D56 C0 05            [24]  693 	push	ar5
      000D58 12 00 C2         [24]  694 	lcall	___delay_us
      000D5B D0 05            [24]  695 	pop	ar5
      000D5D D0 06            [24]  696 	pop	ar6
      000D5F D0 07            [24]  697 	pop	ar7
                                    698 ;	ICP_N76E003.c:44: for(i=0; i<8; ++i) {
      000D61 0D               [12]  699 	inc	r5
      000D62 BD 08 00         [24]  700 	cjne	r5,#0x08,00129$
      000D65                        701 00129$:
      000D65 40 C7            [24]  702 	jc	00107$
                                    703 ;	ICP_N76E003.c:58: P1_DIR_PU |= (1 << 5);
      000D67 43 93 20         [24]  704 	orl	_P1_DIR_PU,#0x20
                                    705 ;	ICP_N76E003.c:59: if(u8Ack) {
      000D6A EF               [12]  706 	mov	a,r7
      000D6B 60 04            [24]  707 	jz	00105$
                                    708 ;	ICP_N76E003.c:60: NHC_MOSI=1;
                                    709 ;	assignBit
      000D6D D2 95            [12]  710 	setb	_NHC_MOSI
      000D6F 80 02            [24]  711 	sjmp	00106$
      000D71                        712 00105$:
                                    713 ;	ICP_N76E003.c:62: NHC_MOSI=0;
                                    714 ;	assignBit
      000D71 C2 95            [12]  715 	clr	_NHC_MOSI
      000D73                        716 00106$:
                                    717 ;	ICP_N76E003.c:67: __delay_us(2);
      000D73 90 00 02         [24]  718 	mov	dptr,#0x0002
      000D76 C0 06            [24]  719 	push	ar6
      000D78 12 00 C2         [24]  720 	lcall	___delay_us
                                    721 ;	ICP_N76E003.c:70: NHC_SCK=1;
                                    722 ;	assignBit
      000D7B D2 97            [12]  723 	setb	_NHC_SCK
                                    724 ;	ICP_N76E003.c:72: __delay_us(1);
      000D7D 90 00 01         [24]  725 	mov	dptr,#0x0001
      000D80 12 00 C2         [24]  726 	lcall	___delay_us
                                    727 ;	ICP_N76E003.c:73: NHC_SCK=0;
                                    728 ;	assignBit
      000D83 C2 97            [12]  729 	clr	_NHC_SCK
                                    730 ;	ICP_N76E003.c:75: __delay_us(1);
      000D85 90 00 01         [24]  731 	mov	dptr,#0x0001
      000D88 12 00 C2         [24]  732 	lcall	___delay_us
      000D8B D0 06            [24]  733 	pop	ar6
                                    734 ;	ICP_N76E003.c:76: return ret;
      000D8D 8E 82            [24]  735 	mov	dpl,r6
                                    736 ;	ICP_N76E003.c:77: }
      000D8F 22               [24]  737 	ret
                                    738 ;------------------------------------------------------------
                                    739 ;Allocation info for local variables in function 'ICP_Init'
                                    740 ;------------------------------------------------------------
                                    741 ;	ICP_N76E003.c:80: void ICP_Init(void) {
                                    742 ;	-----------------------------------------
                                    743 ;	 function ICP_Init
                                    744 ;	-----------------------------------------
      000D90                        745 _ICP_Init:
                                    746 ;	ICP_N76E003.c:83: NHC_SS_PIN=1;
                                    747 ;	assignBit
      000D90 D2 B2            [12]  748 	setb	_NHC_SS_PIN
                                    749 ;	ICP_N76E003.c:84: NHC_MOSI=0;
                                    750 ;	assignBit
      000D92 C2 95            [12]  751 	clr	_NHC_MOSI
                                    752 ;	ICP_N76E003.c:85: NHC_SCK=0;
                                    753 ;	assignBit
      000D94 C2 97            [12]  754 	clr	_NHC_SCK
                                    755 ;	ICP_N76E003.c:90: P1_DIR_PU |= (1 << 5);
      000D96 43 93 20         [24]  756 	orl	_P1_DIR_PU,#0x20
                                    757 ;	ICP_N76E003.c:94: P1_DIR_PU |= (1 << 7);
      000D99 43 93 80         [24]  758 	orl	_P1_DIR_PU,#0x80
                                    759 ;	ICP_N76E003.c:96: __delay_ms(10);
      000D9C 90 00 0A         [24]  760 	mov	dptr,#0x000a
      000D9F 12 00 9D         [24]  761 	lcall	___delay_ms
                                    762 ;	ICP_N76E003.c:100: P3_DIR_PU |= (1 << 2);
      000DA2 43 97 04         [24]  763 	orl	_P3_DIR_PU,#0x04
                                    764 ;	ICP_N76E003.c:102: NHC_SS_PIN=0;
                                    765 ;	assignBit
      000DA5 C2 B2            [12]  766 	clr	_NHC_SS_PIN
                                    767 ;	ICP_N76E003.c:104: __delay_ms(10);
      000DA7 90 00 0A         [24]  768 	mov	dptr,#0x000a
      000DAA 12 00 9D         [24]  769 	lcall	___delay_ms
                                    770 ;	ICP_N76E003.c:105: NHC_SS_PIN=1;
                                    771 ;	assignBit
      000DAD D2 B2            [12]  772 	setb	_NHC_SS_PIN
                                    773 ;	ICP_N76E003.c:107: __delay_ms(10);
      000DAF 90 00 0A         [24]  774 	mov	dptr,#0x000a
      000DB2 12 00 9D         [24]  775 	lcall	___delay_ms
                                    776 ;	ICP_N76E003.c:108: NHC_SS_PIN=0;
                                    777 ;	assignBit
      000DB5 C2 B2            [12]  778 	clr	_NHC_SS_PIN
                                    779 ;	ICP_N76E003.c:110: __delay_ms(10);
      000DB7 90 00 0A         [24]  780 	mov	dptr,#0x000a
      000DBA 12 00 9D         [24]  781 	lcall	___delay_ms
                                    782 ;	ICP_N76E003.c:111: NHC_SS_PIN=1;
                                    783 ;	assignBit
      000DBD D2 B2            [12]  784 	setb	_NHC_SS_PIN
                                    785 ;	ICP_N76E003.c:113: __delay_ms(10);
      000DBF 90 00 0A         [24]  786 	mov	dptr,#0x000a
      000DC2 12 00 9D         [24]  787 	lcall	___delay_ms
                                    788 ;	ICP_N76E003.c:114: NHC_SS_PIN=0;
                                    789 ;	assignBit
      000DC5 C2 B2            [12]  790 	clr	_NHC_SS_PIN
                                    791 ;	ICP_N76E003.c:116: __delay_ms(10);
      000DC7 90 00 0A         [24]  792 	mov	dptr,#0x000a
      000DCA 12 00 9D         [24]  793 	lcall	___delay_ms
                                    794 ;	ICP_N76E003.c:117: NHC_SS_PIN=1;
                                    795 ;	assignBit
      000DCD D2 B2            [12]  796 	setb	_NHC_SS_PIN
                                    797 ;	ICP_N76E003.c:119: __delay_ms(30);
      000DCF 90 00 1E         [24]  798 	mov	dptr,#0x001e
      000DD2 12 00 9D         [24]  799 	lcall	___delay_ms
                                    800 ;	ICP_N76E003.c:120: NHC_SS_PIN=0;
                                    801 ;	assignBit
      000DD5 C2 B2            [12]  802 	clr	_NHC_SS_PIN
                                    803 ;	ICP_N76E003.c:122: __delay_ms(40);
      000DD7 90 00 28         [24]  804 	mov	dptr,#0x0028
      000DDA 12 00 9D         [24]  805 	lcall	___delay_ms
                                    806 ;	ICP_N76E003.c:123: NHC_SS_PIN=1;
                                    807 ;	assignBit
      000DDD D2 B2            [12]  808 	setb	_NHC_SS_PIN
                                    809 ;	ICP_N76E003.c:125: __delay_ms(30);
      000DDF 90 00 1E         [24]  810 	mov	dptr,#0x001e
      000DE2 12 00 9D         [24]  811 	lcall	___delay_ms
                                    812 ;	ICP_N76E003.c:126: NHC_SS_PIN=0;
                                    813 ;	assignBit
      000DE5 C2 B2            [12]  814 	clr	_NHC_SS_PIN
                                    815 ;	ICP_N76E003.c:128: __delay_ms(20);
      000DE7 90 00 14         [24]  816 	mov	dptr,#0x0014
      000DEA 12 00 9D         [24]  817 	lcall	___delay_ms
                                    818 ;	ICP_N76E003.c:129: NHC_SS_PIN=1;
                                    819 ;	assignBit
      000DED D2 B2            [12]  820 	setb	_NHC_SS_PIN
                                    821 ;	ICP_N76E003.c:131: __delay_ms(10);
      000DEF 90 00 0A         [24]  822 	mov	dptr,#0x000a
      000DF2 12 00 9D         [24]  823 	lcall	___delay_ms
                                    824 ;	ICP_N76E003.c:132: NHC_SS_PIN=0;
                                    825 ;	assignBit
      000DF5 C2 B2            [12]  826 	clr	_NHC_SS_PIN
                                    827 ;	ICP_N76E003.c:134: __delay_ms(10);
      000DF7 90 00 0A         [24]  828 	mov	dptr,#0x000a
      000DFA 12 00 9D         [24]  829 	lcall	___delay_ms
                                    830 ;	ICP_N76E003.c:135: NHC_SS_PIN=1;
                                    831 ;	assignBit
      000DFD D2 B2            [12]  832 	setb	_NHC_SS_PIN
                                    833 ;	ICP_N76E003.c:137: __delay_ms(20);
      000DFF 90 00 14         [24]  834 	mov	dptr,#0x0014
      000E02 12 00 9D         [24]  835 	lcall	___delay_ms
                                    836 ;	ICP_N76E003.c:138: NHC_SS_PIN=0;
                                    837 ;	assignBit
      000E05 C2 B2            [12]  838 	clr	_NHC_SS_PIN
                                    839 ;	ICP_N76E003.c:140: __delay_ms(10);
      000E07 90 00 0A         [24]  840 	mov	dptr,#0x000a
      000E0A 12 00 9D         [24]  841 	lcall	___delay_ms
                                    842 ;	ICP_N76E003.c:141: NHC_SS_PIN=1;
                                    843 ;	assignBit
      000E0D D2 B2            [12]  844 	setb	_NHC_SS_PIN
                                    845 ;	ICP_N76E003.c:143: __delay_ms(20);
      000E0F 90 00 14         [24]  846 	mov	dptr,#0x0014
      000E12 12 00 9D         [24]  847 	lcall	___delay_ms
                                    848 ;	ICP_N76E003.c:144: NHC_SS_PIN=0;
                                    849 ;	assignBit
      000E15 C2 B2            [12]  850 	clr	_NHC_SS_PIN
                                    851 ;	ICP_N76E003.c:146: __delay_ms(10);
      000E17 90 00 0A         [24]  852 	mov	dptr,#0x000a
      000E1A 12 00 9D         [24]  853 	lcall	___delay_ms
                                    854 ;	ICP_N76E003.c:149: ICP_Send(0x5A);
      000E1D 75 82 5A         [24]  855 	mov	dpl,#0x5a
      000E20 12 0C E9         [24]  856 	lcall	_ICP_Send
                                    857 ;	ICP_N76E003.c:150: ICP_Send(0xA5);
      000E23 75 82 A5         [24]  858 	mov	dpl,#0xa5
      000E26 12 0C E9         [24]  859 	lcall	_ICP_Send
                                    860 ;	ICP_N76E003.c:151: ICP_Send(0x03);
      000E29 75 82 03         [24]  861 	mov	dpl,#0x03
      000E2C 12 0C E9         [24]  862 	lcall	_ICP_Send
                                    863 ;	ICP_N76E003.c:153: __delay_ms(10);
      000E2F 90 00 0A         [24]  864 	mov	dptr,#0x000a
      000E32 12 00 9D         [24]  865 	lcall	___delay_ms
                                    866 ;	ICP_N76E003.c:154: ICP_Send(0x00);
      000E35 75 82 00         [24]  867 	mov	dpl,#0x00
      000E38 12 0C E9         [24]  868 	lcall	_ICP_Send
                                    869 ;	ICP_N76E003.c:155: ICP_Send(0x00);
      000E3B 75 82 00         [24]  870 	mov	dpl,#0x00
      000E3E 12 0C E9         [24]  871 	lcall	_ICP_Send
                                    872 ;	ICP_N76E003.c:156: ICP_Send(0x0B);
      000E41 75 82 0B         [24]  873 	mov	dpl,#0x0b
      000E44 12 0C E9         [24]  874 	lcall	_ICP_Send
                                    875 ;	ICP_N76E003.c:157: u8TransBuff[0]=ICP_Recv(0x01);
      000E47 75 82 01         [24]  876 	mov	dpl,#0x01
      000E4A 12 0D 23         [24]  877 	lcall	_ICP_Recv
      000E4D AF 82            [24]  878 	mov	r7,dpl
      000E4F 90 00 D6         [24]  879 	mov	dptr,#_u8TransBuff
      000E52 EF               [12]  880 	mov	a,r7
      000E53 F0               [24]  881 	movx	@dptr,a
                                    882 ;	ICP_N76E003.c:159: ICP_Send(0x00);
      000E54 75 82 00         [24]  883 	mov	dpl,#0x00
      000E57 12 0C E9         [24]  884 	lcall	_ICP_Send
                                    885 ;	ICP_N76E003.c:160: ICP_Send(0x00);
      000E5A 75 82 00         [24]  886 	mov	dpl,#0x00
      000E5D 12 0C E9         [24]  887 	lcall	_ICP_Send
                                    888 ;	ICP_N76E003.c:161: ICP_Send(0x0C);
      000E60 75 82 0C         [24]  889 	mov	dpl,#0x0c
      000E63 12 0C E9         [24]  890 	lcall	_ICP_Send
                                    891 ;	ICP_N76E003.c:162: u8TransBuff[1]=ICP_Recv(0x01);
      000E66 75 82 01         [24]  892 	mov	dpl,#0x01
      000E69 12 0D 23         [24]  893 	lcall	_ICP_Recv
      000E6C AF 82            [24]  894 	mov	r7,dpl
      000E6E 90 00 D7         [24]  895 	mov	dptr,#(_u8TransBuff + 0x0001)
      000E71 EF               [12]  896 	mov	a,r7
      000E72 F0               [24]  897 	movx	@dptr,a
                                    898 ;	ICP_N76E003.c:164: ICP_Send(0x00);
      000E73 75 82 00         [24]  899 	mov	dpl,#0x00
      000E76 12 0C E9         [24]  900 	lcall	_ICP_Send
                                    901 ;	ICP_N76E003.c:165: ICP_Send(0x00);
      000E79 75 82 00         [24]  902 	mov	dpl,#0x00
      000E7C 12 0C E9         [24]  903 	lcall	_ICP_Send
                                    904 ;	ICP_N76E003.c:166: ICP_Send(0x4C);
      000E7F 75 82 4C         [24]  905 	mov	dpl,#0x4c
      000E82 12 0C E9         [24]  906 	lcall	_ICP_Send
                                    907 ;	ICP_N76E003.c:167: u8TransBuff[2]=ICP_Recv(0x01);
      000E85 75 82 01         [24]  908 	mov	dpl,#0x01
      000E88 12 0D 23         [24]  909 	lcall	_ICP_Recv
      000E8B AF 82            [24]  910 	mov	r7,dpl
      000E8D 90 00 D8         [24]  911 	mov	dptr,#(_u8TransBuff + 0x0002)
      000E90 EF               [12]  912 	mov	a,r7
      000E91 F0               [24]  913 	movx	@dptr,a
                                    914 ;	ICP_N76E003.c:173: }
      000E92 22               [24]  915 	ret
                                    916 ;------------------------------------------------------------
                                    917 ;Allocation info for local variables in function 'ICP_Enter'
                                    918 ;------------------------------------------------------------
                                    919 ;	ICP_N76E003.c:175: void ICP_Enter(void) {
                                    920 ;	-----------------------------------------
                                    921 ;	 function ICP_Enter
                                    922 ;	-----------------------------------------
      000E93                        923 _ICP_Enter:
                                    924 ;	ICP_N76E003.c:178: NHC_SS_PIN=1;
                                    925 ;	assignBit
      000E93 D2 B2            [12]  926 	setb	_NHC_SS_PIN
                                    927 ;	ICP_N76E003.c:179: NHC_MOSI=0;
                                    928 ;	assignBit
      000E95 C2 95            [12]  929 	clr	_NHC_MOSI
                                    930 ;	ICP_N76E003.c:180: NHC_SCK=0;
                                    931 ;	assignBit
      000E97 C2 97            [12]  932 	clr	_NHC_SCK
                                    933 ;	ICP_N76E003.c:185: P1_DIR_PU |= (1 << 5);
      000E99 43 93 20         [24]  934 	orl	_P1_DIR_PU,#0x20
                                    935 ;	ICP_N76E003.c:189: P1_DIR_PU |= (1 << 7);
      000E9C 43 93 80         [24]  936 	orl	_P1_DIR_PU,#0x80
                                    937 ;	ICP_N76E003.c:191: __delay_ms(10);
      000E9F 90 00 0A         [24]  938 	mov	dptr,#0x000a
      000EA2 12 00 9D         [24]  939 	lcall	___delay_ms
                                    940 ;	ICP_N76E003.c:195: P3_DIR_PU |= (1 << 2);
      000EA5 43 97 04         [24]  941 	orl	_P3_DIR_PU,#0x04
                                    942 ;	ICP_N76E003.c:197: NHC_SS_PIN=0;
                                    943 ;	assignBit
      000EA8 C2 B2            [12]  944 	clr	_NHC_SS_PIN
                                    945 ;	ICP_N76E003.c:199: __delay_ms(10);
      000EAA 90 00 0A         [24]  946 	mov	dptr,#0x000a
      000EAD 12 00 9D         [24]  947 	lcall	___delay_ms
                                    948 ;	ICP_N76E003.c:200: NHC_SS_PIN=1;
                                    949 ;	assignBit
      000EB0 D2 B2            [12]  950 	setb	_NHC_SS_PIN
                                    951 ;	ICP_N76E003.c:202: __delay_ms(10);
      000EB2 90 00 0A         [24]  952 	mov	dptr,#0x000a
      000EB5 12 00 9D         [24]  953 	lcall	___delay_ms
                                    954 ;	ICP_N76E003.c:203: NHC_SS_PIN=0;
                                    955 ;	assignBit
      000EB8 C2 B2            [12]  956 	clr	_NHC_SS_PIN
                                    957 ;	ICP_N76E003.c:205: __delay_ms(10);
      000EBA 90 00 0A         [24]  958 	mov	dptr,#0x000a
      000EBD 12 00 9D         [24]  959 	lcall	___delay_ms
                                    960 ;	ICP_N76E003.c:206: NHC_SS_PIN=1;
                                    961 ;	assignBit
      000EC0 D2 B2            [12]  962 	setb	_NHC_SS_PIN
                                    963 ;	ICP_N76E003.c:208: __delay_ms(10);
      000EC2 90 00 0A         [24]  964 	mov	dptr,#0x000a
      000EC5 12 00 9D         [24]  965 	lcall	___delay_ms
                                    966 ;	ICP_N76E003.c:209: NHC_SS_PIN=0;
                                    967 ;	assignBit
      000EC8 C2 B2            [12]  968 	clr	_NHC_SS_PIN
                                    969 ;	ICP_N76E003.c:211: __delay_ms(10);
      000ECA 90 00 0A         [24]  970 	mov	dptr,#0x000a
      000ECD 12 00 9D         [24]  971 	lcall	___delay_ms
                                    972 ;	ICP_N76E003.c:212: NHC_SS_PIN=1;
                                    973 ;	assignBit
      000ED0 D2 B2            [12]  974 	setb	_NHC_SS_PIN
                                    975 ;	ICP_N76E003.c:214: __delay_ms(30);
      000ED2 90 00 1E         [24]  976 	mov	dptr,#0x001e
      000ED5 12 00 9D         [24]  977 	lcall	___delay_ms
                                    978 ;	ICP_N76E003.c:215: NHC_SS_PIN=0;
                                    979 ;	assignBit
      000ED8 C2 B2            [12]  980 	clr	_NHC_SS_PIN
                                    981 ;	ICP_N76E003.c:217: __delay_ms(40);
      000EDA 90 00 28         [24]  982 	mov	dptr,#0x0028
      000EDD 12 00 9D         [24]  983 	lcall	___delay_ms
                                    984 ;	ICP_N76E003.c:218: NHC_SS_PIN=1;
                                    985 ;	assignBit
      000EE0 D2 B2            [12]  986 	setb	_NHC_SS_PIN
                                    987 ;	ICP_N76E003.c:220: __delay_ms(30);
      000EE2 90 00 1E         [24]  988 	mov	dptr,#0x001e
      000EE5 12 00 9D         [24]  989 	lcall	___delay_ms
                                    990 ;	ICP_N76E003.c:221: NHC_SS_PIN=0;
                                    991 ;	assignBit
      000EE8 C2 B2            [12]  992 	clr	_NHC_SS_PIN
                                    993 ;	ICP_N76E003.c:223: __delay_ms(20);
      000EEA 90 00 14         [24]  994 	mov	dptr,#0x0014
      000EED 12 00 9D         [24]  995 	lcall	___delay_ms
                                    996 ;	ICP_N76E003.c:224: NHC_SS_PIN=1;
                                    997 ;	assignBit
      000EF0 D2 B2            [12]  998 	setb	_NHC_SS_PIN
                                    999 ;	ICP_N76E003.c:226: __delay_ms(10);
      000EF2 90 00 0A         [24] 1000 	mov	dptr,#0x000a
      000EF5 12 00 9D         [24] 1001 	lcall	___delay_ms
                                   1002 ;	ICP_N76E003.c:227: NHC_SS_PIN=0;
                                   1003 ;	assignBit
      000EF8 C2 B2            [12] 1004 	clr	_NHC_SS_PIN
                                   1005 ;	ICP_N76E003.c:229: __delay_ms(10);
      000EFA 90 00 0A         [24] 1006 	mov	dptr,#0x000a
      000EFD 12 00 9D         [24] 1007 	lcall	___delay_ms
                                   1008 ;	ICP_N76E003.c:230: NHC_SS_PIN=1;
                                   1009 ;	assignBit
      000F00 D2 B2            [12] 1010 	setb	_NHC_SS_PIN
                                   1011 ;	ICP_N76E003.c:232: __delay_ms(20);
      000F02 90 00 14         [24] 1012 	mov	dptr,#0x0014
      000F05 12 00 9D         [24] 1013 	lcall	___delay_ms
                                   1014 ;	ICP_N76E003.c:233: NHC_SS_PIN=0;
                                   1015 ;	assignBit
      000F08 C2 B2            [12] 1016 	clr	_NHC_SS_PIN
                                   1017 ;	ICP_N76E003.c:235: __delay_ms(10);
      000F0A 90 00 0A         [24] 1018 	mov	dptr,#0x000a
      000F0D 12 00 9D         [24] 1019 	lcall	___delay_ms
                                   1020 ;	ICP_N76E003.c:236: NHC_SS_PIN=1;
                                   1021 ;	assignBit
      000F10 D2 B2            [12] 1022 	setb	_NHC_SS_PIN
                                   1023 ;	ICP_N76E003.c:238: __delay_ms(20);
      000F12 90 00 14         [24] 1024 	mov	dptr,#0x0014
      000F15 12 00 9D         [24] 1025 	lcall	___delay_ms
                                   1026 ;	ICP_N76E003.c:239: NHC_SS_PIN=0;
                                   1027 ;	assignBit
      000F18 C2 B2            [12] 1028 	clr	_NHC_SS_PIN
                                   1029 ;	ICP_N76E003.c:241: __delay_ms(10);
      000F1A 90 00 0A         [24] 1030 	mov	dptr,#0x000a
      000F1D 12 00 9D         [24] 1031 	lcall	___delay_ms
                                   1032 ;	ICP_N76E003.c:244: ICP_Send(0x5A);
      000F20 75 82 5A         [24] 1033 	mov	dpl,#0x5a
      000F23 12 0C E9         [24] 1034 	lcall	_ICP_Send
                                   1035 ;	ICP_N76E003.c:245: ICP_Send(0xA5);
      000F26 75 82 A5         [24] 1036 	mov	dpl,#0xa5
      000F29 12 0C E9         [24] 1037 	lcall	_ICP_Send
                                   1038 ;	ICP_N76E003.c:246: ICP_Send(0x03);
      000F2C 75 82 03         [24] 1039 	mov	dpl,#0x03
      000F2F 12 0C E9         [24] 1040 	lcall	_ICP_Send
                                   1041 ;	ICP_N76E003.c:248: __delay_ms(10);
      000F32 90 00 0A         [24] 1042 	mov	dptr,#0x000a
                                   1043 ;	ICP_N76E003.c:269: }
      000F35 02 00 9D         [24] 1044 	ljmp	___delay_ms
                                   1045 ;------------------------------------------------------------
                                   1046 ;Allocation info for local variables in function 'ICP_Write'
                                   1047 ;------------------------------------------------------------
                                   1048 ;i                         Allocated to registers r6 
                                   1049 ;n                         Allocated to registers r7 
                                   1050 ;------------------------------------------------------------
                                   1051 ;	ICP_N76E003.c:271: void ICP_Write(void) {
                                   1052 ;	-----------------------------------------
                                   1053 ;	 function ICP_Write
                                   1054 ;	-----------------------------------------
      000F38                       1055 _ICP_Write:
                                   1056 ;	ICP_N76E003.c:273: n=u8ReceiveBuff[2];
      000F38 90 00 42         [24] 1057 	mov	dptr,#(_u8ReceiveBuff + 0x0002)
      000F3B E0               [24] 1058 	movx	a,@dptr
      000F3C FF               [12] 1059 	mov	r7,a
                                   1060 ;	ICP_N76E003.c:274: for(i=0; i<n; ++i) {
      000F3D 7E 00            [12] 1061 	mov	r6,#0x00
      000F3F                       1062 00103$:
      000F3F C3               [12] 1063 	clr	c
      000F40 EE               [12] 1064 	mov	a,r6
      000F41 9F               [12] 1065 	subb	a,r7
      000F42 50 26            [24] 1066 	jnc	00105$
                                   1067 ;	ICP_N76E003.c:275: ICP_Send(u8ReceiveBuff[3+i]);
      000F44 8E 04            [24] 1068 	mov	ar4,r6
      000F46 7D 00            [12] 1069 	mov	r5,#0x00
      000F48 74 03            [12] 1070 	mov	a,#0x03
      000F4A 2C               [12] 1071 	add	a,r4
      000F4B FC               [12] 1072 	mov	r4,a
      000F4C E4               [12] 1073 	clr	a
      000F4D 3D               [12] 1074 	addc	a,r5
      000F4E FD               [12] 1075 	mov	r5,a
      000F4F EC               [12] 1076 	mov	a,r4
      000F50 24 40            [12] 1077 	add	a,#_u8ReceiveBuff
      000F52 F5 82            [12] 1078 	mov	dpl,a
      000F54 ED               [12] 1079 	mov	a,r5
      000F55 34 00            [12] 1080 	addc	a,#(_u8ReceiveBuff >> 8)
      000F57 F5 83            [12] 1081 	mov	dph,a
      000F59 E0               [24] 1082 	movx	a,@dptr
      000F5A F5 82            [12] 1083 	mov	dpl,a
      000F5C C0 07            [24] 1084 	push	ar7
      000F5E C0 06            [24] 1085 	push	ar6
      000F60 12 0C E9         [24] 1086 	lcall	_ICP_Send
      000F63 D0 06            [24] 1087 	pop	ar6
      000F65 D0 07            [24] 1088 	pop	ar7
                                   1089 ;	ICP_N76E003.c:274: for(i=0; i<n; ++i) {
      000F67 0E               [12] 1090 	inc	r6
      000F68 80 D5            [24] 1091 	sjmp	00103$
      000F6A                       1092 00105$:
                                   1093 ;	ICP_N76E003.c:277: }
      000F6A 22               [24] 1094 	ret
                                   1095 ;------------------------------------------------------------
                                   1096 ;Allocation info for local variables in function 'ICP_Read'
                                   1097 ;------------------------------------------------------------
                                   1098 ;i                         Allocated to registers r5 
                                   1099 ;n                         Allocated to registers r7 
                                   1100 ;ack                       Allocated with name '_ICP_Read_ack_65536_35'
                                   1101 ;------------------------------------------------------------
                                   1102 ;	ICP_N76E003.c:279: void ICP_Read(void) {
                                   1103 ;	-----------------------------------------
                                   1104 ;	 function ICP_Read
                                   1105 ;	-----------------------------------------
      000F6B                       1106 _ICP_Read:
                                   1107 ;	ICP_N76E003.c:281: n=u8ReceiveBuff[2];
      000F6B 90 00 42         [24] 1108 	mov	dptr,#(_u8ReceiveBuff + 0x0002)
      000F6E E0               [24] 1109 	movx	a,@dptr
      000F6F FF               [12] 1110 	mov	r7,a
                                   1111 ;	ICP_N76E003.c:282: ack=u8ReceiveBuff[3];
      000F70 90 00 43         [24] 1112 	mov	dptr,#(_u8ReceiveBuff + 0x0003)
      000F73 E0               [24] 1113 	movx	a,@dptr
      000F74 F5 1C            [12] 1114 	mov	_ICP_Read_ack_65536_35,a
                                   1115 ;	ICP_N76E003.c:284: for(i=0; i<n-1; ++i) {
      000F76 7D 00            [12] 1116 	mov	r5,#0x00
      000F78                       1117 00103$:
      000F78 8F 03            [24] 1118 	mov	ar3,r7
      000F7A 7C 00            [12] 1119 	mov	r4,#0x00
      000F7C EB               [12] 1120 	mov	a,r3
      000F7D 24 FF            [12] 1121 	add	a,#0xff
      000F7F F9               [12] 1122 	mov	r1,a
      000F80 EC               [12] 1123 	mov	a,r4
      000F81 34 FF            [12] 1124 	addc	a,#0xff
      000F83 FA               [12] 1125 	mov	r2,a
      000F84 8D 00            [24] 1126 	mov	ar0,r5
      000F86 7E 00            [12] 1127 	mov	r6,#0x00
      000F88 C3               [12] 1128 	clr	c
      000F89 E8               [12] 1129 	mov	a,r0
      000F8A 99               [12] 1130 	subb	a,r1
      000F8B EE               [12] 1131 	mov	a,r6
      000F8C 64 80            [12] 1132 	xrl	a,#0x80
      000F8E 8A F0            [24] 1133 	mov	b,r2
      000F90 63 F0 80         [24] 1134 	xrl	b,#0x80
      000F93 95 F0            [12] 1135 	subb	a,b
      000F95 50 29            [24] 1136 	jnc	00101$
                                   1137 ;	ICP_N76E003.c:285: u8TransBuff[i]=ICP_Recv(0);
      000F97 ED               [12] 1138 	mov	a,r5
      000F98 24 D6            [12] 1139 	add	a,#_u8TransBuff
      000F9A FA               [12] 1140 	mov	r2,a
      000F9B E4               [12] 1141 	clr	a
      000F9C 34 00            [12] 1142 	addc	a,#(_u8TransBuff >> 8)
      000F9E FE               [12] 1143 	mov	r6,a
      000F9F 75 82 00         [24] 1144 	mov	dpl,#0x00
      000FA2 C0 07            [24] 1145 	push	ar7
      000FA4 C0 06            [24] 1146 	push	ar6
      000FA6 C0 05            [24] 1147 	push	ar5
      000FA8 C0 02            [24] 1148 	push	ar2
      000FAA 12 0D 23         [24] 1149 	lcall	_ICP_Recv
      000FAD A9 82            [24] 1150 	mov	r1,dpl
      000FAF D0 02            [24] 1151 	pop	ar2
      000FB1 D0 05            [24] 1152 	pop	ar5
      000FB3 D0 06            [24] 1153 	pop	ar6
      000FB5 D0 07            [24] 1154 	pop	ar7
      000FB7 8A 82            [24] 1155 	mov	dpl,r2
      000FB9 8E 83            [24] 1156 	mov	dph,r6
      000FBB E9               [12] 1157 	mov	a,r1
      000FBC F0               [24] 1158 	movx	@dptr,a
                                   1159 ;	ICP_N76E003.c:284: for(i=0; i<n-1; ++i) {
      000FBD 0D               [12] 1160 	inc	r5
      000FBE 80 B8            [24] 1161 	sjmp	00103$
      000FC0                       1162 00101$:
                                   1163 ;	ICP_N76E003.c:288: u8TransBuff[n-1]=ICP_Recv(ack);
      000FC0 1B               [12] 1164 	dec	r3
      000FC1 BB FF 01         [24] 1165 	cjne	r3,#0xff,00117$
      000FC4 1C               [12] 1166 	dec	r4
      000FC5                       1167 00117$:
      000FC5 EB               [12] 1168 	mov	a,r3
      000FC6 24 D6            [12] 1169 	add	a,#_u8TransBuff
      000FC8 FB               [12] 1170 	mov	r3,a
      000FC9 EC               [12] 1171 	mov	a,r4
      000FCA 34 00            [12] 1172 	addc	a,#(_u8TransBuff >> 8)
      000FCC FC               [12] 1173 	mov	r4,a
      000FCD 85 1C 82         [24] 1174 	mov	dpl,_ICP_Read_ack_65536_35
      000FD0 C0 04            [24] 1175 	push	ar4
      000FD2 C0 03            [24] 1176 	push	ar3
      000FD4 12 0D 23         [24] 1177 	lcall	_ICP_Recv
      000FD7 AF 82            [24] 1178 	mov	r7,dpl
      000FD9 D0 03            [24] 1179 	pop	ar3
      000FDB D0 04            [24] 1180 	pop	ar4
      000FDD 8B 82            [24] 1181 	mov	dpl,r3
      000FDF 8C 83            [24] 1182 	mov	dph,r4
      000FE1 EF               [12] 1183 	mov	a,r7
      000FE2 F0               [24] 1184 	movx	@dptr,a
                                   1185 ;	ICP_N76E003.c:291: }
      000FE3 22               [24] 1186 	ret
                                   1187 ;------------------------------------------------------------
                                   1188 ;Allocation info for local variables in function 'ICP_SetWire'
                                   1189 ;------------------------------------------------------------
                                   1190 ;	ICP_N76E003.c:293: void ICP_SetWire(void) {
                                   1191 ;	-----------------------------------------
                                   1192 ;	 function ICP_SetWire
                                   1193 ;	-----------------------------------------
      000FE4                       1194 _ICP_SetWire:
                                   1195 ;	ICP_N76E003.c:294: if(u8ReceiveBuff[2]) {
      000FE4 90 00 42         [24] 1196 	mov	dptr,#(_u8ReceiveBuff + 0x0002)
      000FE7 E0               [24] 1197 	movx	a,@dptr
      000FE8 60 04            [24] 1198 	jz	00102$
                                   1199 ;	ICP_N76E003.c:295: NHC_MOSI=1;
                                   1200 ;	assignBit
      000FEA D2 95            [12] 1201 	setb	_NHC_MOSI
      000FEC 80 02            [24] 1202 	sjmp	00103$
      000FEE                       1203 00102$:
                                   1204 ;	ICP_N76E003.c:297: NHC_MOSI=0;
                                   1205 ;	assignBit
      000FEE C2 95            [12] 1206 	clr	_NHC_MOSI
      000FF0                       1207 00103$:
                                   1208 ;	ICP_N76E003.c:299: if(u8ReceiveBuff[3]) {
      000FF0 90 00 43         [24] 1209 	mov	dptr,#(_u8ReceiveBuff + 0x0003)
      000FF3 E0               [24] 1210 	movx	a,@dptr
      000FF4 60 04            [24] 1211 	jz	00105$
                                   1212 ;	ICP_N76E003.c:300: NHC_SCK=1;
                                   1213 ;	assignBit
      000FF6 D2 97            [12] 1214 	setb	_NHC_SCK
      000FF8 80 02            [24] 1215 	sjmp	00106$
      000FFA                       1216 00105$:
                                   1217 ;	ICP_N76E003.c:302: NHC_SCK=0;
                                   1218 ;	assignBit
      000FFA C2 97            [12] 1219 	clr	_NHC_SCK
      000FFC                       1220 00106$:
                                   1221 ;	ICP_N76E003.c:304: if(u8ReceiveBuff[4]) {
      000FFC 90 00 44         [24] 1222 	mov	dptr,#(_u8ReceiveBuff + 0x0004)
      000FFF E0               [24] 1223 	movx	a,@dptr
      001000 60 03            [24] 1224 	jz	00108$
                                   1225 ;	ICP_N76E003.c:305: NHC_SS_PIN=1;
                                   1226 ;	assignBit
      001002 D2 B2            [12] 1227 	setb	_NHC_SS_PIN
      001004 22               [24] 1228 	ret
      001005                       1229 00108$:
                                   1230 ;	ICP_N76E003.c:307: NHC_SS_PIN=0;
                                   1231 ;	assignBit
      001005 C2 B2            [12] 1232 	clr	_NHC_SS_PIN
                                   1233 ;	ICP_N76E003.c:309: }
      001007 22               [24] 1234 	ret
                                   1235 ;------------------------------------------------------------
                                   1236 ;Allocation info for local variables in function 'ICP_Exit'
                                   1237 ;------------------------------------------------------------
                                   1238 ;	ICP_N76E003.c:311: void ICP_Exit(void) {
                                   1239 ;	-----------------------------------------
                                   1240 ;	 function ICP_Exit
                                   1241 ;	-----------------------------------------
      001008                       1242 _ICP_Exit:
                                   1243 ;	ICP_N76E003.c:315: P1_DIR_PU &= ~(1 << 5);
      001008 53 93 DF         [24] 1244 	anl	_P1_DIR_PU,#0xdf
                                   1245 ;	ICP_N76E003.c:316: NHC_MOSI = 1;
                                   1246 ;	assignBit
      00100B D2 95            [12] 1247 	setb	_NHC_MOSI
                                   1248 ;	ICP_N76E003.c:320: P1_DIR_PU &= ~(1 << 7);
      00100D 53 93 7F         [24] 1249 	anl	_P1_DIR_PU,#0x7f
                                   1250 ;	ICP_N76E003.c:321: NHC_SCK = 1;
                                   1251 ;	assignBit
      001010 D2 97            [12] 1252 	setb	_NHC_SCK
                                   1253 ;	ICP_N76E003.c:325: P3_DIR_PU &= ~(1 << 2);
      001012 53 97 FB         [24] 1254 	anl	_P3_DIR_PU,#0xfb
                                   1255 ;	ICP_N76E003.c:326: NHC_SS_PIN = 1;
                                   1256 ;	assignBit
      001015 D2 B2            [12] 1257 	setb	_NHC_SS_PIN
                                   1258 ;	ICP_N76E003.c:327: }
      001017 22               [24] 1259 	ret
                                   1260 ;------------------------------------------------------------
                                   1261 ;Allocation info for local variables in function 'ICP_FlashWrite'
                                   1262 ;------------------------------------------------------------
                                   1263 ;u8Time                    Allocated to registers r6 
                                   1264 ;n                         Allocated to registers r7 
                                   1265 ;i                         Allocated to registers r5 
                                   1266 ;j                         Allocated to registers r4 
                                   1267 ;------------------------------------------------------------
                                   1268 ;	ICP_N76E003.c:329: void ICP_FlashWrite(void) {
                                   1269 ;	-----------------------------------------
                                   1270 ;	 function ICP_FlashWrite
                                   1271 ;	-----------------------------------------
      001018                       1272 _ICP_FlashWrite:
                                   1273 ;	ICP_N76E003.c:331: n=u8ReceiveBuff[2];
      001018 90 00 42         [24] 1274 	mov	dptr,#(_u8ReceiveBuff + 0x0002)
      00101B E0               [24] 1275 	movx	a,@dptr
      00101C FF               [12] 1276 	mov	r7,a
                                   1277 ;	ICP_N76E003.c:332: u8Time=u8ReceiveBuff[3];
      00101D 90 00 43         [24] 1278 	mov	dptr,#(_u8ReceiveBuff + 0x0003)
      001020 E0               [24] 1279 	movx	a,@dptr
      001021 FE               [12] 1280 	mov	r6,a
                                   1281 ;	ICP_N76E003.c:333: for(i=0; i<n-1; ++i) {
      001022 7D 00            [12] 1282 	mov	r5,#0x00
      001024                       1283 00108$:
      001024 8F 03            [24] 1284 	mov	ar3,r7
      001026 7C 00            [12] 1285 	mov	r4,#0x00
      001028 1B               [12] 1286 	dec	r3
      001029 BB FF 01         [24] 1287 	cjne	r3,#0xff,00142$
      00102C 1C               [12] 1288 	dec	r4
      00102D                       1289 00142$:
      00102D 8D 01            [24] 1290 	mov	ar1,r5
      00102F 7A 00            [12] 1291 	mov	r2,#0x00
      001031 C3               [12] 1292 	clr	c
      001032 E9               [12] 1293 	mov	a,r1
      001033 9B               [12] 1294 	subb	a,r3
      001034 EA               [12] 1295 	mov	a,r2
      001035 64 80            [12] 1296 	xrl	a,#0x80
      001037 8C F0            [24] 1297 	mov	b,r4
      001039 63 F0 80         [24] 1298 	xrl	b,#0x80
      00103C 95 F0            [12] 1299 	subb	a,b
      00103E 50 65            [24] 1300 	jnc	00102$
                                   1301 ;	ICP_N76E003.c:334: ICP_Send(u8ReceiveBuff[i+4]);
      001040 74 04            [12] 1302 	mov	a,#0x04
      001042 29               [12] 1303 	add	a,r1
      001043 FB               [12] 1304 	mov	r3,a
      001044 E4               [12] 1305 	clr	a
      001045 3A               [12] 1306 	addc	a,r2
      001046 FC               [12] 1307 	mov	r4,a
      001047 EB               [12] 1308 	mov	a,r3
      001048 24 40            [12] 1309 	add	a,#_u8ReceiveBuff
      00104A F5 82            [12] 1310 	mov	dpl,a
      00104C EC               [12] 1311 	mov	a,r4
      00104D 34 00            [12] 1312 	addc	a,#(_u8ReceiveBuff >> 8)
      00104F F5 83            [12] 1313 	mov	dph,a
      001051 E0               [24] 1314 	movx	a,@dptr
      001052 F5 82            [12] 1315 	mov	dpl,a
      001054 C0 07            [24] 1316 	push	ar7
      001056 C0 06            [24] 1317 	push	ar6
      001058 C0 05            [24] 1318 	push	ar5
      00105A 12 0C E9         [24] 1319 	lcall	_ICP_Send
      00105D D0 05            [24] 1320 	pop	ar5
      00105F D0 06            [24] 1321 	pop	ar6
      001061 D0 07            [24] 1322 	pop	ar7
                                   1323 ;	ICP_N76E003.c:335: NHC_MOSI=0;
                                   1324 ;	assignBit
      001063 C2 95            [12] 1325 	clr	_NHC_MOSI
                                   1326 ;	ICP_N76E003.c:337: for (j=0; j<u8Time; ++j)
      001065 7C 00            [12] 1327 	mov	r4,#0x00
      001067                       1328 00105$:
      001067 C3               [12] 1329 	clr	c
      001068 EC               [12] 1330 	mov	a,r4
      001069 9E               [12] 1331 	subb	a,r6
      00106A 50 19            [24] 1332 	jnc	00101$
                                   1333 ;	ICP_N76E003.c:338: __delay_us(1);
      00106C 90 00 01         [24] 1334 	mov	dptr,#0x0001
      00106F C0 07            [24] 1335 	push	ar7
      001071 C0 06            [24] 1336 	push	ar6
      001073 C0 05            [24] 1337 	push	ar5
      001075 C0 04            [24] 1338 	push	ar4
      001077 12 00 C2         [24] 1339 	lcall	___delay_us
      00107A D0 04            [24] 1340 	pop	ar4
      00107C D0 05            [24] 1341 	pop	ar5
      00107E D0 06            [24] 1342 	pop	ar6
      001080 D0 07            [24] 1343 	pop	ar7
                                   1344 ;	ICP_N76E003.c:337: for (j=0; j<u8Time; ++j)
      001082 0C               [12] 1345 	inc	r4
      001083 80 E2            [24] 1346 	sjmp	00105$
      001085                       1347 00101$:
                                   1348 ;	ICP_N76E003.c:340: __delay_us(1);
      001085 90 00 01         [24] 1349 	mov	dptr,#0x0001
      001088 C0 07            [24] 1350 	push	ar7
      00108A C0 06            [24] 1351 	push	ar6
      00108C C0 05            [24] 1352 	push	ar5
      00108E 12 00 C2         [24] 1353 	lcall	___delay_us
                                   1354 ;	ICP_N76E003.c:341: NHC_SCK=1;
                                   1355 ;	assignBit
      001091 D2 97            [12] 1356 	setb	_NHC_SCK
                                   1357 ;	ICP_N76E003.c:343: __delay_us(1);
      001093 90 00 01         [24] 1358 	mov	dptr,#0x0001
      001096 12 00 C2         [24] 1359 	lcall	___delay_us
      001099 D0 05            [24] 1360 	pop	ar5
      00109B D0 06            [24] 1361 	pop	ar6
      00109D D0 07            [24] 1362 	pop	ar7
                                   1363 ;	ICP_N76E003.c:344: NHC_SCK=0;
                                   1364 ;	assignBit
      00109F C2 97            [12] 1365 	clr	_NHC_SCK
                                   1366 ;	ICP_N76E003.c:333: for(i=0; i<n-1; ++i) {
      0010A1 0D               [12] 1367 	inc	r5
      0010A2 02 10 24         [24] 1368 	ljmp	00108$
      0010A5                       1369 00102$:
                                   1370 ;	ICP_N76E003.c:346: ICP_Send(u8ReceiveBuff[i+4]);
      0010A5 74 04            [12] 1371 	mov	a,#0x04
      0010A7 29               [12] 1372 	add	a,r1
      0010A8 F9               [12] 1373 	mov	r1,a
      0010A9 E4               [12] 1374 	clr	a
      0010AA 3A               [12] 1375 	addc	a,r2
      0010AB FA               [12] 1376 	mov	r2,a
      0010AC E9               [12] 1377 	mov	a,r1
      0010AD 24 40            [12] 1378 	add	a,#_u8ReceiveBuff
      0010AF F5 82            [12] 1379 	mov	dpl,a
      0010B1 EA               [12] 1380 	mov	a,r2
      0010B2 34 00            [12] 1381 	addc	a,#(_u8ReceiveBuff >> 8)
      0010B4 F5 83            [12] 1382 	mov	dph,a
      0010B6 E0               [24] 1383 	movx	a,@dptr
      0010B7 F5 82            [12] 1384 	mov	dpl,a
      0010B9 C0 06            [24] 1385 	push	ar6
      0010BB 12 0C E9         [24] 1386 	lcall	_ICP_Send
      0010BE D0 06            [24] 1387 	pop	ar6
                                   1388 ;	ICP_N76E003.c:347: NHC_MOSI=0;
                                   1389 ;	assignBit
      0010C0 C2 95            [12] 1390 	clr	_NHC_MOSI
                                   1391 ;	ICP_N76E003.c:349: for (j=0; j<u8Time; ++j)
      0010C2 7F 00            [12] 1392 	mov	r7,#0x00
      0010C4                       1393 00111$:
      0010C4 C3               [12] 1394 	clr	c
      0010C5 EF               [12] 1395 	mov	a,r7
      0010C6 9E               [12] 1396 	subb	a,r6
      0010C7 50 11            [24] 1397 	jnc	00103$
                                   1398 ;	ICP_N76E003.c:350: __delay_us(1);
      0010C9 90 00 01         [24] 1399 	mov	dptr,#0x0001
      0010CC C0 07            [24] 1400 	push	ar7
      0010CE C0 06            [24] 1401 	push	ar6
      0010D0 12 00 C2         [24] 1402 	lcall	___delay_us
      0010D3 D0 06            [24] 1403 	pop	ar6
      0010D5 D0 07            [24] 1404 	pop	ar7
                                   1405 ;	ICP_N76E003.c:349: for (j=0; j<u8Time; ++j)
      0010D7 0F               [12] 1406 	inc	r7
      0010D8 80 EA            [24] 1407 	sjmp	00111$
      0010DA                       1408 00103$:
                                   1409 ;	ICP_N76E003.c:351: NHC_MOSI=1;
                                   1410 ;	assignBit
      0010DA D2 95            [12] 1411 	setb	_NHC_MOSI
                                   1412 ;	ICP_N76E003.c:353: __delay_us(1);
      0010DC 90 00 01         [24] 1413 	mov	dptr,#0x0001
      0010DF 12 00 C2         [24] 1414 	lcall	___delay_us
                                   1415 ;	ICP_N76E003.c:354: NHC_SCK=1;
                                   1416 ;	assignBit
      0010E2 D2 97            [12] 1417 	setb	_NHC_SCK
                                   1418 ;	ICP_N76E003.c:356: __delay_us(1);
      0010E4 90 00 01         [24] 1419 	mov	dptr,#0x0001
      0010E7 12 00 C2         [24] 1420 	lcall	___delay_us
                                   1421 ;	ICP_N76E003.c:357: NHC_SCK=0;
                                   1422 ;	assignBit
      0010EA C2 97            [12] 1423 	clr	_NHC_SCK
                                   1424 ;	ICP_N76E003.c:358: }
      0010EC 22               [24] 1425 	ret
                                   1426 ;------------------------------------------------------------
                                   1427 ;Allocation info for local variables in function 'ICP_FlashRead'
                                   1428 ;------------------------------------------------------------
                                   1429 ;	ICP_N76E003.c:359: void ICP_FlashRead(void) {
                                   1430 ;	-----------------------------------------
                                   1431 ;	 function ICP_FlashRead
                                   1432 ;	-----------------------------------------
      0010ED                       1433 _ICP_FlashRead:
                                   1434 ;	ICP_N76E003.c:361: }
      0010ED 22               [24] 1435 	ret
                                   1436 	.area CSEG    (CODE)
                                   1437 	.area CONST   (CODE)
                                   1438 	.area XINIT   (CODE)
                                   1439 	.area CABS    (ABS,CODE)
