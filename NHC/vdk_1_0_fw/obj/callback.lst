                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.0 #11195 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module callback
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _Delay_Ms
                                     12 	.globl _C2_ReadFlash
                                     13 	.globl _C2_WriteFlash
                                     14 	.globl _C2_ReadAR
                                     15 	.globl _C2_WriteAR
                                     16 	.globl _C2_WriteDR
                                     17 	.globl _C2_ReadDR
                                     18 	.globl _C2_Reset
                                     19 	.globl _C2_Exit
                                     20 	.globl _C2_Init
                                     21 	.globl _ICP_FlashWrite
                                     22 	.globl _ICP_SetWire
                                     23 	.globl _ICP_Enter
                                     24 	.globl _ICP_Read
                                     25 	.globl _ICP_Write
                                     26 	.globl _ICP_Exit
                                     27 	.globl _ICP_Init
                                     28 	.globl _ispReadEeprom
                                     29 	.globl _ispReadAvrHi
                                     30 	.globl _ispReadAvrLo
                                     31 	.globl _FindNotBlank
                                     32 	.globl _ispWriteFlashPage
                                     33 	.globl _ispWriteFlashByte
                                     34 	.globl _ispWriteEeprom
                                     35 	.globl _ispReadFlash
                                     36 	.globl _spi_send
                                     37 	.globl _spi_init
                                     38 	.globl _UIF_BUS_RST
                                     39 	.globl _UIF_DETECT
                                     40 	.globl _UIF_TRANSFER
                                     41 	.globl _UIF_SUSPEND
                                     42 	.globl _UIF_HST_SOF
                                     43 	.globl _UIF_FIFO_OV
                                     44 	.globl _U_SIE_FREE
                                     45 	.globl _U_TOG_OK
                                     46 	.globl _U_IS_NAK
                                     47 	.globl _ADC_CHAN0
                                     48 	.globl _ADC_CHAN1
                                     49 	.globl _CMP_CHAN
                                     50 	.globl _ADC_START
                                     51 	.globl _ADC_IF
                                     52 	.globl _CMP_IF
                                     53 	.globl _CMPO
                                     54 	.globl _U1RI
                                     55 	.globl _U1TI
                                     56 	.globl _U1RB8
                                     57 	.globl _U1TB8
                                     58 	.globl _U1REN
                                     59 	.globl _U1SMOD
                                     60 	.globl _U1SM0
                                     61 	.globl _S0_R_FIFO
                                     62 	.globl _S0_T_FIFO
                                     63 	.globl _S0_FREE
                                     64 	.globl _S0_IF_BYTE
                                     65 	.globl _S0_IF_FIRST
                                     66 	.globl _S0_IF_OV
                                     67 	.globl _S0_FST_ACT
                                     68 	.globl _CP_RL2
                                     69 	.globl _C_T2
                                     70 	.globl _TR2
                                     71 	.globl _EXEN2
                                     72 	.globl _TCLK
                                     73 	.globl _RCLK
                                     74 	.globl _EXF2
                                     75 	.globl _CAP1F
                                     76 	.globl _TF2
                                     77 	.globl _RI
                                     78 	.globl _TI
                                     79 	.globl _RB8
                                     80 	.globl _TB8
                                     81 	.globl _REN
                                     82 	.globl _SM2
                                     83 	.globl _SM1
                                     84 	.globl _SM0
                                     85 	.globl _IT0
                                     86 	.globl _IE0
                                     87 	.globl _IT1
                                     88 	.globl _IE1
                                     89 	.globl _TR0
                                     90 	.globl _TF0
                                     91 	.globl _TR1
                                     92 	.globl _TF1
                                     93 	.globl _RXD
                                     94 	.globl _PWM1_
                                     95 	.globl _TXD
                                     96 	.globl _PWM2_
                                     97 	.globl _AIN3
                                     98 	.globl _VBUS1
                                     99 	.globl _INT0
                                    100 	.globl _TXD1_
                                    101 	.globl _INT1
                                    102 	.globl _T0
                                    103 	.globl _RXD1_
                                    104 	.globl _PWM2
                                    105 	.globl _T1
                                    106 	.globl _UDP
                                    107 	.globl _UDM
                                    108 	.globl _TIN0
                                    109 	.globl _CAP1
                                    110 	.globl _T2
                                    111 	.globl _AIN0
                                    112 	.globl _VBUS2
                                    113 	.globl _TIN1
                                    114 	.globl _CAP2
                                    115 	.globl _T2EX
                                    116 	.globl _RXD_
                                    117 	.globl _TXD_
                                    118 	.globl _AIN1
                                    119 	.globl _UCC1
                                    120 	.globl _TIN2
                                    121 	.globl _SCS
                                    122 	.globl _CAP1_
                                    123 	.globl _T2_
                                    124 	.globl _AIN2
                                    125 	.globl _UCC2
                                    126 	.globl _TIN3
                                    127 	.globl _PWM1
                                    128 	.globl _MOSI
                                    129 	.globl _TIN4
                                    130 	.globl _RXD1
                                    131 	.globl _MISO
                                    132 	.globl _TIN5
                                    133 	.globl _TXD1
                                    134 	.globl _SCK
                                    135 	.globl _IE_SPI0
                                    136 	.globl _IE_TKEY
                                    137 	.globl _IE_USB
                                    138 	.globl _IE_ADC
                                    139 	.globl _IE_UART1
                                    140 	.globl _IE_PWMX
                                    141 	.globl _IE_GPIO
                                    142 	.globl _IE_WDOG
                                    143 	.globl _PX0
                                    144 	.globl _PT0
                                    145 	.globl _PX1
                                    146 	.globl _PT1
                                    147 	.globl _PS
                                    148 	.globl _PT2
                                    149 	.globl _PL_FLAG
                                    150 	.globl _PH_FLAG
                                    151 	.globl _EX0
                                    152 	.globl _ET0
                                    153 	.globl _EX1
                                    154 	.globl _ET1
                                    155 	.globl _ES
                                    156 	.globl _ET2
                                    157 	.globl _E_DIS
                                    158 	.globl _EA
                                    159 	.globl _P
                                    160 	.globl _F1
                                    161 	.globl _OV
                                    162 	.globl _RS0
                                    163 	.globl _RS1
                                    164 	.globl _F0
                                    165 	.globl _AC
                                    166 	.globl _CY
                                    167 	.globl _UEP1_DMA_H
                                    168 	.globl _UEP1_DMA_L
                                    169 	.globl _UEP1_DMA
                                    170 	.globl _UEP0_DMA_H
                                    171 	.globl _UEP0_DMA_L
                                    172 	.globl _UEP0_DMA
                                    173 	.globl _UEP2_3_MOD
                                    174 	.globl _UEP4_1_MOD
                                    175 	.globl _UEP3_DMA_H
                                    176 	.globl _UEP3_DMA_L
                                    177 	.globl _UEP3_DMA
                                    178 	.globl _UEP2_DMA_H
                                    179 	.globl _UEP2_DMA_L
                                    180 	.globl _UEP2_DMA
                                    181 	.globl _USB_DEV_AD
                                    182 	.globl _USB_CTRL
                                    183 	.globl _USB_INT_EN
                                    184 	.globl _UEP4_T_LEN
                                    185 	.globl _UEP4_CTRL
                                    186 	.globl _UEP0_T_LEN
                                    187 	.globl _UEP0_CTRL
                                    188 	.globl _USB_RX_LEN
                                    189 	.globl _USB_MIS_ST
                                    190 	.globl _USB_INT_ST
                                    191 	.globl _USB_INT_FG
                                    192 	.globl _UEP3_T_LEN
                                    193 	.globl _UEP3_CTRL
                                    194 	.globl _UEP2_T_LEN
                                    195 	.globl _UEP2_CTRL
                                    196 	.globl _UEP1_T_LEN
                                    197 	.globl _UEP1_CTRL
                                    198 	.globl _UDEV_CTRL
                                    199 	.globl _USB_C_CTRL
                                    200 	.globl _TKEY_DATH
                                    201 	.globl _TKEY_DATL
                                    202 	.globl _TKEY_DAT
                                    203 	.globl _TKEY_CTRL
                                    204 	.globl _ADC_DATA
                                    205 	.globl _ADC_CFG
                                    206 	.globl _ADC_CTRL
                                    207 	.globl _SBAUD1
                                    208 	.globl _SBUF1
                                    209 	.globl _SCON1
                                    210 	.globl _SPI0_SETUP
                                    211 	.globl _SPI0_CK_SE
                                    212 	.globl _SPI0_CTRL
                                    213 	.globl _SPI0_DATA
                                    214 	.globl _SPI0_STAT
                                    215 	.globl _PWM_CK_SE
                                    216 	.globl _PWM_CTRL
                                    217 	.globl _PWM_DATA1
                                    218 	.globl _PWM_DATA2
                                    219 	.globl _T2CAP1H
                                    220 	.globl _T2CAP1L
                                    221 	.globl _T2CAP1
                                    222 	.globl _TH2
                                    223 	.globl _TL2
                                    224 	.globl _T2COUNT
                                    225 	.globl _RCAP2H
                                    226 	.globl _RCAP2L
                                    227 	.globl _RCAP2
                                    228 	.globl _T2MOD
                                    229 	.globl _T2CON
                                    230 	.globl _SBUF
                                    231 	.globl _SCON
                                    232 	.globl _TH1
                                    233 	.globl _TH0
                                    234 	.globl _TL1
                                    235 	.globl _TL0
                                    236 	.globl _TMOD
                                    237 	.globl _TCON
                                    238 	.globl _XBUS_AUX
                                    239 	.globl _PIN_FUNC
                                    240 	.globl _P3_DIR_PU
                                    241 	.globl _P3_MOD_OC
                                    242 	.globl _P3
                                    243 	.globl _P2
                                    244 	.globl _P1_DIR_PU
                                    245 	.globl _P1_MOD_OC
                                    246 	.globl _P1
                                    247 	.globl _ROM_CTRL
                                    248 	.globl _ROM_DATA_H
                                    249 	.globl _ROM_DATA_L
                                    250 	.globl _ROM_DATA
                                    251 	.globl _ROM_ADDR_H
                                    252 	.globl _ROM_ADDR_L
                                    253 	.globl _ROM_ADDR
                                    254 	.globl _GPIO_IE
                                    255 	.globl _IP_EX
                                    256 	.globl _IE_EX
                                    257 	.globl _IP
                                    258 	.globl _IE
                                    259 	.globl _WDOG_COUNT
                                    260 	.globl _RESET_KEEP
                                    261 	.globl _WAKE_CTRL
                                    262 	.globl _CLOCK_CFG
                                    263 	.globl _PCON
                                    264 	.globl _GLOBAL_CFG
                                    265 	.globl _SAFE_MOD
                                    266 	.globl _DPH
                                    267 	.globl _DPL
                                    268 	.globl _SP
                                    269 	.globl _B
                                    270 	.globl _ACC
                                    271 	.globl _PSW
                                    272 	.globl _u8Pos
                                    273 	.globl _u8NeedFind
                                    274 	.globl _u8NumPage
                                    275 	.globl _u16PageSize
                                    276 	.globl _u8ExtAddr
                                    277 	.globl _u16Addr
                                    278 	.globl _u32Addr
                                    279 	.globl _EP0_Out_CallBack
                                    280 ;--------------------------------------------------------
                                    281 ; special function registers
                                    282 ;--------------------------------------------------------
                                    283 	.area RSEG    (ABS,DATA)
      000000                        284 	.org 0x0000
                           0000D0   285 _PSW	=	0x00d0
                           0000E0   286 _ACC	=	0x00e0
                           0000F0   287 _B	=	0x00f0
                           000081   288 _SP	=	0x0081
                           000082   289 _DPL	=	0x0082
                           000083   290 _DPH	=	0x0083
                           0000A1   291 _SAFE_MOD	=	0x00a1
                           0000B1   292 _GLOBAL_CFG	=	0x00b1
                           000087   293 _PCON	=	0x0087
                           0000B9   294 _CLOCK_CFG	=	0x00b9
                           0000A9   295 _WAKE_CTRL	=	0x00a9
                           0000FE   296 _RESET_KEEP	=	0x00fe
                           0000FF   297 _WDOG_COUNT	=	0x00ff
                           0000A8   298 _IE	=	0x00a8
                           0000B8   299 _IP	=	0x00b8
                           0000E8   300 _IE_EX	=	0x00e8
                           0000E9   301 _IP_EX	=	0x00e9
                           0000C7   302 _GPIO_IE	=	0x00c7
                           008584   303 _ROM_ADDR	=	0x8584
                           000084   304 _ROM_ADDR_L	=	0x0084
                           000085   305 _ROM_ADDR_H	=	0x0085
                           008F8E   306 _ROM_DATA	=	0x8f8e
                           00008E   307 _ROM_DATA_L	=	0x008e
                           00008F   308 _ROM_DATA_H	=	0x008f
                           000086   309 _ROM_CTRL	=	0x0086
                           000090   310 _P1	=	0x0090
                           000092   311 _P1_MOD_OC	=	0x0092
                           000093   312 _P1_DIR_PU	=	0x0093
                           0000A0   313 _P2	=	0x00a0
                           0000B0   314 _P3	=	0x00b0
                           000096   315 _P3_MOD_OC	=	0x0096
                           000097   316 _P3_DIR_PU	=	0x0097
                           0000C6   317 _PIN_FUNC	=	0x00c6
                           0000A2   318 _XBUS_AUX	=	0x00a2
                           000088   319 _TCON	=	0x0088
                           000089   320 _TMOD	=	0x0089
                           00008A   321 _TL0	=	0x008a
                           00008B   322 _TL1	=	0x008b
                           00008C   323 _TH0	=	0x008c
                           00008D   324 _TH1	=	0x008d
                           000098   325 _SCON	=	0x0098
                           000099   326 _SBUF	=	0x0099
                           0000C8   327 _T2CON	=	0x00c8
                           0000C9   328 _T2MOD	=	0x00c9
                           00CBCA   329 _RCAP2	=	0xcbca
                           0000CA   330 _RCAP2L	=	0x00ca
                           0000CB   331 _RCAP2H	=	0x00cb
                           00CDCC   332 _T2COUNT	=	0xcdcc
                           0000CC   333 _TL2	=	0x00cc
                           0000CD   334 _TH2	=	0x00cd
                           00CFCE   335 _T2CAP1	=	0xcfce
                           0000CE   336 _T2CAP1L	=	0x00ce
                           0000CF   337 _T2CAP1H	=	0x00cf
                           00009B   338 _PWM_DATA2	=	0x009b
                           00009C   339 _PWM_DATA1	=	0x009c
                           00009D   340 _PWM_CTRL	=	0x009d
                           00009E   341 _PWM_CK_SE	=	0x009e
                           0000F8   342 _SPI0_STAT	=	0x00f8
                           0000F9   343 _SPI0_DATA	=	0x00f9
                           0000FA   344 _SPI0_CTRL	=	0x00fa
                           0000FB   345 _SPI0_CK_SE	=	0x00fb
                           0000FC   346 _SPI0_SETUP	=	0x00fc
                           0000C0   347 _SCON1	=	0x00c0
                           0000C1   348 _SBUF1	=	0x00c1
                           0000C2   349 _SBAUD1	=	0x00c2
                           000080   350 _ADC_CTRL	=	0x0080
                           00009A   351 _ADC_CFG	=	0x009a
                           00009F   352 _ADC_DATA	=	0x009f
                           0000C3   353 _TKEY_CTRL	=	0x00c3
                           00C5C4   354 _TKEY_DAT	=	0xc5c4
                           0000C4   355 _TKEY_DATL	=	0x00c4
                           0000C5   356 _TKEY_DATH	=	0x00c5
                           000091   357 _USB_C_CTRL	=	0x0091
                           0000D1   358 _UDEV_CTRL	=	0x00d1
                           0000D2   359 _UEP1_CTRL	=	0x00d2
                           0000D3   360 _UEP1_T_LEN	=	0x00d3
                           0000D4   361 _UEP2_CTRL	=	0x00d4
                           0000D5   362 _UEP2_T_LEN	=	0x00d5
                           0000D6   363 _UEP3_CTRL	=	0x00d6
                           0000D7   364 _UEP3_T_LEN	=	0x00d7
                           0000D8   365 _USB_INT_FG	=	0x00d8
                           0000D9   366 _USB_INT_ST	=	0x00d9
                           0000DA   367 _USB_MIS_ST	=	0x00da
                           0000DB   368 _USB_RX_LEN	=	0x00db
                           0000DC   369 _UEP0_CTRL	=	0x00dc
                           0000DD   370 _UEP0_T_LEN	=	0x00dd
                           0000DE   371 _UEP4_CTRL	=	0x00de
                           0000DF   372 _UEP4_T_LEN	=	0x00df
                           0000E1   373 _USB_INT_EN	=	0x00e1
                           0000E2   374 _USB_CTRL	=	0x00e2
                           0000E3   375 _USB_DEV_AD	=	0x00e3
                           00E5E4   376 _UEP2_DMA	=	0xe5e4
                           0000E4   377 _UEP2_DMA_L	=	0x00e4
                           0000E5   378 _UEP2_DMA_H	=	0x00e5
                           00E7E6   379 _UEP3_DMA	=	0xe7e6
                           0000E6   380 _UEP3_DMA_L	=	0x00e6
                           0000E7   381 _UEP3_DMA_H	=	0x00e7
                           0000EA   382 _UEP4_1_MOD	=	0x00ea
                           0000EB   383 _UEP2_3_MOD	=	0x00eb
                           00EDEC   384 _UEP0_DMA	=	0xedec
                           0000EC   385 _UEP0_DMA_L	=	0x00ec
                           0000ED   386 _UEP0_DMA_H	=	0x00ed
                           00EFEE   387 _UEP1_DMA	=	0xefee
                           0000EE   388 _UEP1_DMA_L	=	0x00ee
                           0000EF   389 _UEP1_DMA_H	=	0x00ef
                                    390 ;--------------------------------------------------------
                                    391 ; special function bits
                                    392 ;--------------------------------------------------------
                                    393 	.area RSEG    (ABS,DATA)
      000000                        394 	.org 0x0000
                           0000D7   395 _CY	=	0x00d7
                           0000D6   396 _AC	=	0x00d6
                           0000D5   397 _F0	=	0x00d5
                           0000D4   398 _RS1	=	0x00d4
                           0000D3   399 _RS0	=	0x00d3
                           0000D2   400 _OV	=	0x00d2
                           0000D1   401 _F1	=	0x00d1
                           0000D0   402 _P	=	0x00d0
                           0000AF   403 _EA	=	0x00af
                           0000AE   404 _E_DIS	=	0x00ae
                           0000AD   405 _ET2	=	0x00ad
                           0000AC   406 _ES	=	0x00ac
                           0000AB   407 _ET1	=	0x00ab
                           0000AA   408 _EX1	=	0x00aa
                           0000A9   409 _ET0	=	0x00a9
                           0000A8   410 _EX0	=	0x00a8
                           0000BF   411 _PH_FLAG	=	0x00bf
                           0000BE   412 _PL_FLAG	=	0x00be
                           0000BD   413 _PT2	=	0x00bd
                           0000BC   414 _PS	=	0x00bc
                           0000BB   415 _PT1	=	0x00bb
                           0000BA   416 _PX1	=	0x00ba
                           0000B9   417 _PT0	=	0x00b9
                           0000B8   418 _PX0	=	0x00b8
                           0000EF   419 _IE_WDOG	=	0x00ef
                           0000EE   420 _IE_GPIO	=	0x00ee
                           0000ED   421 _IE_PWMX	=	0x00ed
                           0000EC   422 _IE_UART1	=	0x00ec
                           0000EB   423 _IE_ADC	=	0x00eb
                           0000EA   424 _IE_USB	=	0x00ea
                           0000E9   425 _IE_TKEY	=	0x00e9
                           0000E8   426 _IE_SPI0	=	0x00e8
                           000097   427 _SCK	=	0x0097
                           000097   428 _TXD1	=	0x0097
                           000097   429 _TIN5	=	0x0097
                           000096   430 _MISO	=	0x0096
                           000096   431 _RXD1	=	0x0096
                           000096   432 _TIN4	=	0x0096
                           000095   433 _MOSI	=	0x0095
                           000095   434 _PWM1	=	0x0095
                           000095   435 _TIN3	=	0x0095
                           000095   436 _UCC2	=	0x0095
                           000095   437 _AIN2	=	0x0095
                           000094   438 _T2_	=	0x0094
                           000094   439 _CAP1_	=	0x0094
                           000094   440 _SCS	=	0x0094
                           000094   441 _TIN2	=	0x0094
                           000094   442 _UCC1	=	0x0094
                           000094   443 _AIN1	=	0x0094
                           000093   444 _TXD_	=	0x0093
                           000092   445 _RXD_	=	0x0092
                           000091   446 _T2EX	=	0x0091
                           000091   447 _CAP2	=	0x0091
                           000091   448 _TIN1	=	0x0091
                           000091   449 _VBUS2	=	0x0091
                           000091   450 _AIN0	=	0x0091
                           000090   451 _T2	=	0x0090
                           000090   452 _CAP1	=	0x0090
                           000090   453 _TIN0	=	0x0090
                           0000B7   454 _UDM	=	0x00b7
                           0000B6   455 _UDP	=	0x00b6
                           0000B5   456 _T1	=	0x00b5
                           0000B4   457 _PWM2	=	0x00b4
                           0000B4   458 _RXD1_	=	0x00b4
                           0000B4   459 _T0	=	0x00b4
                           0000B3   460 _INT1	=	0x00b3
                           0000B2   461 _TXD1_	=	0x00b2
                           0000B2   462 _INT0	=	0x00b2
                           0000B2   463 _VBUS1	=	0x00b2
                           0000B2   464 _AIN3	=	0x00b2
                           0000B1   465 _PWM2_	=	0x00b1
                           0000B1   466 _TXD	=	0x00b1
                           0000B0   467 _PWM1_	=	0x00b0
                           0000B0   468 _RXD	=	0x00b0
                           00008F   469 _TF1	=	0x008f
                           00008E   470 _TR1	=	0x008e
                           00008D   471 _TF0	=	0x008d
                           00008C   472 _TR0	=	0x008c
                           00008B   473 _IE1	=	0x008b
                           00008A   474 _IT1	=	0x008a
                           000089   475 _IE0	=	0x0089
                           000088   476 _IT0	=	0x0088
                           00009F   477 _SM0	=	0x009f
                           00009E   478 _SM1	=	0x009e
                           00009D   479 _SM2	=	0x009d
                           00009C   480 _REN	=	0x009c
                           00009B   481 _TB8	=	0x009b
                           00009A   482 _RB8	=	0x009a
                           000099   483 _TI	=	0x0099
                           000098   484 _RI	=	0x0098
                           0000CF   485 _TF2	=	0x00cf
                           0000CF   486 _CAP1F	=	0x00cf
                           0000CE   487 _EXF2	=	0x00ce
                           0000CD   488 _RCLK	=	0x00cd
                           0000CC   489 _TCLK	=	0x00cc
                           0000CB   490 _EXEN2	=	0x00cb
                           0000CA   491 _TR2	=	0x00ca
                           0000C9   492 _C_T2	=	0x00c9
                           0000C8   493 _CP_RL2	=	0x00c8
                           0000FF   494 _S0_FST_ACT	=	0x00ff
                           0000FE   495 _S0_IF_OV	=	0x00fe
                           0000FD   496 _S0_IF_FIRST	=	0x00fd
                           0000FC   497 _S0_IF_BYTE	=	0x00fc
                           0000FB   498 _S0_FREE	=	0x00fb
                           0000FA   499 _S0_T_FIFO	=	0x00fa
                           0000F8   500 _S0_R_FIFO	=	0x00f8
                           0000C7   501 _U1SM0	=	0x00c7
                           0000C5   502 _U1SMOD	=	0x00c5
                           0000C4   503 _U1REN	=	0x00c4
                           0000C3   504 _U1TB8	=	0x00c3
                           0000C2   505 _U1RB8	=	0x00c2
                           0000C1   506 _U1TI	=	0x00c1
                           0000C0   507 _U1RI	=	0x00c0
                           000087   508 _CMPO	=	0x0087
                           000086   509 _CMP_IF	=	0x0086
                           000085   510 _ADC_IF	=	0x0085
                           000084   511 _ADC_START	=	0x0084
                           000083   512 _CMP_CHAN	=	0x0083
                           000081   513 _ADC_CHAN1	=	0x0081
                           000080   514 _ADC_CHAN0	=	0x0080
                           0000DF   515 _U_IS_NAK	=	0x00df
                           0000DE   516 _U_TOG_OK	=	0x00de
                           0000DD   517 _U_SIE_FREE	=	0x00dd
                           0000DC   518 _UIF_FIFO_OV	=	0x00dc
                           0000DB   519 _UIF_HST_SOF	=	0x00db
                           0000DA   520 _UIF_SUSPEND	=	0x00da
                           0000D9   521 _UIF_TRANSFER	=	0x00d9
                           0000D8   522 _UIF_DETECT	=	0x00d8
                           0000D8   523 _UIF_BUS_RST	=	0x00d8
                           0000B2   524 _rst	=	0x00b2
                                    525 ;--------------------------------------------------------
                                    526 ; overlayable register banks
                                    527 ;--------------------------------------------------------
                                    528 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        529 	.ds 8
                                    530 ;--------------------------------------------------------
                                    531 ; internal ram data
                                    532 ;--------------------------------------------------------
                                    533 	.area DSEG    (DATA)
      000000                        534 _u32Addr::
      000000                        535 	.ds 4
      000004                        536 _u16Addr::
      000004                        537 	.ds 2
      000006                        538 _u8ExtAddr::
      000006                        539 	.ds 1
      000007                        540 _u16PageSize::
      000007                        541 	.ds 2
      000009                        542 _u8NumPage::
      000009                        543 	.ds 1
      00000A                        544 _u8NeedFind::
      00000A                        545 	.ds 1
      00000B                        546 _u8Pos::
      00000B                        547 	.ds 1
      00000C                        548 _EP0_Out_CallBack_u8Ret_65536_36:
      00000C                        549 	.ds 1
                                    550 ;--------------------------------------------------------
                                    551 ; overlayable items in internal ram 
                                    552 ;--------------------------------------------------------
                                    553 ;--------------------------------------------------------
                                    554 ; indirectly addressable internal ram data
                                    555 ;--------------------------------------------------------
                                    556 	.area ISEG    (DATA)
                                    557 ;--------------------------------------------------------
                                    558 ; absolute internal ram data
                                    559 ;--------------------------------------------------------
                                    560 	.area IABS    (ABS,DATA)
                                    561 	.area IABS    (ABS,DATA)
                                    562 ;--------------------------------------------------------
                                    563 ; bit data
                                    564 ;--------------------------------------------------------
                                    565 	.area BSEG    (BIT)
                                    566 ;--------------------------------------------------------
                                    567 ; paged external ram data
                                    568 ;--------------------------------------------------------
                                    569 	.area PSEG    (PAG,XDATA)
                                    570 ;--------------------------------------------------------
                                    571 ; external ram data
                                    572 ;--------------------------------------------------------
                                    573 	.area XSEG    (XDATA)
                                    574 ;--------------------------------------------------------
                                    575 ; absolute external ram data
                                    576 ;--------------------------------------------------------
                                    577 	.area XABS    (ABS,XDATA)
                                    578 ;--------------------------------------------------------
                                    579 ; external initialized ram data
                                    580 ;--------------------------------------------------------
                                    581 	.area XISEG   (XDATA)
                                    582 	.area HOME    (CODE)
                                    583 	.area GSINIT0 (CODE)
                                    584 	.area GSINIT1 (CODE)
                                    585 	.area GSINIT2 (CODE)
                                    586 	.area GSINIT3 (CODE)
                                    587 	.area GSINIT4 (CODE)
                                    588 	.area GSINIT5 (CODE)
                                    589 	.area GSINIT  (CODE)
                                    590 	.area GSFINAL (CODE)
                                    591 	.area CSEG    (CODE)
                                    592 ;--------------------------------------------------------
                                    593 ; global & static initialisations
                                    594 ;--------------------------------------------------------
                                    595 	.area HOME    (CODE)
                                    596 	.area GSINIT  (CODE)
                                    597 	.area GSFINAL (CODE)
                                    598 	.area GSINIT  (CODE)
                                    599 ;--------------------------------------------------------
                                    600 ; Home
                                    601 ;--------------------------------------------------------
                                    602 	.area HOME    (CODE)
                                    603 	.area HOME    (CODE)
                                    604 ;--------------------------------------------------------
                                    605 ; code
                                    606 ;--------------------------------------------------------
                                    607 	.area CSEG    (CODE)
                                    608 ;------------------------------------------------------------
                                    609 ;Allocation info for local variables in function 'EP0_Out_CallBack'
                                    610 ;------------------------------------------------------------
                                    611 ;i                         Allocated to registers r6 r7 
                                    612 ;u8Ret                     Allocated with name '_EP0_Out_CallBack_u8Ret_65536_36'
                                    613 ;u32Tmp                    Allocated to registers r7 r6 r5 r4 
                                    614 ;------------------------------------------------------------
                                    615 ;	callback.c:23: void EP0_Out_CallBack(void)
                                    616 ;	-----------------------------------------
                                    617 ;	 function EP0_Out_CallBack
                                    618 ;	-----------------------------------------
      000000                        619 _EP0_Out_CallBack:
                           000007   620 	ar7 = 0x07
                           000006   621 	ar6 = 0x06
                           000005   622 	ar5 = 0x05
                           000004   623 	ar4 = 0x04
                           000003   624 	ar3 = 0x03
                           000002   625 	ar2 = 0x02
                           000001   626 	ar1 = 0x01
                           000000   627 	ar0 = 0x00
                                    628 ;	callback.c:29: switch (u8ReceiveBuff[0]) {
      000000 90r00r00         [24]  629 	mov	dptr,#_u8ReceiveBuff
      000003 E0               [24]  630 	movx	a,@dptr
      000004 FF               [12]  631 	mov	r7,a
      000005 BF 01 02         [24]  632 	cjne	r7,#0x01,00653$
      000008 80 0D            [24]  633 	sjmp	00101$
      00000A                        634 00653$:
      00000A BF 02 03         [24]  635 	cjne	r7,#0x02,00654$
      00000D 02r04r0B         [24]  636 	ljmp	00157$
      000010                        637 00654$:
      000010 BF 04 03         [24]  638 	cjne	r7,#0x04,00655$
      000013 02r08rB7         [24]  639 	ljmp	00204$
      000016                        640 00655$:
      000016 22               [24]  641 	ret
                                    642 ;	callback.c:31: case 0x01:
      000017                        643 00101$:
                                    644 ;	callback.c:35: if (u8Chip == CHIP_C2) {
      000017 74 02            [12]  645 	mov	a,#0x02
      000019 B5*00 02         [24]  646 	cjne	a,_u8Chip,00656$
      00001C 80 03            [24]  647 	sjmp	00657$
      00001E                        648 00656$:
      00001E 02r00rB0         [24]  649 	ljmp	00105$
      000021                        650 00657$:
                                    651 ;	callback.c:36: u32Tmp = u8ReceiveBuff[5];
      000021 90r00r05         [24]  652 	mov	dptr,#(_u8ReceiveBuff + 0x0005)
      000024 E0               [24]  653 	movx	a,@dptr
      000025 FF               [12]  654 	mov	r7,a
      000026 7E 00            [12]  655 	mov	r6,#0x00
                                    656 ;	callback.c:37: u32Tmp <<= 24;
      000028 8F*03            [24]  657 	mov	(_u32Addr + 3),r7
                                    658 ;	1-genFromRTrack replaced	mov	_u32Addr,#0x00
      00002A 8E*00            [24]  659 	mov	_u32Addr,r6
                                    660 ;	1-genFromRTrack replaced	mov	(_u32Addr + 1),#0x00
      00002C 8E*01            [24]  661 	mov	(_u32Addr + 1),r6
                                    662 ;	1-genFromRTrack replaced	mov	(_u32Addr + 2),#0x00
      00002E 8E*02            [24]  663 	mov	(_u32Addr + 2),r6
                                    664 ;	callback.c:39: u32Tmp = u8ReceiveBuff[4];
      000030 90r00r04         [24]  665 	mov	dptr,#(_u8ReceiveBuff + 0x0004)
      000033 E0               [24]  666 	movx	a,@dptr
      000034 FF               [12]  667 	mov	r7,a
      000035 7E 00            [12]  668 	mov	r6,#0x00
                                    669 ;	callback.c:40: u32Tmp <<= 16;
      000037 8E 04            [24]  670 	mov	ar4,r6
      000039 8F 05            [24]  671 	mov	ar5,r7
                                    672 ;	callback.c:41: u32Addr += u32Tmp;
      00003B E4               [12]  673 	clr	a
      00003C FE               [12]  674 	mov	r6,a
      00003D 25*00            [12]  675 	add	a,_u32Addr
      00003F F5*00            [12]  676 	mov	_u32Addr,a
      000041 EE               [12]  677 	mov	a,r6
      000042 35*01            [12]  678 	addc	a,(_u32Addr + 1)
      000044 F5*01            [12]  679 	mov	(_u32Addr + 1),a
      000046 ED               [12]  680 	mov	a,r5
      000047 35*02            [12]  681 	addc	a,(_u32Addr + 2)
      000049 F5*02            [12]  682 	mov	(_u32Addr + 2),a
      00004B EC               [12]  683 	mov	a,r4
      00004C 35*03            [12]  684 	addc	a,(_u32Addr + 3)
      00004E F5*03            [12]  685 	mov	(_u32Addr + 3),a
                                    686 ;	callback.c:42: u32Tmp = u8ReceiveBuff[3];
      000050 90r00r03         [24]  687 	mov	dptr,#(_u8ReceiveBuff + 0x0003)
      000053 E0               [24]  688 	movx	a,@dptr
      000054 FF               [12]  689 	mov	r7,a
      000055 7E 00            [12]  690 	mov	r6,#0x00
      000057 7D 00            [12]  691 	mov	r5,#0x00
                                    692 ;	callback.c:43: u32Tmp <<= 8;
      000059 8D 04            [24]  693 	mov	ar4,r5
      00005B 8E 05            [24]  694 	mov	ar5,r6
      00005D 8F 06            [24]  695 	mov	ar6,r7
                                    696 ;	callback.c:44: u32Addr += u32Tmp;
      00005F E4               [12]  697 	clr	a
      000060 25*00            [12]  698 	add	a,_u32Addr
      000062 F5*00            [12]  699 	mov	_u32Addr,a
      000064 EE               [12]  700 	mov	a,r6
      000065 35*01            [12]  701 	addc	a,(_u32Addr + 1)
      000067 F5*01            [12]  702 	mov	(_u32Addr + 1),a
      000069 ED               [12]  703 	mov	a,r5
      00006A 35*02            [12]  704 	addc	a,(_u32Addr + 2)
      00006C F5*02            [12]  705 	mov	(_u32Addr + 2),a
      00006E EC               [12]  706 	mov	a,r4
      00006F 35*03            [12]  707 	addc	a,(_u32Addr + 3)
      000071 F5*03            [12]  708 	mov	(_u32Addr + 3),a
                                    709 ;	callback.c:45: u32Tmp = u8ReceiveBuff[2];
      000073 90r00r02         [24]  710 	mov	dptr,#(_u8ReceiveBuff + 0x0002)
      000076 E0               [24]  711 	movx	a,@dptr
      000077 FF               [12]  712 	mov	r7,a
                                    713 ;	callback.c:46: u32Addr += u32Tmp;
      000078 E4               [12]  714 	clr	a
      000079 FE               [12]  715 	mov	r6,a
      00007A FD               [12]  716 	mov	r5,a
      00007B FC               [12]  717 	mov	r4,a
      00007C EF               [12]  718 	mov	a,r7
      00007D 25*00            [12]  719 	add	a,_u32Addr
      00007F F5*00            [12]  720 	mov	_u32Addr,a
      000081 EE               [12]  721 	mov	a,r6
      000082 35*01            [12]  722 	addc	a,(_u32Addr + 1)
      000084 F5*01            [12]  723 	mov	(_u32Addr + 1),a
      000086 ED               [12]  724 	mov	a,r5
      000087 35*02            [12]  725 	addc	a,(_u32Addr + 2)
      000089 F5*02            [12]  726 	mov	(_u32Addr + 2),a
      00008B EC               [12]  727 	mov	a,r4
      00008C 35*03            [12]  728 	addc	a,(_u32Addr + 3)
      00008E F5*03            [12]  729 	mov	(_u32Addr + 3),a
                                    730 ;	callback.c:47: if (C2_ReadFlash(u32Addr, u8ReceiveBuff[6], &u8TransBuff[0])) {
      000090 90r00r06         [24]  731 	mov	dptr,#(_u8ReceiveBuff + 0x0006)
      000093 E0               [24]  732 	movx	a,@dptr
      000094 F5*00            [12]  733 	mov	_C2_ReadFlash_PARM_2,a
      000096 75*00r00         [24]  734 	mov	_C2_ReadFlash_PARM_3,#_u8TransBuff
      000099 75*01s00         [24]  735 	mov	(_C2_ReadFlash_PARM_3 + 1),#(_u8TransBuff >> 8)
                                    736 ;	1-genFromRTrack replaced	mov	(_C2_ReadFlash_PARM_3 + 2),#0x00
      00009C 8E*02            [24]  737 	mov	(_C2_ReadFlash_PARM_3 + 2),r6
      00009E 85*00 82         [24]  738 	mov	dpl,_u32Addr
      0000A1 85*01 83         [24]  739 	mov	dph,(_u32Addr + 1)
      0000A4 85*02 F0         [24]  740 	mov	b,(_u32Addr + 2)
      0000A7 E5*03            [12]  741 	mov	a,(_u32Addr + 3)
      0000A9 12r00r00         [24]  742 	lcall	_C2_ReadFlash
                                    743 ;	callback.c:52: u8HidNum = 128;
      0000AC 75*00 80         [24]  744 	mov	_u8HidNum,#0x80
                                    745 ;	callback.c:53: break;
      0000AF 22               [24]  746 	ret
      0000B0                        747 00105$:
                                    748 ;	callback.c:55: switch (u8ReceiveBuff[1]) {
      0000B0 90r00r01         [24]  749 	mov	dptr,#(_u8ReceiveBuff + 0x0001)
      0000B3 E0               [24]  750 	movx	a,@dptr
      0000B4 FF               [12]  751 	mov	r7,a
      0000B5 BF 08 00         [24]  752 	cjne	r7,#0x08,00658$
      0000B8                        753 00658$:
      0000B8 50 01            [24]  754 	jnc	00659$
      0000BA 22               [24]  755 	ret
      0000BB                        756 00659$:
      0000BB EF               [12]  757 	mov	a,r7
      0000BC 24 F0            [12]  758 	add	a,#0xff - 0x0f
      0000BE 50 01            [24]  759 	jnc	00660$
      0000C0 22               [24]  760 	ret
      0000C1                        761 00660$:
      0000C1 EF               [12]  762 	mov	a,r7
      0000C2 24 F8            [12]  763 	add	a,#0xf8
      0000C4 FF               [12]  764 	mov	r7,a
      0000C5 24 0A            [12]  765 	add	a,#(00661$-3-.)
      0000C7 83               [24]  766 	movc	a,@a+pc
      0000C8 F5 82            [12]  767 	mov	dpl,a
      0000CA EF               [12]  768 	mov	a,r7
      0000CB 24 0C            [12]  769 	add	a,#(00662$-3-.)
      0000CD 83               [24]  770 	movc	a,@a+pc
      0000CE F5 83            [12]  771 	mov	dph,a
      0000D0 E4               [12]  772 	clr	a
      0000D1 73               [24]  773 	jmp	@a+dptr
      0000D2                        774 00661$:
      0000D2r9B                     775 	.db	00148$
      0000D3r43                     776 	.db	00146$
      0000D4r32                     777 	.db	00265$
      0000D5r36                     778 	.db	00144$
      0000D6r32                     779 	.db	00265$
      0000D7r58                     780 	.db	00110$
      0000D8r04                     781 	.db	00276$
      0000D9rE2                     782 	.db	00273$
      0000DA                        783 00662$:
      0000DAs02                     784 	.db	00148$>>8
      0000DBs02                     785 	.db	00146$>>8
      0000DCs0B                     786 	.db	00265$>>8
      0000DDs02                     787 	.db	00144$>>8
      0000DEs0B                     788 	.db	00265$>>8
      0000DFs01                     789 	.db	00110$>>8
      0000E0s01                     790 	.db	00276$>>8
      0000E1s00                     791 	.db	00273$>>8
                                    792 ;	callback.c:57: for (i=0; i<8; ++i) {
      0000E2                        793 00273$:
      0000E2 7E 00            [12]  794 	mov	r6,#0x00
      0000E4 7F 00            [12]  795 	mov	r7,#0x00
      0000E6                        796 00237$:
                                    797 ;	callback.c:58: u8TransBuff[i] = 0x00;
      0000E6 EE               [12]  798 	mov	a,r6
      0000E7 24r00            [12]  799 	add	a,#_u8TransBuff
      0000E9 F5 82            [12]  800 	mov	dpl,a
      0000EB EF               [12]  801 	mov	a,r7
      0000EC 34s00            [12]  802 	addc	a,#(_u8TransBuff >> 8)
      0000EE F5 83            [12]  803 	mov	dph,a
      0000F0 E4               [12]  804 	clr	a
      0000F1 F0               [24]  805 	movx	@dptr,a
                                    806 ;	callback.c:57: for (i=0; i<8; ++i) {
      0000F2 0E               [12]  807 	inc	r6
      0000F3 BE 00 01         [24]  808 	cjne	r6,#0x00,00663$
      0000F6 0F               [12]  809 	inc	r7
      0000F7                        810 00663$:
      0000F7 C3               [12]  811 	clr	c
      0000F8 EE               [12]  812 	mov	a,r6
      0000F9 94 08            [12]  813 	subb	a,#0x08
      0000FB EF               [12]  814 	mov	a,r7
      0000FC 94 00            [12]  815 	subb	a,#0x00
      0000FE 40 E6            [24]  816 	jc	00237$
                                    817 ;	callback.c:60: u8HidNum = 8;
      000100 75*00 08         [24]  818 	mov	_u8HidNum,#0x08
                                    819 ;	callback.c:61: break;
      000103 22               [24]  820 	ret
                                    821 ;	callback.c:63: for(i=0; i<u8ReceiveBuff[7]; ++i) {
      000104                        822 00276$:
      000104 7E 00            [12]  823 	mov	r6,#0x00
      000106 7F 00            [12]  824 	mov	r7,#0x00
      000108                        825 00240$:
      000108 90r00r07         [24]  826 	mov	dptr,#(_u8ReceiveBuff + 0x0007)
      00010B E0               [24]  827 	movx	a,@dptr
      00010C FD               [12]  828 	mov	r5,a
      00010D 7C 00            [12]  829 	mov	r4,#0x00
      00010F C3               [12]  830 	clr	c
      000110 EE               [12]  831 	mov	a,r6
      000111 9D               [12]  832 	subb	a,r5
      000112 EF               [12]  833 	mov	a,r7
      000113 9C               [12]  834 	subb	a,r4
      000114 50 3E            [24]  835 	jnc	00109$
                                    836 ;	callback.c:64: u8TransBuff[i] = spi_send(u8ReceiveBuff[i+2]);
      000116 EE               [12]  837 	mov	a,r6
      000117 24r00            [12]  838 	add	a,#_u8TransBuff
      000119 FC               [12]  839 	mov	r4,a
      00011A EF               [12]  840 	mov	a,r7
      00011B 34s00            [12]  841 	addc	a,#(_u8TransBuff >> 8)
      00011D FD               [12]  842 	mov	r5,a
      00011E 74 02            [12]  843 	mov	a,#0x02
      000120 2E               [12]  844 	add	a,r6
      000121 FA               [12]  845 	mov	r2,a
      000122 E4               [12]  846 	clr	a
      000123 3F               [12]  847 	addc	a,r7
      000124 FB               [12]  848 	mov	r3,a
      000125 EA               [12]  849 	mov	a,r2
      000126 24r00            [12]  850 	add	a,#_u8ReceiveBuff
      000128 F5 82            [12]  851 	mov	dpl,a
      00012A EB               [12]  852 	mov	a,r3
      00012B 34s00            [12]  853 	addc	a,#(_u8ReceiveBuff >> 8)
      00012D F5 83            [12]  854 	mov	dph,a
      00012F E0               [24]  855 	movx	a,@dptr
      000130 F5 82            [12]  856 	mov	dpl,a
      000132 C0 07            [24]  857 	push	ar7
      000134 C0 06            [24]  858 	push	ar6
      000136 C0 05            [24]  859 	push	ar5
      000138 C0 04            [24]  860 	push	ar4
      00013A 12r00r00         [24]  861 	lcall	_spi_send
      00013D AB 82            [24]  862 	mov	r3,dpl
      00013F D0 04            [24]  863 	pop	ar4
      000141 D0 05            [24]  864 	pop	ar5
      000143 D0 06            [24]  865 	pop	ar6
      000145 D0 07            [24]  866 	pop	ar7
      000147 8C 82            [24]  867 	mov	dpl,r4
      000149 8D 83            [24]  868 	mov	dph,r5
      00014B EB               [12]  869 	mov	a,r3
      00014C F0               [24]  870 	movx	@dptr,a
                                    871 ;	callback.c:63: for(i=0; i<u8ReceiveBuff[7]; ++i) {
      00014D 0E               [12]  872 	inc	r6
      00014E BE 00 B7         [24]  873 	cjne	r6,#0x00,00240$
      000151 0F               [12]  874 	inc	r7
      000152 80 B4            [24]  875 	sjmp	00240$
      000154                        876 00109$:
                                    877 ;	callback.c:66: u8HidNum = 8;
      000154 75*00 08         [24]  878 	mov	_u8HidNum,#0x08
                                    879 ;	callback.c:67: break;
      000157 22               [24]  880 	ret
                                    881 ;	callback.c:68: case 0x0D:
      000158                        882 00110$:
                                    883 ;	callback.c:73: switch (u8ReceiveBuff[3]) {
      000158 90r00r03         [24]  884 	mov	dptr,#(_u8ReceiveBuff + 0x0003)
      00015B E0               [24]  885 	movx	a,@dptr
      00015C FF               [12]  886 	mov  r7,a
      00015D 24 F9            [12]  887 	add	a,#0xff - 0x06
      00015F 50 03            [24]  888 	jnc	00667$
      000161 02r02r06         [24]  889 	ljmp	00135$
      000164                        890 00667$:
      000164 EF               [12]  891 	mov	a,r7
      000165 2F               [12]  892 	add	a,r7
      000166 2F               [12]  893 	add	a,r7
      000167 90r01r6B         [24]  894 	mov	dptr,#00668$
      00016A 73               [24]  895 	jmp	@a+dptr
      00016B                        896 00668$:
      00016B 02r02r06         [24]  897 	ljmp	00135$
      00016E 02r01r80         [24]  898 	ljmp	00111$
      000171 02r01r98         [24]  899 	ljmp	00115$
      000174 02r01rAE         [24]  900 	ljmp	00119$
      000177 02r01rC4         [24]  901 	ljmp	00123$
      00017A 02r01rDA         [24]  902 	ljmp	00127$
      00017D 02r01rF0         [24]  903 	ljmp	00131$
                                    904 ;	callback.c:74: case 0x01:
      000180                        905 00111$:
                                    906 ;	callback.c:75: if (!u8ReceiveBuff[2]) {
      000180 90r00r02         [24]  907 	mov	dptr,#(_u8ReceiveBuff + 0x0002)
      000183 E0               [24]  908 	movx	a,@dptr
      000184 70 09            [24]  909 	jnz	00113$
                                    910 ;	callback.c:76: spi_init(1);
      000186 75 82 01         [24]  911 	mov	dpl,#0x01
      000189 12r00r00         [24]  912 	lcall	_spi_init
      00018C 02r02r1A         [24]  913 	ljmp	00139$
      00018F                        914 00113$:
                                    915 ;	callback.c:78: spi_init(3);
      00018F 75 82 03         [24]  916 	mov	dpl,#0x03
      000192 12r00r00         [24]  917 	lcall	_spi_init
                                    918 ;	callback.c:80: break;
      000195 02r02r1A         [24]  919 	ljmp	00139$
                                    920 ;	callback.c:81: case 0x02:
      000198                        921 00115$:
                                    922 ;	callback.c:82: if (!u8ReceiveBuff[2]) {
      000198 90r00r02         [24]  923 	mov	dptr,#(_u8ReceiveBuff + 0x0002)
      00019B E0               [24]  924 	movx	a,@dptr
      00019C 70 08            [24]  925 	jnz	00117$
                                    926 ;	callback.c:83: spi_init(2);
      00019E 75 82 02         [24]  927 	mov	dpl,#0x02
      0001A1 12r00r00         [24]  928 	lcall	_spi_init
      0001A4 80 74            [24]  929 	sjmp	00139$
      0001A6                        930 00117$:
                                    931 ;	callback.c:85: spi_init(4);
      0001A6 75 82 04         [24]  932 	mov	dpl,#0x04
      0001A9 12r00r00         [24]  933 	lcall	_spi_init
                                    934 ;	callback.c:87: break;
                                    935 ;	callback.c:88: case 0x03:
      0001AC 80 6C            [24]  936 	sjmp	00139$
      0001AE                        937 00119$:
                                    938 ;	callback.c:89: if (!u8ReceiveBuff[2]) {
      0001AE 90r00r02         [24]  939 	mov	dptr,#(_u8ReceiveBuff + 0x0002)
      0001B1 E0               [24]  940 	movx	a,@dptr
      0001B2 70 08            [24]  941 	jnz	00121$
                                    942 ;	callback.c:90: spi_init(3);
      0001B4 75 82 03         [24]  943 	mov	dpl,#0x03
      0001B7 12r00r00         [24]  944 	lcall	_spi_init
      0001BA 80 5E            [24]  945 	sjmp	00139$
      0001BC                        946 00121$:
                                    947 ;	callback.c:92: spi_init(5);
      0001BC 75 82 05         [24]  948 	mov	dpl,#0x05
      0001BF 12r00r00         [24]  949 	lcall	_spi_init
                                    950 ;	callback.c:94: break;
                                    951 ;	callback.c:95: case 0x04:
      0001C2 80 56            [24]  952 	sjmp	00139$
      0001C4                        953 00123$:
                                    954 ;	callback.c:96: if (!u8ReceiveBuff[2]) {
      0001C4 90r00r02         [24]  955 	mov	dptr,#(_u8ReceiveBuff + 0x0002)
      0001C7 E0               [24]  956 	movx	a,@dptr
      0001C8 70 08            [24]  957 	jnz	00125$
                                    958 ;	callback.c:97: spi_init(4);
      0001CA 75 82 04         [24]  959 	mov	dpl,#0x04
      0001CD 12r00r00         [24]  960 	lcall	_spi_init
      0001D0 80 48            [24]  961 	sjmp	00139$
      0001D2                        962 00125$:
                                    963 ;	callback.c:99: spi_init(6);
      0001D2 75 82 06         [24]  964 	mov	dpl,#0x06
      0001D5 12r00r00         [24]  965 	lcall	_spi_init
                                    966 ;	callback.c:101: break;
                                    967 ;	callback.c:102: case 0x05:
      0001D8 80 40            [24]  968 	sjmp	00139$
      0001DA                        969 00127$:
                                    970 ;	callback.c:103: if (!u8ReceiveBuff[2]) {
      0001DA 90r00r02         [24]  971 	mov	dptr,#(_u8ReceiveBuff + 0x0002)
      0001DD E0               [24]  972 	movx	a,@dptr
      0001DE 70 08            [24]  973 	jnz	00129$
                                    974 ;	callback.c:104: spi_init(5);
      0001E0 75 82 05         [24]  975 	mov	dpl,#0x05
      0001E3 12r00r00         [24]  976 	lcall	_spi_init
      0001E6 80 32            [24]  977 	sjmp	00139$
      0001E8                        978 00129$:
                                    979 ;	callback.c:106: spi_init(7);
      0001E8 75 82 07         [24]  980 	mov	dpl,#0x07
      0001EB 12r00r00         [24]  981 	lcall	_spi_init
                                    982 ;	callback.c:108: break;
                                    983 ;	callback.c:109: case 0x06:
      0001EE 80 2A            [24]  984 	sjmp	00139$
      0001F0                        985 00131$:
                                    986 ;	callback.c:110: if (!u8ReceiveBuff[2]) {
      0001F0 90r00r02         [24]  987 	mov	dptr,#(_u8ReceiveBuff + 0x0002)
      0001F3 E0               [24]  988 	movx	a,@dptr
      0001F4 70 08            [24]  989 	jnz	00133$
                                    990 ;	callback.c:111: spi_init(6);
      0001F6 75 82 06         [24]  991 	mov	dpl,#0x06
      0001F9 12r00r00         [24]  992 	lcall	_spi_init
      0001FC 80 1C            [24]  993 	sjmp	00139$
      0001FE                        994 00133$:
                                    995 ;	callback.c:113: spi_init(8);
      0001FE 75 82 08         [24]  996 	mov	dpl,#0x08
      000201 12r00r00         [24]  997 	lcall	_spi_init
                                    998 ;	callback.c:115: break;
                                    999 ;	callback.c:116: default:
      000204 80 14            [24] 1000 	sjmp	00139$
      000206                       1001 00135$:
                                   1002 ;	callback.c:117: if (!u8ReceiveBuff[2]) {
      000206 90r00r02         [24] 1003 	mov	dptr,#(_u8ReceiveBuff + 0x0002)
      000209 E0               [24] 1004 	movx	a,@dptr
      00020A 70 08            [24] 1005 	jnz	00137$
                                   1006 ;	callback.c:118: spi_init(7);
      00020C 75 82 07         [24] 1007 	mov	dpl,#0x07
      00020F 12r00r00         [24] 1008 	lcall	_spi_init
      000212 80 06            [24] 1009 	sjmp	00139$
      000214                       1010 00137$:
                                   1011 ;	callback.c:120: spi_init(9);
      000214 75 82 09         [24] 1012 	mov	dpl,#0x09
      000217 12r00r00         [24] 1013 	lcall	_spi_init
                                   1014 ;	callback.c:123: }
      00021A                       1015 00139$:
                                   1016 ;	callback.c:127: if(u8ReceiveBuff[2]) {
      00021A 90r00r02         [24] 1017 	mov	dptr,#(_u8ReceiveBuff + 0x0002)
      00021D E0               [24] 1018 	movx	a,@dptr
      00021E 60 07            [24] 1019 	jz	00141$
                                   1020 ;	callback.c:128: u8Chip=CHIP_89S;
      000220 75*00 01         [24] 1021 	mov	_u8Chip,#0x01
                                   1022 ;	callback.c:130: rst = 1;
                                   1023 ;	assignBit
      000223 D2 B2            [12] 1024 	setb	_rst
      000225 80 05            [24] 1025 	sjmp	00142$
      000227                       1026 00141$:
                                   1027 ;	callback.c:132: u8Chip=CHIP_AVR;
      000227 75*00 00         [24] 1028 	mov	_u8Chip,#0x00
                                   1029 ;	callback.c:134: rst = 0;
                                   1030 ;	assignBit
      00022A C2 B2            [12] 1031 	clr	_rst
      00022C                       1032 00142$:
                                   1033 ;	callback.c:137: P3_MOD_OC &= ~(1 << 2);
      00022C 53 96 FB         [24] 1034 	anl	_P3_MOD_OC,#0xfb
                                   1035 ;	callback.c:138: P3_DIR_PU |= (1 << 2);
      00022F 43 97 04         [24] 1036 	orl	_P3_DIR_PU,#0x04
                                   1037 ;	callback.c:140: u8HidNum = 8;
      000232 75*00 08         [24] 1038 	mov	_u8HidNum,#0x08
                                   1039 ;	callback.c:141: break;
      000235 22               [24] 1040 	ret
                                   1041 ;	callback.c:144: case 0x0B:
      000236                       1042 00144$:
                                   1043 ;	callback.c:151: SPI0_CTRL = 0x00;
      000236 75 FA 00         [24] 1044 	mov	_SPI0_CTRL,#0x00
                                   1045 ;	callback.c:152: P3_MOD_OC &= ~(1 << 2);
      000239 53 96 FB         [24] 1046 	anl	_P3_MOD_OC,#0xfb
                                   1047 ;	callback.c:153: P3_DIR_PU &= ~(1 << 2);
      00023C 53 97 FB         [24] 1048 	anl	_P3_DIR_PU,#0xfb
                                   1049 ;	callback.c:154: u8HidNum = 0;
      00023F 75*00 00         [24] 1050 	mov	_u8HidNum,#0x00
                                   1051 ;	callback.c:155: break;
      000242 22               [24] 1052 	ret
                                   1053 ;	callback.c:158: case 0x09:
      000243                       1054 00146$:
                                   1055 ;	callback.c:159: u16Addr= u8ReceiveBuff[3]*256+u8ReceiveBuff[2];
      000243 90r00r03         [24] 1056 	mov	dptr,#(_u8ReceiveBuff + 0x0003)
      000246 E0               [24] 1057 	movx	a,@dptr
      000247 FE               [12] 1058 	mov	r6,a
      000248 7F 00            [12] 1059 	mov	r7,#0x00
      00024A 90r00r02         [24] 1060 	mov	dptr,#(_u8ReceiveBuff + 0x0002)
      00024D E0               [24] 1061 	movx	a,@dptr
      00024E FD               [12] 1062 	mov	r5,a
      00024F 7C 00            [12] 1063 	mov	r4,#0x00
      000251 2F               [12] 1064 	add	a,r7
      000252 F5*04            [12] 1065 	mov	_u16Addr,a
      000254 EC               [12] 1066 	mov	a,r4
      000255 3E               [12] 1067 	addc	a,r6
      000256 F5*05            [12] 1068 	mov	(_u16Addr + 1),a
                                   1069 ;	callback.c:160: for(i=0; i<128; ++i) {
      000258 7E 00            [12] 1070 	mov	r6,#0x00
      00025A 7F 00            [12] 1071 	mov	r7,#0x00
      00025C                       1072 00242$:
                                   1073 ;	callback.c:161: u8TransBuff[i]= ispReadEeprom(u16Addr+i);
      00025C EE               [12] 1074 	mov	a,r6
      00025D 24r00            [12] 1075 	add	a,#_u8TransBuff
      00025F FC               [12] 1076 	mov	r4,a
      000260 EF               [12] 1077 	mov	a,r7
      000261 34s00            [12] 1078 	addc	a,#(_u8TransBuff >> 8)
      000263 FD               [12] 1079 	mov	r5,a
      000264 EE               [12] 1080 	mov	a,r6
      000265 25*04            [12] 1081 	add	a,_u16Addr
      000267 F5 82            [12] 1082 	mov	dpl,a
      000269 EF               [12] 1083 	mov	a,r7
      00026A 35*05            [12] 1084 	addc	a,(_u16Addr + 1)
      00026C F5 83            [12] 1085 	mov	dph,a
      00026E C0 07            [24] 1086 	push	ar7
      000270 C0 06            [24] 1087 	push	ar6
      000272 C0 05            [24] 1088 	push	ar5
      000274 C0 04            [24] 1089 	push	ar4
      000276 12r00r00         [24] 1090 	lcall	_ispReadEeprom
      000279 AB 82            [24] 1091 	mov	r3,dpl
      00027B D0 04            [24] 1092 	pop	ar4
      00027D D0 05            [24] 1093 	pop	ar5
      00027F D0 06            [24] 1094 	pop	ar6
      000281 D0 07            [24] 1095 	pop	ar7
      000283 8C 82            [24] 1096 	mov	dpl,r4
      000285 8D 83            [24] 1097 	mov	dph,r5
      000287 EB               [12] 1098 	mov	a,r3
      000288 F0               [24] 1099 	movx	@dptr,a
                                   1100 ;	callback.c:160: for(i=0; i<128; ++i) {
      000289 0E               [12] 1101 	inc	r6
      00028A BE 00 01         [24] 1102 	cjne	r6,#0x00,00677$
      00028D 0F               [12] 1103 	inc	r7
      00028E                       1104 00677$:
      00028E C3               [12] 1105 	clr	c
      00028F EE               [12] 1106 	mov	a,r6
      000290 94 80            [12] 1107 	subb	a,#0x80
      000292 EF               [12] 1108 	mov	a,r7
      000293 94 00            [12] 1109 	subb	a,#0x00
      000295 40 C5            [24] 1110 	jc	00242$
                                   1111 ;	callback.c:163: u8HidNum = 128;
      000297 75*00 80         [24] 1112 	mov	_u8HidNum,#0x80
                                   1113 ;	callback.c:164: break;
      00029A 22               [24] 1114 	ret
                                   1115 ;	callback.c:165: case 0x08:
      00029B                       1116 00148$:
                                   1117 ;	callback.c:166: if(u8Chip==CHIP_AVR) {
      00029B E5*00            [12] 1118 	mov	a,_u8Chip
      00029D 60 03            [24] 1119 	jz	00679$
      00029F 02r03rB3         [24] 1120 	ljmp	00154$
      0002A2                       1121 00679$:
                                   1122 ;	callback.c:167: u32Tmp = u8ReceiveBuff[4];
      0002A2 90r00r04         [24] 1123 	mov	dptr,#(_u8ReceiveBuff + 0x0004)
      0002A5 E0               [24] 1124 	movx	a,@dptr
      0002A6 FF               [12] 1125 	mov	r7,a
      0002A7 7E 00            [12] 1126 	mov	r6,#0x00
                                   1127 ;	callback.c:168: u32Tmp <<= 16;
      0002A9 8E*03            [24] 1128 	mov	(_u32Addr + 3),r6
      0002AB 8F*02            [24] 1129 	mov	(_u32Addr + 2),r7
                                   1130 ;	1-genFromRTrack replaced	mov	_u32Addr,#0x00
      0002AD 8E*00            [24] 1131 	mov	_u32Addr,r6
                                   1132 ;	1-genFromRTrack replaced	mov	(_u32Addr + 1),#0x00
      0002AF 8E*01            [24] 1133 	mov	(_u32Addr + 1),r6
                                   1134 ;	callback.c:170: u32Tmp = u8ReceiveBuff[3];
      0002B1 90r00r03         [24] 1135 	mov	dptr,#(_u8ReceiveBuff + 0x0003)
      0002B4 E0               [24] 1136 	movx	a,@dptr
      0002B5 FF               [12] 1137 	mov	r7,a
      0002B6 7E 00            [12] 1138 	mov	r6,#0x00
      0002B8 7D 00            [12] 1139 	mov	r5,#0x00
                                   1140 ;	callback.c:171: u32Tmp <<= 8;
      0002BA 8D 04            [24] 1141 	mov	ar4,r5
      0002BC 8E 05            [24] 1142 	mov	ar5,r6
      0002BE 8F 06            [24] 1143 	mov	ar6,r7
                                   1144 ;	callback.c:172: u32Addr += u32Tmp;
      0002C0 E4               [12] 1145 	clr	a
      0002C1 25*00            [12] 1146 	add	a,_u32Addr
      0002C3 F5*00            [12] 1147 	mov	_u32Addr,a
      0002C5 EE               [12] 1148 	mov	a,r6
      0002C6 35*01            [12] 1149 	addc	a,(_u32Addr + 1)
      0002C8 F5*01            [12] 1150 	mov	(_u32Addr + 1),a
      0002CA ED               [12] 1151 	mov	a,r5
      0002CB 35*02            [12] 1152 	addc	a,(_u32Addr + 2)
      0002CD F5*02            [12] 1153 	mov	(_u32Addr + 2),a
      0002CF EC               [12] 1154 	mov	a,r4
      0002D0 35*03            [12] 1155 	addc	a,(_u32Addr + 3)
      0002D2 F5*03            [12] 1156 	mov	(_u32Addr + 3),a
                                   1157 ;	callback.c:173: u32Tmp = u8ReceiveBuff[2];
      0002D4 90r00r02         [24] 1158 	mov	dptr,#(_u8ReceiveBuff + 0x0002)
      0002D7 E0               [24] 1159 	movx	a,@dptr
      0002D8 FF               [12] 1160 	mov	r7,a
                                   1161 ;	callback.c:174: u32Addr += u32Tmp;
      0002D9 E4               [12] 1162 	clr	a
      0002DA FE               [12] 1163 	mov	r6,a
      0002DB FD               [12] 1164 	mov	r5,a
      0002DC FC               [12] 1165 	mov	r4,a
      0002DD EF               [12] 1166 	mov	a,r7
      0002DE 25*00            [12] 1167 	add	a,_u32Addr
      0002E0 F5*00            [12] 1168 	mov	_u32Addr,a
      0002E2 EE               [12] 1169 	mov	a,r6
      0002E3 35*01            [12] 1170 	addc	a,(_u32Addr + 1)
      0002E5 F5*01            [12] 1171 	mov	(_u32Addr + 1),a
      0002E7 ED               [12] 1172 	mov	a,r5
      0002E8 35*02            [12] 1173 	addc	a,(_u32Addr + 2)
      0002EA F5*02            [12] 1174 	mov	(_u32Addr + 2),a
      0002EC EC               [12] 1175 	mov	a,r4
      0002ED 35*03            [12] 1176 	addc	a,(_u32Addr + 3)
                                   1177 ;	callback.c:177: u32Addr>>=1;
      0002EF F5*03            [12] 1178 	mov	(_u32Addr + 3),a
      0002F1 C3               [12] 1179 	clr	c
      0002F2 13               [12] 1180 	rrc	a
      0002F3 F5*03            [12] 1181 	mov	(_u32Addr + 3),a
      0002F5 E5*02            [12] 1182 	mov	a,(_u32Addr + 2)
      0002F7 13               [12] 1183 	rrc	a
      0002F8 F5*02            [12] 1184 	mov	(_u32Addr + 2),a
      0002FA E5*01            [12] 1185 	mov	a,(_u32Addr + 1)
      0002FC 13               [12] 1186 	rrc	a
      0002FD F5*01            [12] 1187 	mov	(_u32Addr + 1),a
      0002FF E5*00            [12] 1188 	mov	a,_u32Addr
      000301 13               [12] 1189 	rrc	a
      000302 F5*00            [12] 1190 	mov	_u32Addr,a
                                   1191 ;	callback.c:178: u16Addr=(uint16_t)u32Addr;
      000304 85*00*04         [24] 1192 	mov	_u16Addr,_u32Addr
      000307 85*01*05         [24] 1193 	mov	(_u16Addr + 1),(_u32Addr + 1)
                                   1194 ;	callback.c:179: u32Addr>>=16;
      00030A 85*02*00         [24] 1195 	mov	_u32Addr,(_u32Addr + 2)
      00030D 85*03*01         [24] 1196 	mov	(_u32Addr + 1),(_u32Addr + 3)
                                   1197 ;	1-genFromRTrack replaced	mov	(_u32Addr + 2),#0x00
      000310 8E*02            [24] 1198 	mov	(_u32Addr + 2),r6
                                   1199 ;	1-genFromRTrack replaced	mov	(_u32Addr + 3),#0x00
      000312 8E*03            [24] 1200 	mov	(_u32Addr + 3),r6
                                   1201 ;	callback.c:180: u8ExtAddr=u32Addr;
                                   1202 ;	callback.c:182: if(u8ExtAddr) {
      000314 E5*00            [12] 1203 	mov	a,_u32Addr
      000316 F5*06            [12] 1204 	mov	_u8ExtAddr,a
      000318 60 18            [24] 1205 	jz	00290$
                                   1206 ;	callback.c:183: spi_send(0x4D);
      00031A 75 82 4D         [24] 1207 	mov	dpl,#0x4d
      00031D 12r00r00         [24] 1208 	lcall	_spi_send
                                   1209 ;	callback.c:184: spi_send(0x00);
      000320 75 82 00         [24] 1210 	mov	dpl,#0x00
      000323 12r00r00         [24] 1211 	lcall	_spi_send
                                   1212 ;	callback.c:185: spi_send(u8ExtAddr);
      000326 85*06 82         [24] 1213 	mov	dpl,_u8ExtAddr
      000329 12r00r00         [24] 1214 	lcall	_spi_send
                                   1215 ;	callback.c:186: spi_send(0x00);
      00032C 75 82 00         [24] 1216 	mov	dpl,#0x00
      00032F 12r00r00         [24] 1217 	lcall	_spi_send
                                   1218 ;	callback.c:188: for(i=0; i<128/2; ++i) {
      000332                       1219 00290$:
      000332 7E 00            [12] 1220 	mov	r6,#0x00
      000334 7F 00            [12] 1221 	mov	r7,#0x00
      000336                       1222 00244$:
                                   1223 ;	callback.c:189: u8TransBuff[i*2]= ispReadAvrLo(u16Addr+i);
      000336 EE               [12] 1224 	mov	a,r6
      000337 2E               [12] 1225 	add	a,r6
      000338 FC               [12] 1226 	mov	r4,a
      000339 EF               [12] 1227 	mov	a,r7
      00033A 33               [12] 1228 	rlc	a
      00033B FD               [12] 1229 	mov	r5,a
      00033C EC               [12] 1230 	mov	a,r4
      00033D 24r00            [12] 1231 	add	a,#_u8TransBuff
      00033F FA               [12] 1232 	mov	r2,a
      000340 ED               [12] 1233 	mov	a,r5
      000341 34s00            [12] 1234 	addc	a,#(_u8TransBuff >> 8)
      000343 FB               [12] 1235 	mov	r3,a
      000344 EE               [12] 1236 	mov	a,r6
      000345 25*04            [12] 1237 	add	a,_u16Addr
      000347 F5 82            [12] 1238 	mov	dpl,a
      000349 EF               [12] 1239 	mov	a,r7
      00034A 35*05            [12] 1240 	addc	a,(_u16Addr + 1)
      00034C F5 83            [12] 1241 	mov	dph,a
      00034E C0 07            [24] 1242 	push	ar7
      000350 C0 06            [24] 1243 	push	ar6
      000352 C0 05            [24] 1244 	push	ar5
      000354 C0 04            [24] 1245 	push	ar4
      000356 C0 03            [24] 1246 	push	ar3
      000358 C0 02            [24] 1247 	push	ar2
      00035A 12r00r00         [24] 1248 	lcall	_ispReadAvrLo
      00035D A9 82            [24] 1249 	mov	r1,dpl
      00035F D0 02            [24] 1250 	pop	ar2
      000361 D0 03            [24] 1251 	pop	ar3
      000363 D0 04            [24] 1252 	pop	ar4
      000365 D0 05            [24] 1253 	pop	ar5
      000367 D0 06            [24] 1254 	pop	ar6
      000369 D0 07            [24] 1255 	pop	ar7
      00036B 8A 82            [24] 1256 	mov	dpl,r2
      00036D 8B 83            [24] 1257 	mov	dph,r3
      00036F E9               [12] 1258 	mov	a,r1
      000370 F0               [24] 1259 	movx	@dptr,a
                                   1260 ;	callback.c:190: u8TransBuff[i*2+1]= ispReadAvrHi(u16Addr+i);
      000371 0C               [12] 1261 	inc	r4
      000372 BC 00 01         [24] 1262 	cjne	r4,#0x00,00681$
      000375 0D               [12] 1263 	inc	r5
      000376                       1264 00681$:
      000376 EC               [12] 1265 	mov	a,r4
      000377 24r00            [12] 1266 	add	a,#_u8TransBuff
      000379 FC               [12] 1267 	mov	r4,a
      00037A ED               [12] 1268 	mov	a,r5
      00037B 34s00            [12] 1269 	addc	a,#(_u8TransBuff >> 8)
      00037D FD               [12] 1270 	mov	r5,a
      00037E EE               [12] 1271 	mov	a,r6
      00037F 25*04            [12] 1272 	add	a,_u16Addr
      000381 F5 82            [12] 1273 	mov	dpl,a
      000383 EF               [12] 1274 	mov	a,r7
      000384 35*05            [12] 1275 	addc	a,(_u16Addr + 1)
      000386 F5 83            [12] 1276 	mov	dph,a
      000388 C0 07            [24] 1277 	push	ar7
      00038A C0 06            [24] 1278 	push	ar6
      00038C C0 05            [24] 1279 	push	ar5
      00038E C0 04            [24] 1280 	push	ar4
      000390 12r00r00         [24] 1281 	lcall	_ispReadAvrHi
      000393 AB 82            [24] 1282 	mov	r3,dpl
      000395 D0 04            [24] 1283 	pop	ar4
      000397 D0 05            [24] 1284 	pop	ar5
      000399 D0 06            [24] 1285 	pop	ar6
      00039B D0 07            [24] 1286 	pop	ar7
      00039D 8C 82            [24] 1287 	mov	dpl,r4
      00039F 8D 83            [24] 1288 	mov	dph,r5
      0003A1 EB               [12] 1289 	mov	a,r3
      0003A2 F0               [24] 1290 	movx	@dptr,a
                                   1291 ;	callback.c:188: for(i=0; i<128/2; ++i) {
      0003A3 0E               [12] 1292 	inc	r6
      0003A4 BE 00 01         [24] 1293 	cjne	r6,#0x00,00682$
      0003A7 0F               [12] 1294 	inc	r7
      0003A8                       1295 00682$:
      0003A8 C3               [12] 1296 	clr	c
      0003A9 EE               [12] 1297 	mov	a,r6
      0003AA 94 40            [12] 1298 	subb	a,#0x40
      0003AC EF               [12] 1299 	mov	a,r7
      0003AD 94 00            [12] 1300 	subb	a,#0x00
      0003AF 40 85            [24] 1301 	jc	00244$
      0003B1 80 54            [24] 1302 	sjmp	00155$
      0003B3                       1303 00154$:
                                   1304 ;	callback.c:193: u16Addr=u8ReceiveBuff[3]*256+u8ReceiveBuff[2];
      0003B3 90r00r03         [24] 1305 	mov	dptr,#(_u8ReceiveBuff + 0x0003)
      0003B6 E0               [24] 1306 	movx	a,@dptr
      0003B7 FE               [12] 1307 	mov	r6,a
      0003B8 7F 00            [12] 1308 	mov	r7,#0x00
      0003BA 90r00r02         [24] 1309 	mov	dptr,#(_u8ReceiveBuff + 0x0002)
      0003BD E0               [24] 1310 	movx	a,@dptr
      0003BE FD               [12] 1311 	mov	r5,a
      0003BF 7C 00            [12] 1312 	mov	r4,#0x00
      0003C1 2F               [12] 1313 	add	a,r7
      0003C2 F5*04            [12] 1314 	mov	_u16Addr,a
      0003C4 EC               [12] 1315 	mov	a,r4
      0003C5 3E               [12] 1316 	addc	a,r6
      0003C6 F5*05            [12] 1317 	mov	(_u16Addr + 1),a
                                   1318 ;	callback.c:194: for(i=0; i<128; ++i) {
      0003C8 7E 00            [12] 1319 	mov	r6,#0x00
      0003CA 7F 00            [12] 1320 	mov	r7,#0x00
      0003CC                       1321 00246$:
                                   1322 ;	callback.c:195: u8TransBuff[i]=ispReadFlash(u16Addr+i);
      0003CC EE               [12] 1323 	mov	a,r6
      0003CD 24r00            [12] 1324 	add	a,#_u8TransBuff
      0003CF FC               [12] 1325 	mov	r4,a
      0003D0 EF               [12] 1326 	mov	a,r7
      0003D1 34s00            [12] 1327 	addc	a,#(_u8TransBuff >> 8)
      0003D3 FD               [12] 1328 	mov	r5,a
      0003D4 EE               [12] 1329 	mov	a,r6
      0003D5 25*04            [12] 1330 	add	a,_u16Addr
      0003D7 F5 82            [12] 1331 	mov	dpl,a
      0003D9 EF               [12] 1332 	mov	a,r7
      0003DA 35*05            [12] 1333 	addc	a,(_u16Addr + 1)
      0003DC F5 83            [12] 1334 	mov	dph,a
      0003DE C0 07            [24] 1335 	push	ar7
      0003E0 C0 06            [24] 1336 	push	ar6
      0003E2 C0 05            [24] 1337 	push	ar5
      0003E4 C0 04            [24] 1338 	push	ar4
      0003E6 12r00r00         [24] 1339 	lcall	_ispReadFlash
      0003E9 AB 82            [24] 1340 	mov	r3,dpl
      0003EB D0 04            [24] 1341 	pop	ar4
      0003ED D0 05            [24] 1342 	pop	ar5
      0003EF D0 06            [24] 1343 	pop	ar6
      0003F1 D0 07            [24] 1344 	pop	ar7
      0003F3 8C 82            [24] 1345 	mov	dpl,r4
      0003F5 8D 83            [24] 1346 	mov	dph,r5
      0003F7 EB               [12] 1347 	mov	a,r3
      0003F8 F0               [24] 1348 	movx	@dptr,a
                                   1349 ;	callback.c:194: for(i=0; i<128; ++i) {
      0003F9 0E               [12] 1350 	inc	r6
      0003FA BE 00 01         [24] 1351 	cjne	r6,#0x00,00684$
      0003FD 0F               [12] 1352 	inc	r7
      0003FE                       1353 00684$:
      0003FE C3               [12] 1354 	clr	c
      0003FF EE               [12] 1355 	mov	a,r6
      000400 94 80            [12] 1356 	subb	a,#0x80
      000402 EF               [12] 1357 	mov	a,r7
      000403 94 00            [12] 1358 	subb	a,#0x00
      000405 40 C5            [24] 1359 	jc	00246$
      000407                       1360 00155$:
                                   1361 ;	callback.c:198: u8HidNum = 128;
      000407 75*00 80         [24] 1362 	mov	_u8HidNum,#0x80
                                   1363 ;	callback.c:201: break;
      00040A 22               [24] 1364 	ret
                                   1365 ;	callback.c:204: case 0x02:
      00040B                       1366 00157$:
                                   1367 ;	callback.c:208: if (u8Chip == CHIP_C2) {
      00040B 74 02            [12] 1368 	mov	a,#0x02
      00040D B5*00 02         [24] 1369 	cjne	a,_u8Chip,00686$
      000410 80 03            [24] 1370 	sjmp	00687$
      000412                       1371 00686$:
      000412 02r04rB5         [24] 1372 	ljmp	00162$
      000415                       1373 00687$:
                                   1374 ;	callback.c:209: u32Tmp = u8ReceiveBuff[5];
      000415 90r00r05         [24] 1375 	mov	dptr,#(_u8ReceiveBuff + 0x0005)
      000418 E0               [24] 1376 	movx	a,@dptr
      000419 FF               [12] 1377 	mov	r7,a
      00041A 7E 00            [12] 1378 	mov	r6,#0x00
                                   1379 ;	callback.c:210: u32Tmp <<= 24;
      00041C 8F*03            [24] 1380 	mov	(_u32Addr + 3),r7
                                   1381 ;	1-genFromRTrack replaced	mov	_u32Addr,#0x00
      00041E 8E*00            [24] 1382 	mov	_u32Addr,r6
                                   1383 ;	1-genFromRTrack replaced	mov	(_u32Addr + 1),#0x00
      000420 8E*01            [24] 1384 	mov	(_u32Addr + 1),r6
                                   1385 ;	1-genFromRTrack replaced	mov	(_u32Addr + 2),#0x00
      000422 8E*02            [24] 1386 	mov	(_u32Addr + 2),r6
                                   1387 ;	callback.c:212: u32Tmp = u8ReceiveBuff[4];
      000424 90r00r04         [24] 1388 	mov	dptr,#(_u8ReceiveBuff + 0x0004)
      000427 E0               [24] 1389 	movx	a,@dptr
      000428 FF               [12] 1390 	mov	r7,a
      000429 7E 00            [12] 1391 	mov	r6,#0x00
                                   1392 ;	callback.c:213: u32Tmp <<= 16;
      00042B 8E 04            [24] 1393 	mov	ar4,r6
      00042D 8F 05            [24] 1394 	mov	ar5,r7
                                   1395 ;	callback.c:214: u32Addr += u32Tmp;
      00042F E4               [12] 1396 	clr	a
      000430 FE               [12] 1397 	mov	r6,a
      000431 25*00            [12] 1398 	add	a,_u32Addr
      000433 F5*00            [12] 1399 	mov	_u32Addr,a
      000435 EE               [12] 1400 	mov	a,r6
      000436 35*01            [12] 1401 	addc	a,(_u32Addr + 1)
      000438 F5*01            [12] 1402 	mov	(_u32Addr + 1),a
      00043A ED               [12] 1403 	mov	a,r5
      00043B 35*02            [12] 1404 	addc	a,(_u32Addr + 2)
      00043D F5*02            [12] 1405 	mov	(_u32Addr + 2),a
      00043F EC               [12] 1406 	mov	a,r4
      000440 35*03            [12] 1407 	addc	a,(_u32Addr + 3)
      000442 F5*03            [12] 1408 	mov	(_u32Addr + 3),a
                                   1409 ;	callback.c:215: u32Tmp = u8ReceiveBuff[3];
      000444 90r00r03         [24] 1410 	mov	dptr,#(_u8ReceiveBuff + 0x0003)
      000447 E0               [24] 1411 	movx	a,@dptr
      000448 FF               [12] 1412 	mov	r7,a
      000449 7E 00            [12] 1413 	mov	r6,#0x00
      00044B 7D 00            [12] 1414 	mov	r5,#0x00
                                   1415 ;	callback.c:216: u32Tmp <<= 8;
      00044D 8D 04            [24] 1416 	mov	ar4,r5
      00044F 8E 05            [24] 1417 	mov	ar5,r6
      000451 8F 06            [24] 1418 	mov	ar6,r7
                                   1419 ;	callback.c:217: u32Addr += u32Tmp;
      000453 E4               [12] 1420 	clr	a
      000454 25*00            [12] 1421 	add	a,_u32Addr
      000456 F5*00            [12] 1422 	mov	_u32Addr,a
      000458 EE               [12] 1423 	mov	a,r6
      000459 35*01            [12] 1424 	addc	a,(_u32Addr + 1)
      00045B F5*01            [12] 1425 	mov	(_u32Addr + 1),a
      00045D ED               [12] 1426 	mov	a,r5
      00045E 35*02            [12] 1427 	addc	a,(_u32Addr + 2)
      000460 F5*02            [12] 1428 	mov	(_u32Addr + 2),a
      000462 EC               [12] 1429 	mov	a,r4
      000463 35*03            [12] 1430 	addc	a,(_u32Addr + 3)
      000465 F5*03            [12] 1431 	mov	(_u32Addr + 3),a
                                   1432 ;	callback.c:218: u32Tmp = u8ReceiveBuff[2];
      000467 90r00r02         [24] 1433 	mov	dptr,#(_u8ReceiveBuff + 0x0002)
      00046A E0               [24] 1434 	movx	a,@dptr
      00046B FF               [12] 1435 	mov	r7,a
                                   1436 ;	callback.c:219: u32Addr += u32Tmp;
      00046C E4               [12] 1437 	clr	a
      00046D FE               [12] 1438 	mov	r6,a
      00046E FD               [12] 1439 	mov	r5,a
      00046F FC               [12] 1440 	mov	r4,a
      000470 EF               [12] 1441 	mov	a,r7
      000471 25*00            [12] 1442 	add	a,_u32Addr
      000473 F5*00            [12] 1443 	mov	_u32Addr,a
      000475 EE               [12] 1444 	mov	a,r6
      000476 35*01            [12] 1445 	addc	a,(_u32Addr + 1)
      000478 F5*01            [12] 1446 	mov	(_u32Addr + 1),a
      00047A ED               [12] 1447 	mov	a,r5
      00047B 35*02            [12] 1448 	addc	a,(_u32Addr + 2)
      00047D F5*02            [12] 1449 	mov	(_u32Addr + 2),a
      00047F EC               [12] 1450 	mov	a,r4
      000480 35*03            [12] 1451 	addc	a,(_u32Addr + 3)
      000482 F5*03            [12] 1452 	mov	(_u32Addr + 3),a
                                   1453 ;	callback.c:220: if (C2_WriteFlash(u32Addr, u8ReceiveBuff[6], &u8ReceiveBuff[7])) {
      000484 90r00r06         [24] 1454 	mov	dptr,#(_u8ReceiveBuff + 0x0006)
      000487 E0               [24] 1455 	movx	a,@dptr
      000488 F5*00            [12] 1456 	mov	_C2_WriteFlash_PARM_2,a
      00048A 75*00r07         [24] 1457 	mov	_C2_WriteFlash_PARM_3,#(_u8ReceiveBuff + 0x0007)
      00048D 75*01s00         [24] 1458 	mov	(_C2_WriteFlash_PARM_3 + 1),#((_u8ReceiveBuff + 0x0007) >> 8)
                                   1459 ;	1-genFromRTrack replaced	mov	(_C2_WriteFlash_PARM_3 + 2),#0x00
      000490 8E*02            [24] 1460 	mov	(_C2_WriteFlash_PARM_3 + 2),r6
      000492 85*00 82         [24] 1461 	mov	dpl,_u32Addr
      000495 85*01 83         [24] 1462 	mov	dph,(_u32Addr + 1)
      000498 85*02 F0         [24] 1463 	mov	b,(_u32Addr + 2)
      00049B E5*03            [12] 1464 	mov	a,(_u32Addr + 3)
      00049D 12r00r00         [24] 1465 	lcall	_C2_WriteFlash
      0004A0 E5 82            [12] 1466 	mov	a,dpl
      0004A2 60 08            [24] 1467 	jz	00159$
                                   1468 ;	callback.c:221: u8TransBuff[0] = 1;
      0004A4 90r00r00         [24] 1469 	mov	dptr,#_u8TransBuff
      0004A7 74 01            [12] 1470 	mov	a,#0x01
      0004A9 F0               [24] 1471 	movx	@dptr,a
      0004AA 80 05            [24] 1472 	sjmp	00160$
      0004AC                       1473 00159$:
                                   1474 ;	callback.c:223: u8TransBuff[0] = 0;
      0004AC 90r00r00         [24] 1475 	mov	dptr,#_u8TransBuff
      0004AF E4               [12] 1476 	clr	a
      0004B0 F0               [24] 1477 	movx	@dptr,a
      0004B1                       1478 00160$:
                                   1479 ;	callback.c:225: u8HidNum = 0;
      0004B1 75*00 00         [24] 1480 	mov	_u8HidNum,#0x00
                                   1481 ;	callback.c:226: break;
      0004B4 22               [24] 1482 	ret
      0004B5                       1483 00162$:
                                   1484 ;	callback.c:229: u16PageSize = u8ReceiveBuff[4] + 1;
      0004B5 90r00r04         [24] 1485 	mov	dptr,#(_u8ReceiveBuff + 0x0004)
      0004B8 E0               [24] 1486 	movx	a,@dptr
      0004B9 FF               [12] 1487 	mov	r7,a
      0004BA 7E 00            [12] 1488 	mov	r6,#0x00
      0004BC 74 01            [12] 1489 	mov	a,#0x01
      0004BE 2F               [12] 1490 	add	a,r7
      0004BF F5*07            [12] 1491 	mov	_u16PageSize,a
      0004C1 E4               [12] 1492 	clr	a
      0004C2 3E               [12] 1493 	addc	a,r6
      0004C3 F5*08            [12] 1494 	mov	(_u16PageSize + 1),a
                                   1495 ;	callback.c:230: if (u8ReceiveBuff[6]) {
      0004C5 90r00r06         [24] 1496 	mov	dptr,#(_u8ReceiveBuff + 0x0006)
      0004C8 E0               [24] 1497 	movx	a,@dptr
      0004C9 60 5A            [24] 1498 	jz	00202$
                                   1499 ;	callback.c:232: u16Addr = u8ReceiveBuff[2]*256+u8ReceiveBuff[1];
      0004CB 90r00r02         [24] 1500 	mov	dptr,#(_u8ReceiveBuff + 0x0002)
      0004CE E0               [24] 1501 	movx	a,@dptr
      0004CF FE               [12] 1502 	mov	r6,a
      0004D0 7F 00            [12] 1503 	mov	r7,#0x00
      0004D2 90r00r01         [24] 1504 	mov	dptr,#(_u8ReceiveBuff + 0x0001)
      0004D5 E0               [24] 1505 	movx	a,@dptr
      0004D6 FD               [12] 1506 	mov	r5,a
      0004D7 7C 00            [12] 1507 	mov	r4,#0x00
      0004D9 2F               [12] 1508 	add	a,r7
      0004DA F5*04            [12] 1509 	mov	_u16Addr,a
      0004DC EC               [12] 1510 	mov	a,r4
      0004DD 3E               [12] 1511 	addc	a,r6
      0004DE F5*05            [12] 1512 	mov	(_u16Addr + 1),a
                                   1513 ;	callback.c:233: for (i=0; i<u8ReceiveBuff[5]; ++i) {
      0004E0 7E 00            [12] 1514 	mov	r6,#0x00
      0004E2 7F 00            [12] 1515 	mov	r7,#0x00
      0004E4                       1516 00249$:
      0004E4 90r00r05         [24] 1517 	mov	dptr,#(_u8ReceiveBuff + 0x0005)
      0004E7 E0               [24] 1518 	movx	a,@dptr
      0004E8 FD               [12] 1519 	mov	r5,a
      0004E9 7C 00            [12] 1520 	mov	r4,#0x00
      0004EB C3               [12] 1521 	clr	c
      0004EC EE               [12] 1522 	mov	a,r6
      0004ED 9D               [12] 1523 	subb	a,r5
      0004EE EF               [12] 1524 	mov	a,r7
      0004EF 9C               [12] 1525 	subb	a,r4
      0004F0 40 01            [24] 1526 	jc	00690$
      0004F2 22               [24] 1527 	ret
      0004F3                       1528 00690$:
                                   1529 ;	callback.c:234: ispWriteEeprom(u16Addr+i, u8ReceiveBuff[i+8]);
      0004F3 EE               [12] 1530 	mov	a,r6
      0004F4 25*04            [12] 1531 	add	a,_u16Addr
      0004F6 FC               [12] 1532 	mov	r4,a
      0004F7 EF               [12] 1533 	mov	a,r7
      0004F8 35*05            [12] 1534 	addc	a,(_u16Addr + 1)
      0004FA FD               [12] 1535 	mov	r5,a
      0004FB 74 08            [12] 1536 	mov	a,#0x08
      0004FD 2E               [12] 1537 	add	a,r6
      0004FE FA               [12] 1538 	mov	r2,a
      0004FF E4               [12] 1539 	clr	a
      000500 3F               [12] 1540 	addc	a,r7
      000501 FB               [12] 1541 	mov	r3,a
      000502 EA               [12] 1542 	mov	a,r2
      000503 24r00            [12] 1543 	add	a,#_u8ReceiveBuff
      000505 F5 82            [12] 1544 	mov	dpl,a
      000507 EB               [12] 1545 	mov	a,r3
      000508 34s00            [12] 1546 	addc	a,#(_u8ReceiveBuff >> 8)
      00050A F5 83            [12] 1547 	mov	dph,a
      00050C E0               [24] 1548 	movx	a,@dptr
      00050D F5*00            [12] 1549 	mov	_ispWriteEeprom_PARM_2,a
      00050F 8C 82            [24] 1550 	mov	dpl,r4
      000511 8D 83            [24] 1551 	mov	dph,r5
      000513 C0 07            [24] 1552 	push	ar7
      000515 C0 06            [24] 1553 	push	ar6
      000517 12r00r00         [24] 1554 	lcall	_ispWriteEeprom
      00051A D0 06            [24] 1555 	pop	ar6
      00051C D0 07            [24] 1556 	pop	ar7
                                   1557 ;	callback.c:233: for (i=0; i<u8ReceiveBuff[5]; ++i) {
      00051E 0E               [12] 1558 	inc	r6
      00051F BE 00 C2         [24] 1559 	cjne	r6,#0x00,00249$
      000522 0F               [12] 1560 	inc	r7
      000523 80 BF            [24] 1561 	sjmp	00249$
      000525                       1562 00202$:
                                   1563 ;	callback.c:238: if(u8Chip==CHIP_89S) {
      000525 74 01            [12] 1564 	mov	a,#0x01
      000527 B5*00 5A         [24] 1565 	cjne	a,_u8Chip,00199$
                                   1566 ;	callback.c:239: u16Addr=u8ReceiveBuff[2]*256+u8ReceiveBuff[1];
      00052A 90r00r02         [24] 1567 	mov	dptr,#(_u8ReceiveBuff + 0x0002)
      00052D E0               [24] 1568 	movx	a,@dptr
      00052E FE               [12] 1569 	mov	r6,a
      00052F 7F 00            [12] 1570 	mov	r7,#0x00
      000531 90r00r01         [24] 1571 	mov	dptr,#(_u8ReceiveBuff + 0x0001)
      000534 E0               [24] 1572 	movx	a,@dptr
      000535 FD               [12] 1573 	mov	r5,a
      000536 7C 00            [12] 1574 	mov	r4,#0x00
      000538 2F               [12] 1575 	add	a,r7
      000539 F5*04            [12] 1576 	mov	_u16Addr,a
      00053B EC               [12] 1577 	mov	a,r4
      00053C 3E               [12] 1578 	addc	a,r6
      00053D F5*05            [12] 1579 	mov	(_u16Addr + 1),a
                                   1580 ;	callback.c:242: for(i=0; i<u8ReceiveBuff[5]; ++i) {
      00053F 7E 00            [12] 1581 	mov	r6,#0x00
      000541 7F 00            [12] 1582 	mov	r7,#0x00
      000543                       1583 00252$:
      000543 90r00r05         [24] 1584 	mov	dptr,#(_u8ReceiveBuff + 0x0005)
      000546 E0               [24] 1585 	movx	a,@dptr
      000547 FD               [12] 1586 	mov	r5,a
      000548 7C 00            [12] 1587 	mov	r4,#0x00
      00054A C3               [12] 1588 	clr	c
      00054B EE               [12] 1589 	mov	a,r6
      00054C 9D               [12] 1590 	subb	a,r5
      00054D EF               [12] 1591 	mov	a,r7
      00054E 9C               [12] 1592 	subb	a,r4
      00054F 40 01            [24] 1593 	jc	00694$
      000551 22               [24] 1594 	ret
      000552                       1595 00694$:
                                   1596 ;	callback.c:243: ispWriteFlashByte(u16Addr+i, u8ReceiveBuff[i+8]);
      000552 EE               [12] 1597 	mov	a,r6
      000553 25*04            [12] 1598 	add	a,_u16Addr
      000555 FC               [12] 1599 	mov	r4,a
      000556 EF               [12] 1600 	mov	a,r7
      000557 35*05            [12] 1601 	addc	a,(_u16Addr + 1)
      000559 FD               [12] 1602 	mov	r5,a
      00055A 74 08            [12] 1603 	mov	a,#0x08
      00055C 2E               [12] 1604 	add	a,r6
      00055D FA               [12] 1605 	mov	r2,a
      00055E E4               [12] 1606 	clr	a
      00055F 3F               [12] 1607 	addc	a,r7
      000560 FB               [12] 1608 	mov	r3,a
      000561 EA               [12] 1609 	mov	a,r2
      000562 24r00            [12] 1610 	add	a,#_u8ReceiveBuff
      000564 F5 82            [12] 1611 	mov	dpl,a
      000566 EB               [12] 1612 	mov	a,r3
      000567 34s00            [12] 1613 	addc	a,#(_u8ReceiveBuff >> 8)
      000569 F5 83            [12] 1614 	mov	dph,a
      00056B E0               [24] 1615 	movx	a,@dptr
      00056C F5*00            [12] 1616 	mov	_ispWriteFlashByte_PARM_2,a
      00056E 8C 82            [24] 1617 	mov	dpl,r4
      000570 8D 83            [24] 1618 	mov	dph,r5
      000572 C0 07            [24] 1619 	push	ar7
      000574 C0 06            [24] 1620 	push	ar6
      000576 12r00r00         [24] 1621 	lcall	_ispWriteFlashByte
      000579 D0 06            [24] 1622 	pop	ar6
      00057B D0 07            [24] 1623 	pop	ar7
                                   1624 ;	callback.c:242: for(i=0; i<u8ReceiveBuff[5]; ++i) {
      00057D 0E               [12] 1625 	inc	r6
      00057E BE 00 C2         [24] 1626 	cjne	r6,#0x00,00252$
      000581 0F               [12] 1627 	inc	r7
      000582 80 BF            [24] 1628 	sjmp	00252$
      000584                       1629 00199$:
                                   1630 ;	callback.c:251: if(u16PageSize <= 0x80) {
      000584 C3               [12] 1631 	clr	c
      000585 74 80            [12] 1632 	mov	a,#0x80
      000587 95*07            [12] 1633 	subb	a,_u16PageSize
      000589 E4               [12] 1634 	clr	a
      00058A 95*08            [12] 1635 	subb	a,(_u16PageSize + 1)
      00058C 50 03            [24] 1636 	jnc	00696$
      00058E 02r06r1E         [24] 1637 	ljmp	00196$
      000591                       1638 00696$:
                                   1639 ;	callback.c:252: u16Addr = u8ReceiveBuff[2]*256+u8ReceiveBuff[1];
      000591 90r00r02         [24] 1640 	mov	dptr,#(_u8ReceiveBuff + 0x0002)
      000594 E0               [24] 1641 	movx	a,@dptr
      000595 FE               [12] 1642 	mov	r6,a
      000596 7F 00            [12] 1643 	mov	r7,#0x00
      000598 90r00r01         [24] 1644 	mov	dptr,#(_u8ReceiveBuff + 0x0001)
      00059B E0               [24] 1645 	movx	a,@dptr
      00059C 7C 00            [12] 1646 	mov	r4,#0x00
      00059E 2F               [12] 1647 	add	a,r7
      00059F F5*04            [12] 1648 	mov	_u16Addr,a
      0005A1 EC               [12] 1649 	mov	a,r4
      0005A2 3E               [12] 1650 	addc	a,r6
      0005A3 F5*05            [12] 1651 	mov	(_u16Addr + 1),a
                                   1652 ;	callback.c:255: u8NumPage = u8ReceiveBuff[5]/u16PageSize;
      0005A5 90r00r05         [24] 1653 	mov	dptr,#(_u8ReceiveBuff + 0x0005)
      0005A8 E0               [24] 1654 	movx	a,@dptr
      0005A9 FF               [12] 1655 	mov	r7,a
      0005AA 7E 00            [12] 1656 	mov	r6,#0x00
      0005AC 85*07*00         [24] 1657 	mov	__divuint_PARM_2,_u16PageSize
      0005AF 85*08*01         [24] 1658 	mov	(__divuint_PARM_2 + 1),(_u16PageSize + 1)
      0005B2 8F 82            [24] 1659 	mov	dpl,r7
      0005B4 8E 83            [24] 1660 	mov	dph,r6
      0005B6 12r00r00         [24] 1661 	lcall	__divuint
      0005B9 AE 82            [24] 1662 	mov	r6,dpl
      0005BB 8E*09            [24] 1663 	mov	_u8NumPage,r6
                                   1664 ;	callback.c:256: for(i=0; i<u8NumPage; ++i) {
      0005BD 7E 00            [12] 1665 	mov	r6,#0x00
      0005BF 7F 00            [12] 1666 	mov	r7,#0x00
      0005C1                       1667 00255$:
      0005C1 AC*09            [24] 1668 	mov	r4,_u8NumPage
      0005C3 7D 00            [12] 1669 	mov	r5,#0x00
      0005C5 C3               [12] 1670 	clr	c
      0005C6 EE               [12] 1671 	mov	a,r6
      0005C7 9C               [12] 1672 	subb	a,r4
      0005C8 EF               [12] 1673 	mov	a,r7
      0005C9 9D               [12] 1674 	subb	a,r5
      0005CA 40 01            [24] 1675 	jc	00697$
      0005CC 22               [24] 1676 	ret
      0005CD                       1677 00697$:
                                   1678 ;	callback.c:257: ispWriteFlashPage(u16Addr+i*u16PageSize, &u8ReceiveBuff[8+i*u16PageSize], u16PageSize);
      0005CD 85*07*00         [24] 1679 	mov	__mulint_PARM_2,_u16PageSize
      0005D0 85*08*01         [24] 1680 	mov	(__mulint_PARM_2 + 1),(_u16PageSize + 1)
      0005D3 8E 82            [24] 1681 	mov	dpl,r6
      0005D5 8F 83            [24] 1682 	mov	dph,r7
      0005D7 C0 07            [24] 1683 	push	ar7
      0005D9 C0 06            [24] 1684 	push	ar6
      0005DB 12r00r00         [24] 1685 	lcall	__mulint
      0005DE AC 82            [24] 1686 	mov	r4,dpl
      0005E0 AD 83            [24] 1687 	mov	r5,dph
      0005E2 D0 06            [24] 1688 	pop	ar6
      0005E4 D0 07            [24] 1689 	pop	ar7
      0005E6 EC               [12] 1690 	mov	a,r4
      0005E7 25*04            [12] 1691 	add	a,_u16Addr
      0005E9 F5 82            [12] 1692 	mov	dpl,a
      0005EB ED               [12] 1693 	mov	a,r5
      0005EC 35*05            [12] 1694 	addc	a,(_u16Addr + 1)
      0005EE F5 83            [12] 1695 	mov	dph,a
      0005F0 74 08            [12] 1696 	mov	a,#0x08
      0005F2 2C               [12] 1697 	add	a,r4
      0005F3 FC               [12] 1698 	mov	r4,a
      0005F4 E4               [12] 1699 	clr	a
      0005F5 3D               [12] 1700 	addc	a,r5
      0005F6 FD               [12] 1701 	mov	r5,a
      0005F7 EC               [12] 1702 	mov	a,r4
      0005F8 24r00            [12] 1703 	add	a,#_u8ReceiveBuff
      0005FA FC               [12] 1704 	mov	r4,a
      0005FB ED               [12] 1705 	mov	a,r5
      0005FC 34s00            [12] 1706 	addc	a,#(_u8ReceiveBuff >> 8)
      0005FE FD               [12] 1707 	mov	r5,a
      0005FF 8C*00            [24] 1708 	mov	_ispWriteFlashPage_PARM_2,r4
      000601 8D*01            [24] 1709 	mov	(_ispWriteFlashPage_PARM_2 + 1),r5
      000603 75*02 00         [24] 1710 	mov	(_ispWriteFlashPage_PARM_2 + 2),#0x00
      000606 85*07*00         [24] 1711 	mov	_ispWriteFlashPage_PARM_3,_u16PageSize
      000609 85*08*01         [24] 1712 	mov	(_ispWriteFlashPage_PARM_3 + 1),(_u16PageSize + 1)
      00060C C0 07            [24] 1713 	push	ar7
      00060E C0 06            [24] 1714 	push	ar6
      000610 12r00r00         [24] 1715 	lcall	_ispWriteFlashPage
      000613 D0 06            [24] 1716 	pop	ar6
      000615 D0 07            [24] 1717 	pop	ar7
                                   1718 ;	callback.c:256: for(i=0; i<u8NumPage; ++i) {
      000617 0E               [12] 1719 	inc	r6
      000618 BE 00 A6         [24] 1720 	cjne	r6,#0x00,00255$
      00061B 0F               [12] 1721 	inc	r7
      00061C 80 A3            [24] 1722 	sjmp	00255$
      00061E                       1723 00196$:
                                   1724 ;	callback.c:266: if(u8ReceiveBuff[5]==0x80) {
      00061E 90r00r05         [24] 1725 	mov	dptr,#(_u8ReceiveBuff + 0x0005)
      000621 E0               [24] 1726 	movx	a,@dptr
      000622 FF               [12] 1727 	mov	r7,a
      000623 BF 80 02         [24] 1728 	cjne	r7,#0x80,00699$
      000626 80 03            [24] 1729 	sjmp	00700$
      000628                       1730 00699$:
      000628 02r07r5B         [24] 1731 	ljmp	00311$
      00062B                       1732 00700$:
                                   1733 ;	callback.c:268: u32Tmp = u8ReceiveBuff[3];
      00062B 90r00r03         [24] 1734 	mov	dptr,#(_u8ReceiveBuff + 0x0003)
      00062E E0               [24] 1735 	movx	a,@dptr
      00062F FF               [12] 1736 	mov	r7,a
      000630 7E 00            [12] 1737 	mov	r6,#0x00
                                   1738 ;	callback.c:269: u32Tmp <<= 16;
      000632 8E*03            [24] 1739 	mov	(_u32Addr + 3),r6
      000634 8F*02            [24] 1740 	mov	(_u32Addr + 2),r7
                                   1741 ;	1-genFromRTrack replaced	mov	_u32Addr,#0x00
      000636 8E*00            [24] 1742 	mov	_u32Addr,r6
                                   1743 ;	1-genFromRTrack replaced	mov	(_u32Addr + 1),#0x00
      000638 8E*01            [24] 1744 	mov	(_u32Addr + 1),r6
                                   1745 ;	callback.c:271: u32Tmp = u8ReceiveBuff[2];
      00063A 90r00r02         [24] 1746 	mov	dptr,#(_u8ReceiveBuff + 0x0002)
      00063D E0               [24] 1747 	movx	a,@dptr
      00063E FF               [12] 1748 	mov	r7,a
      00063F 7E 00            [12] 1749 	mov	r6,#0x00
      000641 7D 00            [12] 1750 	mov	r5,#0x00
                                   1751 ;	callback.c:272: u32Tmp <<= 8;
      000643 8D 04            [24] 1752 	mov	ar4,r5
      000645 8E 05            [24] 1753 	mov	ar5,r6
      000647 8F 06            [24] 1754 	mov	ar6,r7
                                   1755 ;	callback.c:273: u32Addr += u32Tmp;
      000649 E4               [12] 1756 	clr	a
      00064A 25*00            [12] 1757 	add	a,_u32Addr
      00064C F5*00            [12] 1758 	mov	_u32Addr,a
      00064E EE               [12] 1759 	mov	a,r6
      00064F 35*01            [12] 1760 	addc	a,(_u32Addr + 1)
      000651 F5*01            [12] 1761 	mov	(_u32Addr + 1),a
      000653 ED               [12] 1762 	mov	a,r5
      000654 35*02            [12] 1763 	addc	a,(_u32Addr + 2)
      000656 F5*02            [12] 1764 	mov	(_u32Addr + 2),a
      000658 EC               [12] 1765 	mov	a,r4
      000659 35*03            [12] 1766 	addc	a,(_u32Addr + 3)
      00065B F5*03            [12] 1767 	mov	(_u32Addr + 3),a
                                   1768 ;	callback.c:274: u32Tmp = u8ReceiveBuff[1];
      00065D 90r00r01         [24] 1769 	mov	dptr,#(_u8ReceiveBuff + 0x0001)
      000660 E0               [24] 1770 	movx	a,@dptr
      000661 FF               [12] 1771 	mov	r7,a
                                   1772 ;	callback.c:275: u32Addr += u32Tmp;
      000662 E4               [12] 1773 	clr	a
      000663 FE               [12] 1774 	mov	r6,a
      000664 FD               [12] 1775 	mov	r5,a
      000665 FC               [12] 1776 	mov	r4,a
      000666 EF               [12] 1777 	mov	a,r7
      000667 25*00            [12] 1778 	add	a,_u32Addr
      000669 F5*00            [12] 1779 	mov	_u32Addr,a
      00066B EE               [12] 1780 	mov	a,r6
      00066C 35*01            [12] 1781 	addc	a,(_u32Addr + 1)
      00066E F5*01            [12] 1782 	mov	(_u32Addr + 1),a
      000670 ED               [12] 1783 	mov	a,r5
      000671 35*02            [12] 1784 	addc	a,(_u32Addr + 2)
      000673 F5*02            [12] 1785 	mov	(_u32Addr + 2),a
      000675 EC               [12] 1786 	mov	a,r4
      000676 35*03            [12] 1787 	addc	a,(_u32Addr + 3)
                                   1788 ;	callback.c:277: u32Addr>>=1;
      000678 F5*03            [12] 1789 	mov	(_u32Addr + 3),a
      00067A C3               [12] 1790 	clr	c
      00067B 13               [12] 1791 	rrc	a
      00067C F5*03            [12] 1792 	mov	(_u32Addr + 3),a
      00067E E5*02            [12] 1793 	mov	a,(_u32Addr + 2)
      000680 13               [12] 1794 	rrc	a
      000681 F5*02            [12] 1795 	mov	(_u32Addr + 2),a
      000683 E5*01            [12] 1796 	mov	a,(_u32Addr + 1)
      000685 13               [12] 1797 	rrc	a
      000686 F5*01            [12] 1798 	mov	(_u32Addr + 1),a
      000688 E5*00            [12] 1799 	mov	a,_u32Addr
      00068A 13               [12] 1800 	rrc	a
      00068B F5*00            [12] 1801 	mov	_u32Addr,a
                                   1802 ;	callback.c:278: u16Addr=u32Addr;
      00068D 85*00*04         [24] 1803 	mov	_u16Addr,_u32Addr
      000690 85*01*05         [24] 1804 	mov	(_u16Addr + 1),(_u32Addr + 1)
                                   1805 ;	callback.c:279: u8ExtAddr=(u32Addr>>16);
                                   1806 ;	callback.c:283: if(u8ExtAddr) {
      000693 E5*02            [12] 1807 	mov	a,(_u32Addr + 2)
      000695 F5*06            [12] 1808 	mov	_u8ExtAddr,a
      000697 60 18            [24] 1809 	jz	00307$
                                   1810 ;	callback.c:284: spi_send(0x4D);
      000699 75 82 4D         [24] 1811 	mov	dpl,#0x4d
      00069C 12r00r00         [24] 1812 	lcall	_spi_send
                                   1813 ;	callback.c:285: spi_send(0x00);
      00069F 75 82 00         [24] 1814 	mov	dpl,#0x00
      0006A2 12r00r00         [24] 1815 	lcall	_spi_send
                                   1816 ;	callback.c:286: spi_send(u8ExtAddr);
      0006A5 85*06 82         [24] 1817 	mov	dpl,_u8ExtAddr
      0006A8 12r00r00         [24] 1818 	lcall	_spi_send
                                   1819 ;	callback.c:287: spi_send(0x00);
      0006AB 75 82 00         [24] 1820 	mov	dpl,#0x00
      0006AE 12r00r00         [24] 1821 	lcall	_spi_send
                                   1822 ;	callback.c:289: for(i=0; i<0x80; ++i) {
      0006B1                       1823 00307$:
      0006B1 7E 00            [12] 1824 	mov	r6,#0x00
      0006B3 7F 00            [12] 1825 	mov	r7,#0x00
      0006B5                       1826 00257$:
                                   1827 ;	callback.c:290: if(i%2) {
      0006B5 EE               [12] 1828 	mov	a,r6
      0006B6 30 E0 2B         [24] 1829 	jnb	acc.0,00169$
                                   1830 ;	callback.c:292: spi_send(0x48);
      0006B9 75 82 48         [24] 1831 	mov	dpl,#0x48
      0006BC C0 07            [24] 1832 	push	ar7
      0006BE C0 06            [24] 1833 	push	ar6
      0006C0 12r00r00         [24] 1834 	lcall	_spi_send
                                   1835 ;	callback.c:293: spi_send(0x00);
      0006C3 75 82 00         [24] 1836 	mov	dpl,#0x00
      0006C6 12r00r00         [24] 1837 	lcall	_spi_send
      0006C9 D0 06            [24] 1838 	pop	ar6
      0006CB D0 07            [24] 1839 	pop	ar7
                                   1840 ;	callback.c:294: spi_send(i/2);
      0006CD 8E 04            [24] 1841 	mov	ar4,r6
      0006CF EF               [12] 1842 	mov	a,r7
      0006D0 C3               [12] 1843 	clr	c
      0006D1 13               [12] 1844 	rrc	a
      0006D2 CC               [12] 1845 	xch	a,r4
      0006D3 13               [12] 1846 	rrc	a
      0006D4 CC               [12] 1847 	xch	a,r4
      0006D5 8C 82            [24] 1848 	mov	dpl,r4
      0006D7 C0 07            [24] 1849 	push	ar7
      0006D9 C0 06            [24] 1850 	push	ar6
      0006DB 12r00r00         [24] 1851 	lcall	_spi_send
      0006DE D0 06            [24] 1852 	pop	ar6
      0006E0 D0 07            [24] 1853 	pop	ar7
      0006E2 80 29            [24] 1854 	sjmp	00170$
      0006E4                       1855 00169$:
                                   1856 ;	callback.c:297: spi_send(0x40);
      0006E4 75 82 40         [24] 1857 	mov	dpl,#0x40
      0006E7 C0 07            [24] 1858 	push	ar7
      0006E9 C0 06            [24] 1859 	push	ar6
      0006EB 12r00r00         [24] 1860 	lcall	_spi_send
                                   1861 ;	callback.c:298: spi_send(0x00);
      0006EE 75 82 00         [24] 1862 	mov	dpl,#0x00
      0006F1 12r00r00         [24] 1863 	lcall	_spi_send
      0006F4 D0 06            [24] 1864 	pop	ar6
      0006F6 D0 07            [24] 1865 	pop	ar7
                                   1866 ;	callback.c:299: spi_send(i/2);
      0006F8 8E 04            [24] 1867 	mov	ar4,r6
      0006FA EF               [12] 1868 	mov	a,r7
      0006FB C3               [12] 1869 	clr	c
      0006FC 13               [12] 1870 	rrc	a
      0006FD CC               [12] 1871 	xch	a,r4
      0006FE 13               [12] 1872 	rrc	a
      0006FF CC               [12] 1873 	xch	a,r4
      000700 8C 82            [24] 1874 	mov	dpl,r4
      000702 C0 07            [24] 1875 	push	ar7
      000704 C0 06            [24] 1876 	push	ar6
      000706 12r00r00         [24] 1877 	lcall	_spi_send
      000709 D0 06            [24] 1878 	pop	ar6
      00070B D0 07            [24] 1879 	pop	ar7
      00070D                       1880 00170$:
                                   1881 ;	callback.c:301: spi_send(u8ReceiveBuff[i+8]);
      00070D 74 08            [12] 1882 	mov	a,#0x08
      00070F 2E               [12] 1883 	add	a,r6
      000710 FC               [12] 1884 	mov	r4,a
      000711 E4               [12] 1885 	clr	a
      000712 3F               [12] 1886 	addc	a,r7
      000713 FD               [12] 1887 	mov	r5,a
      000714 EC               [12] 1888 	mov	a,r4
      000715 24r00            [12] 1889 	add	a,#_u8ReceiveBuff
      000717 F5 82            [12] 1890 	mov	dpl,a
      000719 ED               [12] 1891 	mov	a,r5
      00071A 34s00            [12] 1892 	addc	a,#(_u8ReceiveBuff >> 8)
      00071C F5 83            [12] 1893 	mov	dph,a
      00071E E0               [24] 1894 	movx	a,@dptr
      00071F F5 82            [12] 1895 	mov	dpl,a
      000721 C0 07            [24] 1896 	push	ar7
      000723 C0 06            [24] 1897 	push	ar6
      000725 12r00r00         [24] 1898 	lcall	_spi_send
      000728 D0 06            [24] 1899 	pop	ar6
      00072A D0 07            [24] 1900 	pop	ar7
                                   1901 ;	callback.c:289: for(i=0; i<0x80; ++i) {
      00072C 0E               [12] 1902 	inc	r6
      00072D BE 00 01         [24] 1903 	cjne	r6,#0x00,00703$
      000730 0F               [12] 1904 	inc	r7
      000731                       1905 00703$:
      000731 C3               [12] 1906 	clr	c
      000732 EE               [12] 1907 	mov	a,r6
      000733 94 80            [12] 1908 	subb	a,#0x80
      000735 EF               [12] 1909 	mov	a,r7
      000736 94 00            [12] 1910 	subb	a,#0x00
      000738 50 03            [24] 1911 	jnc	00704$
      00073A 02r06rB5         [24] 1912 	ljmp	00257$
      00073D                       1913 00704$:
                                   1914 ;	callback.c:303: u8Pos=FindNotBlank(&u8ReceiveBuff[8], 0x80);
      00073D 75*00 80         [24] 1915 	mov	_FindNotBlank_PARM_2,#0x80
      000740 90r00r08         [24] 1916 	mov	dptr,#(_u8ReceiveBuff + 0x0008)
      000743 75 F0 00         [24] 1917 	mov	b,#0x00
      000746 12r00r00         [24] 1918 	lcall	_FindNotBlank
      000749 85 82*0B         [24] 1919 	mov	_u8Pos,dpl
                                   1920 ;	callback.c:304: if(u8Pos!=0xFF) {
      00074C 74 FF            [12] 1921 	mov	a,#0xff
      00074E B5*0B 02         [24] 1922 	cjne	a,_u8Pos,00705$
      000751 80 04            [24] 1923 	sjmp	00173$
      000753                       1924 00705$:
                                   1925 ;	callback.c:305: u8NeedFind=0;
      000753 75*0A 00         [24] 1926 	mov	_u8NeedFind,#0x00
      000756 22               [24] 1927 	ret
      000757                       1928 00173$:
                                   1929 ;	callback.c:307: u8NeedFind=1;
      000757 75*0A 01         [24] 1930 	mov	_u8NeedFind,#0x01
      00075A 22               [24] 1931 	ret
                                   1932 ;	callback.c:311: for(i=0; i<0x80; ++i) {
      00075B                       1933 00311$:
      00075B 7E 00            [12] 1934 	mov	r6,#0x00
      00075D 7F 00            [12] 1935 	mov	r7,#0x00
      00075F                       1936 00259$:
                                   1937 ;	callback.c:312: if(i%2) {
      00075F EE               [12] 1938 	mov	a,r6
      000760 30 E0 2E         [24] 1939 	jnb	acc.0,00176$
                                   1940 ;	callback.c:314: spi_send(0x48);
      000763 75 82 48         [24] 1941 	mov	dpl,#0x48
      000766 C0 07            [24] 1942 	push	ar7
      000768 C0 06            [24] 1943 	push	ar6
      00076A 12r00r00         [24] 1944 	lcall	_spi_send
                                   1945 ;	callback.c:315: spi_send(0x00);
      00076D 75 82 00         [24] 1946 	mov	dpl,#0x00
      000770 12r00r00         [24] 1947 	lcall	_spi_send
      000773 D0 06            [24] 1948 	pop	ar6
      000775 D0 07            [24] 1949 	pop	ar7
                                   1950 ;	callback.c:316: spi_send(i/2+0x40);
      000777 8E 04            [24] 1951 	mov	ar4,r6
      000779 EF               [12] 1952 	mov	a,r7
      00077A C3               [12] 1953 	clr	c
      00077B 13               [12] 1954 	rrc	a
      00077C CC               [12] 1955 	xch	a,r4
      00077D 13               [12] 1956 	rrc	a
      00077E CC               [12] 1957 	xch	a,r4
      00077F 74 40            [12] 1958 	mov	a,#0x40
      000781 2C               [12] 1959 	add	a,r4
      000782 F5 82            [12] 1960 	mov	dpl,a
      000784 C0 07            [24] 1961 	push	ar7
      000786 C0 06            [24] 1962 	push	ar6
      000788 12r00r00         [24] 1963 	lcall	_spi_send
      00078B D0 06            [24] 1964 	pop	ar6
      00078D D0 07            [24] 1965 	pop	ar7
      00078F 80 2C            [24] 1966 	sjmp	00177$
      000791                       1967 00176$:
                                   1968 ;	callback.c:319: spi_send(0x40);
      000791 75 82 40         [24] 1969 	mov	dpl,#0x40
      000794 C0 07            [24] 1970 	push	ar7
      000796 C0 06            [24] 1971 	push	ar6
      000798 12r00r00         [24] 1972 	lcall	_spi_send
                                   1973 ;	callback.c:320: spi_send(0x00);
      00079B 75 82 00         [24] 1974 	mov	dpl,#0x00
      00079E 12r00r00         [24] 1975 	lcall	_spi_send
      0007A1 D0 06            [24] 1976 	pop	ar6
      0007A3 D0 07            [24] 1977 	pop	ar7
                                   1978 ;	callback.c:321: spi_send(i/2+0x40);
      0007A5 8E 04            [24] 1979 	mov	ar4,r6
      0007A7 EF               [12] 1980 	mov	a,r7
      0007A8 C3               [12] 1981 	clr	c
      0007A9 13               [12] 1982 	rrc	a
      0007AA CC               [12] 1983 	xch	a,r4
      0007AB 13               [12] 1984 	rrc	a
      0007AC CC               [12] 1985 	xch	a,r4
      0007AD 74 40            [12] 1986 	mov	a,#0x40
      0007AF 2C               [12] 1987 	add	a,r4
      0007B0 F5 82            [12] 1988 	mov	dpl,a
      0007B2 C0 07            [24] 1989 	push	ar7
      0007B4 C0 06            [24] 1990 	push	ar6
      0007B6 12r00r00         [24] 1991 	lcall	_spi_send
      0007B9 D0 06            [24] 1992 	pop	ar6
      0007BB D0 07            [24] 1993 	pop	ar7
      0007BD                       1994 00177$:
                                   1995 ;	callback.c:323: spi_send(u8ReceiveBuff[i+8]);
      0007BD 74 08            [12] 1996 	mov	a,#0x08
      0007BF 2E               [12] 1997 	add	a,r6
      0007C0 FC               [12] 1998 	mov	r4,a
      0007C1 E4               [12] 1999 	clr	a
      0007C2 3F               [12] 2000 	addc	a,r7
      0007C3 FD               [12] 2001 	mov	r5,a
      0007C4 EC               [12] 2002 	mov	a,r4
      0007C5 24r00            [12] 2003 	add	a,#_u8ReceiveBuff
      0007C7 F5 82            [12] 2004 	mov	dpl,a
      0007C9 ED               [12] 2005 	mov	a,r5
      0007CA 34s00            [12] 2006 	addc	a,#(_u8ReceiveBuff >> 8)
      0007CC F5 83            [12] 2007 	mov	dph,a
      0007CE E0               [24] 2008 	movx	a,@dptr
      0007CF F5 82            [12] 2009 	mov	dpl,a
      0007D1 C0 07            [24] 2010 	push	ar7
      0007D3 C0 06            [24] 2011 	push	ar6
      0007D5 12r00r00         [24] 2012 	lcall	_spi_send
      0007D8 D0 06            [24] 2013 	pop	ar6
      0007DA D0 07            [24] 2014 	pop	ar7
                                   2015 ;	callback.c:311: for(i=0; i<0x80; ++i) {
      0007DC 0E               [12] 2016 	inc	r6
      0007DD BE 00 01         [24] 2017 	cjne	r6,#0x00,00707$
      0007E0 0F               [12] 2018 	inc	r7
      0007E1                       2019 00707$:
      0007E1 C3               [12] 2020 	clr	c
      0007E2 EE               [12] 2021 	mov	a,r6
      0007E3 94 80            [12] 2022 	subb	a,#0x80
      0007E5 EF               [12] 2023 	mov	a,r7
      0007E6 94 00            [12] 2024 	subb	a,#0x00
      0007E8 50 03            [24] 2025 	jnc	00708$
      0007EA 02r07r5F         [24] 2026 	ljmp	00259$
      0007ED                       2027 00708$:
                                   2028 ;	callback.c:325: spi_send(0x4C);
      0007ED 75 82 4C         [24] 2029 	mov	dpl,#0x4c
      0007F0 12r00r00         [24] 2030 	lcall	_spi_send
                                   2031 ;	callback.c:326: spi_send(u16Addr>>8);
      0007F3 85*05 82         [24] 2032 	mov	dpl,(_u16Addr + 1)
      0007F6 12r00r00         [24] 2033 	lcall	_spi_send
                                   2034 ;	callback.c:327: spi_send(u16Addr);
      0007F9 85*04 82         [24] 2035 	mov	dpl,_u16Addr
      0007FC 12r00r00         [24] 2036 	lcall	_spi_send
                                   2037 ;	callback.c:328: spi_send(0x00);
      0007FF 75 82 00         [24] 2038 	mov	dpl,#0x00
      000802 12r00r00         [24] 2039 	lcall	_spi_send
                                   2040 ;	callback.c:329: if(u8NeedFind) {
      000805 E5*0A            [12] 2041 	mov	a,_u8NeedFind
      000807 60 19            [24] 2042 	jz	00180$
                                   2043 ;	callback.c:332: u8Pos=FindNotBlank(&u8ReceiveBuff[8], 0x80);
      000809 75*00 80         [24] 2044 	mov	_FindNotBlank_PARM_2,#0x80
      00080C 90r00r08         [24] 2045 	mov	dptr,#(_u8ReceiveBuff + 0x0008)
      00080F 75 F0 00         [24] 2046 	mov	b,#0x00
      000812 12r00r00         [24] 2047 	lcall	_FindNotBlank
      000815 85 82*0B         [24] 2048 	mov	_u8Pos,dpl
                                   2049 ;	callback.c:333: u8Pos+=0x80;
      000818 AF*0B            [24] 2050 	mov	r7,_u8Pos
      00081A 74 80            [12] 2051 	mov	a,#0x80
      00081C 2F               [12] 2052 	add	a,r7
      00081D F5*0B            [12] 2053 	mov	_u8Pos,a
                                   2054 ;	callback.c:334: u8NeedFind=0;
      00081F 75*0A 00         [24] 2055 	mov	_u8NeedFind,#0x00
      000822                       2056 00180$:
                                   2057 ;	callback.c:337: if(u8NeedFind==0) {
      000822 E5*0A            [12] 2058 	mov	a,_u8NeedFind
      000824 60 03            [24] 2059 	jz	00710$
      000826 02r08rB1         [24] 2060 	ljmp	00190$
      000829                       2061 00710$:
                                   2062 ;	callback.c:339: for(i=0; i<10; ++i) {
      000829 7E 00            [12] 2063 	mov	r6,#0x00
      00082B 7F 00            [12] 2064 	mov	r7,#0x00
      00082D                       2065 00261$:
                                   2066 ;	callback.c:340: Delay_Ms(1);
      00082D 90 00 01         [24] 2067 	mov	dptr,#0x0001
      000830 C0 07            [24] 2068 	push	ar7
      000832 C0 06            [24] 2069 	push	ar6
      000834 12r00r00         [24] 2070 	lcall	_Delay_Ms
      000837 D0 06            [24] 2071 	pop	ar6
      000839 D0 07            [24] 2072 	pop	ar7
                                   2073 ;	callback.c:342: if(u8Pos%2) {
      00083B AC*0B            [24] 2074 	mov	r4,_u8Pos
      00083D 7D 00            [12] 2075 	mov	r5,#0x00
      00083F EC               [12] 2076 	mov	a,r4
      000840 30 E0 2E         [24] 2077 	jnb	acc.0,00186$
                                   2078 ;	callback.c:344: if(ispReadAvrHi(u16Addr+u8Pos/2)!=0xFF) {
      000843 75*00 02         [24] 2079 	mov	__divsint_PARM_2,#0x02
      000846 75*01 00         [24] 2080 	mov	(__divsint_PARM_2 + 1),#0x00
      000849 8C 82            [24] 2081 	mov	dpl,r4
      00084B 8D 83            [24] 2082 	mov	dph,r5
      00084D C0 07            [24] 2083 	push	ar7
      00084F C0 06            [24] 2084 	push	ar6
      000851 12r00r00         [24] 2085 	lcall	__divsint
      000854 AA 82            [24] 2086 	mov	r2,dpl
      000856 AB 83            [24] 2087 	mov	r3,dph
      000858 EA               [12] 2088 	mov	a,r2
      000859 25*04            [12] 2089 	add	a,_u16Addr
      00085B F5 82            [12] 2090 	mov	dpl,a
      00085D EB               [12] 2091 	mov	a,r3
      00085E 35*05            [12] 2092 	addc	a,(_u16Addr + 1)
      000860 F5 83            [12] 2093 	mov	dph,a
      000862 12r00r00         [24] 2094 	lcall	_ispReadAvrHi
      000865 AB 82            [24] 2095 	mov	r3,dpl
      000867 D0 06            [24] 2096 	pop	ar6
      000869 D0 07            [24] 2097 	pop	ar7
      00086B BB FF 02         [24] 2098 	cjne	r3,#0xff,00712$
      00086E 80 2F            [24] 2099 	sjmp	00262$
      000870                       2100 00712$:
                                   2101 ;	callback.c:345: break;
      000870 22               [24] 2102 	ret
      000871                       2103 00186$:
                                   2104 ;	callback.c:349: if(ispReadAvrLo(u16Addr+u8Pos/2)!=0xFF) {
      000871 75*00 02         [24] 2105 	mov	__divsint_PARM_2,#0x02
      000874 75*01 00         [24] 2106 	mov	(__divsint_PARM_2 + 1),#0x00
      000877 8C 82            [24] 2107 	mov	dpl,r4
      000879 8D 83            [24] 2108 	mov	dph,r5
      00087B C0 07            [24] 2109 	push	ar7
      00087D C0 06            [24] 2110 	push	ar6
      00087F 12r00r00         [24] 2111 	lcall	__divsint
      000882 AC 82            [24] 2112 	mov	r4,dpl
      000884 AD 83            [24] 2113 	mov	r5,dph
      000886 EC               [12] 2114 	mov	a,r4
      000887 25*04            [12] 2115 	add	a,_u16Addr
      000889 F5 82            [12] 2116 	mov	dpl,a
      00088B ED               [12] 2117 	mov	a,r5
      00088C 35*05            [12] 2118 	addc	a,(_u16Addr + 1)
      00088E F5 83            [12] 2119 	mov	dph,a
      000890 12r00r00         [24] 2120 	lcall	_ispReadAvrLo
      000893 AD 82            [24] 2121 	mov	r5,dpl
      000895 D0 06            [24] 2122 	pop	ar6
      000897 D0 07            [24] 2123 	pop	ar7
      000899 BD FF 02         [24] 2124 	cjne	r5,#0xff,00713$
      00089C 80 01            [24] 2125 	sjmp	00714$
      00089E                       2126 00713$:
      00089E 22               [24] 2127 	ret
      00089F                       2128 00714$:
                                   2129 ;	callback.c:350: break;
      00089F                       2130 00262$:
                                   2131 ;	callback.c:339: for(i=0; i<10; ++i) {
      00089F 0E               [12] 2132 	inc	r6
      0008A0 BE 00 01         [24] 2133 	cjne	r6,#0x00,00715$
      0008A3 0F               [12] 2134 	inc	r7
      0008A4                       2135 00715$:
      0008A4 C3               [12] 2136 	clr	c
      0008A5 EE               [12] 2137 	mov	a,r6
      0008A6 94 0A            [12] 2138 	subb	a,#0x0a
      0008A8 EF               [12] 2139 	mov	a,r7
      0008A9 94 00            [12] 2140 	subb	a,#0x00
      0008AB 50 03            [24] 2141 	jnc	00716$
      0008AD 02r08r2D         [24] 2142 	ljmp	00261$
      0008B0                       2143 00716$:
      0008B0 22               [24] 2144 	ret
      0008B1                       2145 00190$:
                                   2146 ;	callback.c:357: Delay_Ms(10);
      0008B1 90 00 0A         [24] 2147 	mov	dptr,#0x000a
                                   2148 ;	callback.c:367: break;
      0008B4 02r00r00         [24] 2149 	ljmp	_Delay_Ms
                                   2150 ;	callback.c:369: case 0x04:
      0008B7                       2151 00204$:
                                   2152 ;	callback.c:370: switch (u8ReceiveBuff[1]) {
      0008B7 90r00r01         [24] 2153 	mov	dptr,#(_u8ReceiveBuff + 0x0001)
      0008BA E0               [24] 2154 	movx	a,@dptr
      0008BB FF               [12] 2155 	mov	r7,a
      0008BC BF 01 02         [24] 2156 	cjne	r7,#0x01,00717$
      0008BF 80 61            [24] 2157 	sjmp	00336$
      0008C1                       2158 00717$:
      0008C1 BF 90 03         [24] 2159 	cjne	r7,#0x90,00718$
      0008C4 02r09r63         [24] 2160 	ljmp	00207$
      0008C7                       2161 00718$:
      0008C7 BF 91 03         [24] 2162 	cjne	r7,#0x91,00719$
      0008CA 02r09r6A         [24] 2163 	ljmp	00208$
      0008CD                       2164 00719$:
      0008CD BF 92 03         [24] 2165 	cjne	r7,#0x92,00720$
      0008D0 02r09r71         [24] 2166 	ljmp	00209$
      0008D3                       2167 00720$:
      0008D3 BF 93 03         [24] 2168 	cjne	r7,#0x93,00721$
      0008D6 02r09r78         [24] 2169 	ljmp	00210$
      0008D9                       2170 00721$:
      0008D9 BF 94 03         [24] 2171 	cjne	r7,#0x94,00722$
      0008DC 02r09r7F         [24] 2172 	ljmp	00211$
      0008DF                       2173 00722$:
      0008DF BF 95 03         [24] 2174 	cjne	r7,#0x95,00723$
      0008E2 02r00r00         [24] 2175 	ljmp	_ICP_SetWire
      0008E5                       2176 00723$:
      0008E5 BF 96 03         [24] 2177 	cjne	r7,#0x96,00724$
      0008E8 02r00r00         [24] 2178 	ljmp	_ICP_FlashWrite
      0008EB                       2179 00724$:
      0008EB BF C0 03         [24] 2180 	cjne	r7,#0xc0,00725$
      0008EE 02r09r89         [24] 2181 	ljmp	00214$
      0008F1                       2182 00725$:
      0008F1 BF C1 03         [24] 2183 	cjne	r7,#0xc1,00726$
      0008F4 02r00r00         [24] 2184 	ljmp	_C2_Exit
      0008F7                       2185 00726$:
      0008F7 BF C2 03         [24] 2186 	cjne	r7,#0xc2,00727$
      0008FA 02r00r00         [24] 2187 	ljmp	_C2_Reset
      0008FD                       2188 00727$:
      0008FD BF C3 03         [24] 2189 	cjne	r7,#0xc3,00728$
      000900 02r09r95         [24] 2190 	ljmp	00217$
      000903                       2191 00728$:
      000903 BF C4 03         [24] 2192 	cjne	r7,#0xc4,00729$
      000906 02r09rA3         [24] 2193 	ljmp	00218$
      000909                       2194 00729$:
      000909 BF C5 03         [24] 2195 	cjne	r7,#0xc5,00730$
      00090C 02r09rB0         [24] 2196 	ljmp	00219$
      00090F                       2197 00730$:
      00090F BF C6 03         [24] 2198 	cjne	r7,#0xc6,00731$
      000912 02r09rD5         [24] 2199 	ljmp	00223$
      000915                       2200 00731$:
      000915 BF C9 03         [24] 2201 	cjne	r7,#0xc9,00732$
      000918 02r09rF3         [24] 2202 	ljmp	00227$
      00091B                       2203 00732$:
      00091B BF CA 03         [24] 2204 	cjne	r7,#0xca,00733$
      00091E 02r0Ar93         [24] 2205 	ljmp	00231$
      000921                       2206 00733$:
      000921 22               [24] 2207 	ret
                                   2208 ;	callback.c:372: for (i=0; i<12; ++i) {
      000922                       2209 00336$:
      000922 7E 00            [12] 2210 	mov	r6,#0x00
      000924 7F 00            [12] 2211 	mov	r7,#0x00
      000926                       2212 00263$:
                                   2213 ;	callback.c:373: u8TransBuff[i] = serialDescriptor[i*2 + 2];
      000926 EE               [12] 2214 	mov	a,r6
      000927 24r00            [12] 2215 	add	a,#_u8TransBuff
      000929 FC               [12] 2216 	mov	r4,a
      00092A EF               [12] 2217 	mov	a,r7
      00092B 34s00            [12] 2218 	addc	a,#(_u8TransBuff >> 8)
      00092D FD               [12] 2219 	mov	r5,a
      00092E EE               [12] 2220 	mov	a,r6
      00092F 2E               [12] 2221 	add	a,r6
      000930 FA               [12] 2222 	mov	r2,a
      000931 EF               [12] 2223 	mov	a,r7
      000932 33               [12] 2224 	rlc	a
      000933 FB               [12] 2225 	mov	r3,a
      000934 74 02            [12] 2226 	mov	a,#0x02
      000936 2A               [12] 2227 	add	a,r2
      000937 FA               [12] 2228 	mov	r2,a
      000938 E4               [12] 2229 	clr	a
      000939 3B               [12] 2230 	addc	a,r3
      00093A FB               [12] 2231 	mov	r3,a
      00093B EA               [12] 2232 	mov	a,r2
      00093C 24r00            [12] 2233 	add	a,#_serialDescriptor
      00093E F5 82            [12] 2234 	mov	dpl,a
      000940 EB               [12] 2235 	mov	a,r3
      000941 34s00            [12] 2236 	addc	a,#(_serialDescriptor >> 8)
      000943 F5 83            [12] 2237 	mov	dph,a
      000945 E4               [12] 2238 	clr	a
      000946 93               [24] 2239 	movc	a,@a+dptr
      000947 8C 82            [24] 2240 	mov	dpl,r4
      000949 8D 83            [24] 2241 	mov	dph,r5
      00094B F0               [24] 2242 	movx	@dptr,a
                                   2243 ;	callback.c:372: for (i=0; i<12; ++i) {
      00094C 0E               [12] 2244 	inc	r6
      00094D BE 00 01         [24] 2245 	cjne	r6,#0x00,00734$
      000950 0F               [12] 2246 	inc	r7
      000951                       2247 00734$:
      000951 C3               [12] 2248 	clr	c
      000952 EE               [12] 2249 	mov	a,r6
      000953 94 0C            [12] 2250 	subb	a,#0x0c
      000955 EF               [12] 2251 	mov	a,r7
      000956 94 00            [12] 2252 	subb	a,#0x00
      000958 40 CC            [24] 2253 	jc	00263$
                                   2254 ;	callback.c:375: u8TransBuff[12] = 0;
      00095A 90r00r0C         [24] 2255 	mov	dptr,#(_u8TransBuff + 0x000c)
      00095D E4               [12] 2256 	clr	a
      00095E F0               [24] 2257 	movx	@dptr,a
                                   2258 ;	callback.c:376: u8HidNum = 64;
      00095F 75*00 40         [24] 2259 	mov	_u8HidNum,#0x40
                                   2260 ;	callback.c:377: break;
      000962 22               [24] 2261 	ret
                                   2262 ;	callback.c:378: case 0x90:
      000963                       2263 00207$:
                                   2264 ;	callback.c:379: ICP_Init();
      000963 12r00r00         [24] 2265 	lcall	_ICP_Init
                                   2266 ;	callback.c:380: u8HidNum = 64;
      000966 75*00 40         [24] 2267 	mov	_u8HidNum,#0x40
                                   2268 ;	callback.c:381: break;
      000969 22               [24] 2269 	ret
                                   2270 ;	callback.c:382: case 0x91:
      00096A                       2271 00208$:
                                   2272 ;	callback.c:383: ICP_Exit();
      00096A 12r00r00         [24] 2273 	lcall	_ICP_Exit
                                   2274 ;	callback.c:384: u8HidNum = 0;
      00096D 75*00 00         [24] 2275 	mov	_u8HidNum,#0x00
                                   2276 ;	callback.c:385: break;
      000970 22               [24] 2277 	ret
                                   2278 ;	callback.c:386: case 0x92:
      000971                       2279 00209$:
                                   2280 ;	callback.c:387: ICP_Write();
      000971 12r00r00         [24] 2281 	lcall	_ICP_Write
                                   2282 ;	callback.c:388: u8HidNum = 0;
      000974 75*00 00         [24] 2283 	mov	_u8HidNum,#0x00
                                   2284 ;	callback.c:389: break;
      000977 22               [24] 2285 	ret
                                   2286 ;	callback.c:390: case 0x93:
      000978                       2287 00210$:
                                   2288 ;	callback.c:391: ICP_Read();
      000978 12r00r00         [24] 2289 	lcall	_ICP_Read
                                   2290 ;	callback.c:392: u8HidNum = 64;
      00097B 75*00 40         [24] 2291 	mov	_u8HidNum,#0x40
                                   2292 ;	callback.c:393: break;
      00097E 22               [24] 2293 	ret
                                   2294 ;	callback.c:394: case 0x94:
      00097F                       2295 00211$:
                                   2296 ;	callback.c:395: ICP_Enter();
      00097F 12r00r00         [24] 2297 	lcall	_ICP_Enter
                                   2298 ;	callback.c:396: u8HidNum = 0;
      000982 75*00 00         [24] 2299 	mov	_u8HidNum,#0x00
                                   2300 ;	callback.c:397: break;
      000985 22               [24] 2301 	ret
                                   2302 ;	callback.c:398: case 0x95:
                                   2303 ;	callback.c:399: ICP_SetWire();
                                   2304 ;	callback.c:400: break;
                                   2305 ;	callback.c:401: case 0x96:
                                   2306 ;	callback.c:402: ICP_FlashWrite();
                                   2307 ;	callback.c:403: break;
      000986 02r00r00         [24] 2308 	ljmp	_ICP_SetWire
                                   2309 ;	callback.c:407: case 0xC0:
      000989                       2310 00214$:
                                   2311 ;	callback.c:408: u8Chip = CHIP_C2;
      000989 75*00 02         [24] 2312 	mov	_u8Chip,#0x02
                                   2313 ;	callback.c:409: C2_Init(u8ReceiveBuff[2]);
      00098C 90r00r02         [24] 2314 	mov	dptr,#(_u8ReceiveBuff + 0x0002)
      00098F E0               [24] 2315 	movx	a,@dptr
      000990 F5 82            [12] 2316 	mov	dpl,a
                                   2317 ;	callback.c:410: break;
                                   2318 ;	callback.c:411: case 0xC1:
                                   2319 ;	callback.c:412: C2_Exit();
                                   2320 ;	callback.c:413: break;
                                   2321 ;	callback.c:414: case 0xC2:
                                   2322 ;	callback.c:415: C2_Reset();
                                   2323 ;	callback.c:416: break;
      000992 02r00r00         [24] 2324 	ljmp	_C2_Init
                                   2325 ;	callback.c:417: case 0xC3:
      000995                       2326 00217$:
                                   2327 ;	callback.c:418: u8TransBuff[0] = C2_ReadAR();
      000995 12r00r00         [24] 2328 	lcall	_C2_ReadAR
      000998 AF 82            [24] 2329 	mov	r7,dpl
      00099A 90r00r00         [24] 2330 	mov	dptr,#_u8TransBuff
      00099D EF               [12] 2331 	mov	a,r7
      00099E F0               [24] 2332 	movx	@dptr,a
                                   2333 ;	callback.c:419: u8HidNum = 64;
      00099F 75*00 40         [24] 2334 	mov	_u8HidNum,#0x40
                                   2335 ;	callback.c:420: break;
      0009A2 22               [24] 2336 	ret
                                   2337 ;	callback.c:421: case 0xC4:
      0009A3                       2338 00218$:
                                   2339 ;	callback.c:422: C2_WriteAR(u8ReceiveBuff[2]);
      0009A3 90r00r02         [24] 2340 	mov	dptr,#(_u8ReceiveBuff + 0x0002)
      0009A6 E0               [24] 2341 	movx	a,@dptr
      0009A7 F5 82            [12] 2342 	mov	dpl,a
      0009A9 12r00r00         [24] 2343 	lcall	_C2_WriteAR
                                   2344 ;	callback.c:423: u8HidNum = 0;
      0009AC 75*00 00         [24] 2345 	mov	_u8HidNum,#0x00
                                   2346 ;	callback.c:424: break;
      0009AF 22               [24] 2347 	ret
                                   2348 ;	callback.c:425: case 0xC5:
      0009B0                       2349 00219$:
                                   2350 ;	callback.c:426: u8TransBuff[1] = C2_ReadDR(&u8Ret);
      0009B0 90r00r0C         [24] 2351 	mov	dptr,#_EP0_Out_CallBack_u8Ret_65536_36
      0009B3 75 F0 40         [24] 2352 	mov	b,#0x40
      0009B6 12r00r00         [24] 2353 	lcall	_C2_ReadDR
      0009B9 AF 82            [24] 2354 	mov	r7,dpl
      0009BB 90r00r01         [24] 2355 	mov	dptr,#(_u8TransBuff + 0x0001)
      0009BE EF               [12] 2356 	mov	a,r7
      0009BF F0               [24] 2357 	movx	@dptr,a
                                   2358 ;	callback.c:427: if (u8Ret) {
      0009C0 E5*0C            [12] 2359 	mov	a,_EP0_Out_CallBack_u8Ret_65536_36
      0009C2 60 08            [24] 2360 	jz	00221$
                                   2361 ;	callback.c:428: u8TransBuff[0] = 1;
      0009C4 90r00r00         [24] 2362 	mov	dptr,#_u8TransBuff
      0009C7 74 01            [12] 2363 	mov	a,#0x01
      0009C9 F0               [24] 2364 	movx	@dptr,a
      0009CA 80 05            [24] 2365 	sjmp	00222$
      0009CC                       2366 00221$:
                                   2367 ;	callback.c:430: u8TransBuff[0] = 0;
      0009CC 90r00r00         [24] 2368 	mov	dptr,#_u8TransBuff
      0009CF E4               [12] 2369 	clr	a
      0009D0 F0               [24] 2370 	movx	@dptr,a
      0009D1                       2371 00222$:
                                   2372 ;	callback.c:432: u8HidNum = 64;
      0009D1 75*00 40         [24] 2373 	mov	_u8HidNum,#0x40
                                   2374 ;	callback.c:433: break;
      0009D4 22               [24] 2375 	ret
                                   2376 ;	callback.c:434: case 0xC6:
      0009D5                       2377 00223$:
                                   2378 ;	callback.c:435: if (C2_WriteDR(u8ReceiveBuff[2])) {
      0009D5 90r00r02         [24] 2379 	mov	dptr,#(_u8ReceiveBuff + 0x0002)
      0009D8 E0               [24] 2380 	movx	a,@dptr
      0009D9 F5 82            [12] 2381 	mov	dpl,a
      0009DB 12r00r00         [24] 2382 	lcall	_C2_WriteDR
      0009DE E5 82            [12] 2383 	mov	a,dpl
      0009E0 60 08            [24] 2384 	jz	00225$
                                   2385 ;	callback.c:436: u8TransBuff[0] = 1;
      0009E2 90r00r00         [24] 2386 	mov	dptr,#_u8TransBuff
      0009E5 74 01            [12] 2387 	mov	a,#0x01
      0009E7 F0               [24] 2388 	movx	@dptr,a
      0009E8 80 05            [24] 2389 	sjmp	00226$
      0009EA                       2390 00225$:
                                   2391 ;	callback.c:438: u8TransBuff[0] = 0;
      0009EA 90r00r00         [24] 2392 	mov	dptr,#_u8TransBuff
      0009ED E4               [12] 2393 	clr	a
      0009EE F0               [24] 2394 	movx	@dptr,a
      0009EF                       2395 00226$:
                                   2396 ;	callback.c:440: u8HidNum = 64;
      0009EF 75*00 40         [24] 2397 	mov	_u8HidNum,#0x40
                                   2398 ;	callback.c:441: break;
      0009F2 22               [24] 2399 	ret
                                   2400 ;	callback.c:442: case 0xC9:
      0009F3                       2401 00227$:
                                   2402 ;	callback.c:443: u32Tmp = u8ReceiveBuff[5];
      0009F3 90r00r05         [24] 2403 	mov	dptr,#(_u8ReceiveBuff + 0x0005)
      0009F6 E0               [24] 2404 	movx	a,@dptr
      0009F7 FF               [12] 2405 	mov	r7,a
      0009F8 7E 00            [12] 2406 	mov	r6,#0x00
                                   2407 ;	callback.c:444: u32Tmp <<= 24;
      0009FA 8F*03            [24] 2408 	mov	(_u32Addr + 3),r7
                                   2409 ;	1-genFromRTrack replaced	mov	_u32Addr,#0x00
      0009FC 8E*00            [24] 2410 	mov	_u32Addr,r6
                                   2411 ;	1-genFromRTrack replaced	mov	(_u32Addr + 1),#0x00
      0009FE 8E*01            [24] 2412 	mov	(_u32Addr + 1),r6
                                   2413 ;	1-genFromRTrack replaced	mov	(_u32Addr + 2),#0x00
      000A00 8E*02            [24] 2414 	mov	(_u32Addr + 2),r6
                                   2415 ;	callback.c:446: u32Tmp = u8ReceiveBuff[4];
      000A02 90r00r04         [24] 2416 	mov	dptr,#(_u8ReceiveBuff + 0x0004)
      000A05 E0               [24] 2417 	movx	a,@dptr
      000A06 FF               [12] 2418 	mov	r7,a
      000A07 7E 00            [12] 2419 	mov	r6,#0x00
                                   2420 ;	callback.c:447: u32Tmp <<= 16;
      000A09 8E 04            [24] 2421 	mov	ar4,r6
      000A0B 8F 05            [24] 2422 	mov	ar5,r7
                                   2423 ;	callback.c:448: u32Addr += u32Tmp;
      000A0D E4               [12] 2424 	clr	a
      000A0E FE               [12] 2425 	mov	r6,a
      000A0F 25*00            [12] 2426 	add	a,_u32Addr
      000A11 F5*00            [12] 2427 	mov	_u32Addr,a
      000A13 EE               [12] 2428 	mov	a,r6
      000A14 35*01            [12] 2429 	addc	a,(_u32Addr + 1)
      000A16 F5*01            [12] 2430 	mov	(_u32Addr + 1),a
      000A18 ED               [12] 2431 	mov	a,r5
      000A19 35*02            [12] 2432 	addc	a,(_u32Addr + 2)
      000A1B F5*02            [12] 2433 	mov	(_u32Addr + 2),a
      000A1D EC               [12] 2434 	mov	a,r4
      000A1E 35*03            [12] 2435 	addc	a,(_u32Addr + 3)
      000A20 F5*03            [12] 2436 	mov	(_u32Addr + 3),a
                                   2437 ;	callback.c:449: u32Tmp = u8ReceiveBuff[3];
      000A22 90r00r03         [24] 2438 	mov	dptr,#(_u8ReceiveBuff + 0x0003)
      000A25 E0               [24] 2439 	movx	a,@dptr
      000A26 FF               [12] 2440 	mov	r7,a
      000A27 7E 00            [12] 2441 	mov	r6,#0x00
      000A29 7D 00            [12] 2442 	mov	r5,#0x00
                                   2443 ;	callback.c:450: u32Tmp <<= 8;
      000A2B 8D 04            [24] 2444 	mov	ar4,r5
      000A2D 8E 05            [24] 2445 	mov	ar5,r6
      000A2F 8F 06            [24] 2446 	mov	ar6,r7
                                   2447 ;	callback.c:451: u32Addr += u32Tmp;
      000A31 E4               [12] 2448 	clr	a
      000A32 25*00            [12] 2449 	add	a,_u32Addr
      000A34 F5*00            [12] 2450 	mov	_u32Addr,a
      000A36 EE               [12] 2451 	mov	a,r6
      000A37 35*01            [12] 2452 	addc	a,(_u32Addr + 1)
      000A39 F5*01            [12] 2453 	mov	(_u32Addr + 1),a
      000A3B ED               [12] 2454 	mov	a,r5
      000A3C 35*02            [12] 2455 	addc	a,(_u32Addr + 2)
      000A3E F5*02            [12] 2456 	mov	(_u32Addr + 2),a
      000A40 EC               [12] 2457 	mov	a,r4
      000A41 35*03            [12] 2458 	addc	a,(_u32Addr + 3)
      000A43 F5*03            [12] 2459 	mov	(_u32Addr + 3),a
                                   2460 ;	callback.c:452: u32Tmp = u8ReceiveBuff[2];
      000A45 90r00r02         [24] 2461 	mov	dptr,#(_u8ReceiveBuff + 0x0002)
      000A48 E0               [24] 2462 	movx	a,@dptr
      000A49 FF               [12] 2463 	mov	r7,a
                                   2464 ;	callback.c:453: u32Addr += u32Tmp;
      000A4A E4               [12] 2465 	clr	a
      000A4B FE               [12] 2466 	mov	r6,a
      000A4C FD               [12] 2467 	mov	r5,a
      000A4D FC               [12] 2468 	mov	r4,a
      000A4E EF               [12] 2469 	mov	a,r7
      000A4F 25*00            [12] 2470 	add	a,_u32Addr
      000A51 F5*00            [12] 2471 	mov	_u32Addr,a
      000A53 EE               [12] 2472 	mov	a,r6
      000A54 35*01            [12] 2473 	addc	a,(_u32Addr + 1)
      000A56 F5*01            [12] 2474 	mov	(_u32Addr + 1),a
      000A58 ED               [12] 2475 	mov	a,r5
      000A59 35*02            [12] 2476 	addc	a,(_u32Addr + 2)
      000A5B F5*02            [12] 2477 	mov	(_u32Addr + 2),a
      000A5D EC               [12] 2478 	mov	a,r4
      000A5E 35*03            [12] 2479 	addc	a,(_u32Addr + 3)
      000A60 F5*03            [12] 2480 	mov	(_u32Addr + 3),a
                                   2481 ;	callback.c:454: if (C2_ReadFlash(u32Addr, u8ReceiveBuff[6], &u8TransBuff[1])) {
      000A62 90r00r06         [24] 2482 	mov	dptr,#(_u8ReceiveBuff + 0x0006)
      000A65 E0               [24] 2483 	movx	a,@dptr
      000A66 F5*00            [12] 2484 	mov	_C2_ReadFlash_PARM_2,a
      000A68 75*00r01         [24] 2485 	mov	_C2_ReadFlash_PARM_3,#(_u8TransBuff + 0x0001)
      000A6B 75*01s00         [24] 2486 	mov	(_C2_ReadFlash_PARM_3 + 1),#((_u8TransBuff + 0x0001) >> 8)
                                   2487 ;	1-genFromRTrack replaced	mov	(_C2_ReadFlash_PARM_3 + 2),#0x00
      000A6E 8E*02            [24] 2488 	mov	(_C2_ReadFlash_PARM_3 + 2),r6
      000A70 85*00 82         [24] 2489 	mov	dpl,_u32Addr
      000A73 85*01 83         [24] 2490 	mov	dph,(_u32Addr + 1)
      000A76 85*02 F0         [24] 2491 	mov	b,(_u32Addr + 2)
      000A79 E5*03            [12] 2492 	mov	a,(_u32Addr + 3)
      000A7B 12r00r00         [24] 2493 	lcall	_C2_ReadFlash
      000A7E E5 82            [12] 2494 	mov	a,dpl
      000A80 60 08            [24] 2495 	jz	00229$
                                   2496 ;	callback.c:455: u8TransBuff[0] = 1;
      000A82 90r00r00         [24] 2497 	mov	dptr,#_u8TransBuff
      000A85 74 01            [12] 2498 	mov	a,#0x01
      000A87 F0               [24] 2499 	movx	@dptr,a
      000A88 80 05            [24] 2500 	sjmp	00230$
      000A8A                       2501 00229$:
                                   2502 ;	callback.c:457: u8TransBuff[0] = 0;
      000A8A 90r00r00         [24] 2503 	mov	dptr,#_u8TransBuff
      000A8D E4               [12] 2504 	clr	a
      000A8E F0               [24] 2505 	movx	@dptr,a
      000A8F                       2506 00230$:
                                   2507 ;	callback.c:459: u8HidNum = 64;
      000A8F 75*00 40         [24] 2508 	mov	_u8HidNum,#0x40
                                   2509 ;	callback.c:460: break;
      000A92 22               [24] 2510 	ret
                                   2511 ;	callback.c:461: case 0xCA:
      000A93                       2512 00231$:
                                   2513 ;	callback.c:462: u32Tmp = u8ReceiveBuff[5];
      000A93 90r00r05         [24] 2514 	mov	dptr,#(_u8ReceiveBuff + 0x0005)
      000A96 E0               [24] 2515 	movx	a,@dptr
      000A97 FF               [12] 2516 	mov	r7,a
      000A98 7E 00            [12] 2517 	mov	r6,#0x00
                                   2518 ;	callback.c:463: u32Tmp <<= 24;
      000A9A 8F*03            [24] 2519 	mov	(_u32Addr + 3),r7
                                   2520 ;	1-genFromRTrack replaced	mov	_u32Addr,#0x00
      000A9C 8E*00            [24] 2521 	mov	_u32Addr,r6
                                   2522 ;	1-genFromRTrack replaced	mov	(_u32Addr + 1),#0x00
      000A9E 8E*01            [24] 2523 	mov	(_u32Addr + 1),r6
                                   2524 ;	1-genFromRTrack replaced	mov	(_u32Addr + 2),#0x00
      000AA0 8E*02            [24] 2525 	mov	(_u32Addr + 2),r6
                                   2526 ;	callback.c:465: u32Tmp = u8ReceiveBuff[4];
      000AA2 90r00r04         [24] 2527 	mov	dptr,#(_u8ReceiveBuff + 0x0004)
      000AA5 E0               [24] 2528 	movx	a,@dptr
      000AA6 FF               [12] 2529 	mov	r7,a
      000AA7 7E 00            [12] 2530 	mov	r6,#0x00
                                   2531 ;	callback.c:466: u32Tmp <<= 16;
      000AA9 8E 04            [24] 2532 	mov	ar4,r6
      000AAB 8F 05            [24] 2533 	mov	ar5,r7
                                   2534 ;	callback.c:467: u32Addr += u32Tmp;
      000AAD E4               [12] 2535 	clr	a
      000AAE FE               [12] 2536 	mov	r6,a
      000AAF 25*00            [12] 2537 	add	a,_u32Addr
      000AB1 F5*00            [12] 2538 	mov	_u32Addr,a
      000AB3 EE               [12] 2539 	mov	a,r6
      000AB4 35*01            [12] 2540 	addc	a,(_u32Addr + 1)
      000AB6 F5*01            [12] 2541 	mov	(_u32Addr + 1),a
      000AB8 ED               [12] 2542 	mov	a,r5
      000AB9 35*02            [12] 2543 	addc	a,(_u32Addr + 2)
      000ABB F5*02            [12] 2544 	mov	(_u32Addr + 2),a
      000ABD EC               [12] 2545 	mov	a,r4
      000ABE 35*03            [12] 2546 	addc	a,(_u32Addr + 3)
      000AC0 F5*03            [12] 2547 	mov	(_u32Addr + 3),a
                                   2548 ;	callback.c:468: u32Tmp = u8ReceiveBuff[3];
      000AC2 90r00r03         [24] 2549 	mov	dptr,#(_u8ReceiveBuff + 0x0003)
      000AC5 E0               [24] 2550 	movx	a,@dptr
      000AC6 FF               [12] 2551 	mov	r7,a
      000AC7 7E 00            [12] 2552 	mov	r6,#0x00
      000AC9 7D 00            [12] 2553 	mov	r5,#0x00
                                   2554 ;	callback.c:469: u32Tmp <<= 8;
      000ACB 8D 04            [24] 2555 	mov	ar4,r5
      000ACD 8E 05            [24] 2556 	mov	ar5,r6
      000ACF 8F 06            [24] 2557 	mov	ar6,r7
                                   2558 ;	callback.c:470: u32Addr += u32Tmp;
      000AD1 E4               [12] 2559 	clr	a
      000AD2 25*00            [12] 2560 	add	a,_u32Addr
      000AD4 F5*00            [12] 2561 	mov	_u32Addr,a
      000AD6 EE               [12] 2562 	mov	a,r6
      000AD7 35*01            [12] 2563 	addc	a,(_u32Addr + 1)
      000AD9 F5*01            [12] 2564 	mov	(_u32Addr + 1),a
      000ADB ED               [12] 2565 	mov	a,r5
      000ADC 35*02            [12] 2566 	addc	a,(_u32Addr + 2)
      000ADE F5*02            [12] 2567 	mov	(_u32Addr + 2),a
      000AE0 EC               [12] 2568 	mov	a,r4
      000AE1 35*03            [12] 2569 	addc	a,(_u32Addr + 3)
      000AE3 F5*03            [12] 2570 	mov	(_u32Addr + 3),a
                                   2571 ;	callback.c:471: u32Tmp = u8ReceiveBuff[2];
      000AE5 90r00r02         [24] 2572 	mov	dptr,#(_u8ReceiveBuff + 0x0002)
      000AE8 E0               [24] 2573 	movx	a,@dptr
      000AE9 FF               [12] 2574 	mov	r7,a
                                   2575 ;	callback.c:472: u32Addr += u32Tmp;
      000AEA E4               [12] 2576 	clr	a
      000AEB FE               [12] 2577 	mov	r6,a
      000AEC FD               [12] 2578 	mov	r5,a
      000AED FC               [12] 2579 	mov	r4,a
      000AEE EF               [12] 2580 	mov	a,r7
      000AEF 25*00            [12] 2581 	add	a,_u32Addr
      000AF1 F5*00            [12] 2582 	mov	_u32Addr,a
      000AF3 EE               [12] 2583 	mov	a,r6
      000AF4 35*01            [12] 2584 	addc	a,(_u32Addr + 1)
      000AF6 F5*01            [12] 2585 	mov	(_u32Addr + 1),a
      000AF8 ED               [12] 2586 	mov	a,r5
      000AF9 35*02            [12] 2587 	addc	a,(_u32Addr + 2)
      000AFB F5*02            [12] 2588 	mov	(_u32Addr + 2),a
      000AFD EC               [12] 2589 	mov	a,r4
      000AFE 35*03            [12] 2590 	addc	a,(_u32Addr + 3)
      000B00 F5*03            [12] 2591 	mov	(_u32Addr + 3),a
                                   2592 ;	callback.c:473: if (C2_WriteFlash(u32Addr, u8ReceiveBuff[6], &u8ReceiveBuff[7])) {
      000B02 90r00r06         [24] 2593 	mov	dptr,#(_u8ReceiveBuff + 0x0006)
      000B05 E0               [24] 2594 	movx	a,@dptr
      000B06 F5*00            [12] 2595 	mov	_C2_WriteFlash_PARM_2,a
      000B08 75*00r07         [24] 2596 	mov	_C2_WriteFlash_PARM_3,#(_u8ReceiveBuff + 0x0007)
      000B0B 75*01s00         [24] 2597 	mov	(_C2_WriteFlash_PARM_3 + 1),#((_u8ReceiveBuff + 0x0007) >> 8)
                                   2598 ;	1-genFromRTrack replaced	mov	(_C2_WriteFlash_PARM_3 + 2),#0x00
      000B0E 8E*02            [24] 2599 	mov	(_C2_WriteFlash_PARM_3 + 2),r6
      000B10 85*00 82         [24] 2600 	mov	dpl,_u32Addr
      000B13 85*01 83         [24] 2601 	mov	dph,(_u32Addr + 1)
      000B16 85*02 F0         [24] 2602 	mov	b,(_u32Addr + 2)
      000B19 E5*03            [12] 2603 	mov	a,(_u32Addr + 3)
      000B1B 12r00r00         [24] 2604 	lcall	_C2_WriteFlash
      000B1E E5 82            [12] 2605 	mov	a,dpl
      000B20 60 08            [24] 2606 	jz	00233$
                                   2607 ;	callback.c:474: u8TransBuff[0] = 1;
      000B22 90r00r00         [24] 2608 	mov	dptr,#_u8TransBuff
      000B25 74 01            [12] 2609 	mov	a,#0x01
      000B27 F0               [24] 2610 	movx	@dptr,a
      000B28 80 05            [24] 2611 	sjmp	00234$
      000B2A                       2612 00233$:
                                   2613 ;	callback.c:476: u8TransBuff[0] = 0;
      000B2A 90r00r00         [24] 2614 	mov	dptr,#_u8TransBuff
      000B2D E4               [12] 2615 	clr	a
      000B2E F0               [24] 2616 	movx	@dptr,a
      000B2F                       2617 00234$:
                                   2618 ;	callback.c:478: u8HidNum = 64;
      000B2F 75*00 40         [24] 2619 	mov	_u8HidNum,#0x40
                                   2620 ;	callback.c:483: }
      000B32                       2621 00265$:
                                   2622 ;	callback.c:484: }
      000B32 22               [24] 2623 	ret
                                   2624 	.area CSEG    (CODE)
                                   2625 	.area CONST   (CODE)
                                   2626 	.area XINIT   (CODE)
                                   2627 	.area CABS    (ABS,CODE)
