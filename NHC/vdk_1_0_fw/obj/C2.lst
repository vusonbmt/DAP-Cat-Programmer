                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.0 #11195 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module C2
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _C2_Delay
                                     12 	.globl ___delay_ms
                                     13 	.globl ___delay_us
                                     14 	.globl _UIF_BUS_RST
                                     15 	.globl _UIF_DETECT
                                     16 	.globl _UIF_TRANSFER
                                     17 	.globl _UIF_SUSPEND
                                     18 	.globl _UIF_HST_SOF
                                     19 	.globl _UIF_FIFO_OV
                                     20 	.globl _U_SIE_FREE
                                     21 	.globl _U_TOG_OK
                                     22 	.globl _U_IS_NAK
                                     23 	.globl _ADC_CHAN0
                                     24 	.globl _ADC_CHAN1
                                     25 	.globl _CMP_CHAN
                                     26 	.globl _ADC_START
                                     27 	.globl _ADC_IF
                                     28 	.globl _CMP_IF
                                     29 	.globl _CMPO
                                     30 	.globl _U1RI
                                     31 	.globl _U1TI
                                     32 	.globl _U1RB8
                                     33 	.globl _U1TB8
                                     34 	.globl _U1REN
                                     35 	.globl _U1SMOD
                                     36 	.globl _U1SM0
                                     37 	.globl _S0_R_FIFO
                                     38 	.globl _S0_T_FIFO
                                     39 	.globl _S0_FREE
                                     40 	.globl _S0_IF_BYTE
                                     41 	.globl _S0_IF_FIRST
                                     42 	.globl _S0_IF_OV
                                     43 	.globl _S0_FST_ACT
                                     44 	.globl _CP_RL2
                                     45 	.globl _C_T2
                                     46 	.globl _TR2
                                     47 	.globl _EXEN2
                                     48 	.globl _TCLK
                                     49 	.globl _RCLK
                                     50 	.globl _EXF2
                                     51 	.globl _CAP1F
                                     52 	.globl _TF2
                                     53 	.globl _RI
                                     54 	.globl _TI
                                     55 	.globl _RB8
                                     56 	.globl _TB8
                                     57 	.globl _REN
                                     58 	.globl _SM2
                                     59 	.globl _SM1
                                     60 	.globl _SM0
                                     61 	.globl _IT0
                                     62 	.globl _IE0
                                     63 	.globl _IT1
                                     64 	.globl _IE1
                                     65 	.globl _TR0
                                     66 	.globl _TF0
                                     67 	.globl _TR1
                                     68 	.globl _TF1
                                     69 	.globl _RXD
                                     70 	.globl _PWM1_
                                     71 	.globl _TXD
                                     72 	.globl _PWM2_
                                     73 	.globl _AIN3
                                     74 	.globl _VBUS1
                                     75 	.globl _INT0
                                     76 	.globl _TXD1_
                                     77 	.globl _INT1
                                     78 	.globl _T0
                                     79 	.globl _RXD1_
                                     80 	.globl _PWM2
                                     81 	.globl _T1
                                     82 	.globl _UDP
                                     83 	.globl _UDM
                                     84 	.globl _TIN0
                                     85 	.globl _CAP1
                                     86 	.globl _T2
                                     87 	.globl _AIN0
                                     88 	.globl _VBUS2
                                     89 	.globl _TIN1
                                     90 	.globl _CAP2
                                     91 	.globl _T2EX
                                     92 	.globl _RXD_
                                     93 	.globl _TXD_
                                     94 	.globl _AIN1
                                     95 	.globl _UCC1
                                     96 	.globl _TIN2
                                     97 	.globl _SCS
                                     98 	.globl _CAP1_
                                     99 	.globl _T2_
                                    100 	.globl _AIN2
                                    101 	.globl _UCC2
                                    102 	.globl _TIN3
                                    103 	.globl _PWM1
                                    104 	.globl _MOSI
                                    105 	.globl _TIN4
                                    106 	.globl _RXD1
                                    107 	.globl _MISO
                                    108 	.globl _TIN5
                                    109 	.globl _TXD1
                                    110 	.globl _SCK
                                    111 	.globl _IE_SPI0
                                    112 	.globl _IE_TKEY
                                    113 	.globl _IE_USB
                                    114 	.globl _IE_ADC
                                    115 	.globl _IE_UART1
                                    116 	.globl _IE_PWMX
                                    117 	.globl _IE_GPIO
                                    118 	.globl _IE_WDOG
                                    119 	.globl _PX0
                                    120 	.globl _PT0
                                    121 	.globl _PX1
                                    122 	.globl _PT1
                                    123 	.globl _PS
                                    124 	.globl _PT2
                                    125 	.globl _PL_FLAG
                                    126 	.globl _PH_FLAG
                                    127 	.globl _EX0
                                    128 	.globl _ET0
                                    129 	.globl _EX1
                                    130 	.globl _ET1
                                    131 	.globl _ES
                                    132 	.globl _ET2
                                    133 	.globl _E_DIS
                                    134 	.globl _EA
                                    135 	.globl _P
                                    136 	.globl _F1
                                    137 	.globl _OV
                                    138 	.globl _RS0
                                    139 	.globl _RS1
                                    140 	.globl _F0
                                    141 	.globl _AC
                                    142 	.globl _CY
                                    143 	.globl _UEP1_DMA_H
                                    144 	.globl _UEP1_DMA_L
                                    145 	.globl _UEP1_DMA
                                    146 	.globl _UEP0_DMA_H
                                    147 	.globl _UEP0_DMA_L
                                    148 	.globl _UEP0_DMA
                                    149 	.globl _UEP2_3_MOD
                                    150 	.globl _UEP4_1_MOD
                                    151 	.globl _UEP3_DMA_H
                                    152 	.globl _UEP3_DMA_L
                                    153 	.globl _UEP3_DMA
                                    154 	.globl _UEP2_DMA_H
                                    155 	.globl _UEP2_DMA_L
                                    156 	.globl _UEP2_DMA
                                    157 	.globl _USB_DEV_AD
                                    158 	.globl _USB_CTRL
                                    159 	.globl _USB_INT_EN
                                    160 	.globl _UEP4_T_LEN
                                    161 	.globl _UEP4_CTRL
                                    162 	.globl _UEP0_T_LEN
                                    163 	.globl _UEP0_CTRL
                                    164 	.globl _USB_RX_LEN
                                    165 	.globl _USB_MIS_ST
                                    166 	.globl _USB_INT_ST
                                    167 	.globl _USB_INT_FG
                                    168 	.globl _UEP3_T_LEN
                                    169 	.globl _UEP3_CTRL
                                    170 	.globl _UEP2_T_LEN
                                    171 	.globl _UEP2_CTRL
                                    172 	.globl _UEP1_T_LEN
                                    173 	.globl _UEP1_CTRL
                                    174 	.globl _UDEV_CTRL
                                    175 	.globl _USB_C_CTRL
                                    176 	.globl _TKEY_DATH
                                    177 	.globl _TKEY_DATL
                                    178 	.globl _TKEY_DAT
                                    179 	.globl _TKEY_CTRL
                                    180 	.globl _ADC_DATA
                                    181 	.globl _ADC_CFG
                                    182 	.globl _ADC_CTRL
                                    183 	.globl _SBAUD1
                                    184 	.globl _SBUF1
                                    185 	.globl _SCON1
                                    186 	.globl _SPI0_SETUP
                                    187 	.globl _SPI0_CK_SE
                                    188 	.globl _SPI0_CTRL
                                    189 	.globl _SPI0_DATA
                                    190 	.globl _SPI0_STAT
                                    191 	.globl _PWM_CK_SE
                                    192 	.globl _PWM_CTRL
                                    193 	.globl _PWM_DATA1
                                    194 	.globl _PWM_DATA2
                                    195 	.globl _T2CAP1H
                                    196 	.globl _T2CAP1L
                                    197 	.globl _T2CAP1
                                    198 	.globl _TH2
                                    199 	.globl _TL2
                                    200 	.globl _T2COUNT
                                    201 	.globl _RCAP2H
                                    202 	.globl _RCAP2L
                                    203 	.globl _RCAP2
                                    204 	.globl _T2MOD
                                    205 	.globl _T2CON
                                    206 	.globl _SBUF
                                    207 	.globl _SCON
                                    208 	.globl _TH1
                                    209 	.globl _TH0
                                    210 	.globl _TL1
                                    211 	.globl _TL0
                                    212 	.globl _TMOD
                                    213 	.globl _TCON
                                    214 	.globl _XBUS_AUX
                                    215 	.globl _PIN_FUNC
                                    216 	.globl _P3_DIR_PU
                                    217 	.globl _P3_MOD_OC
                                    218 	.globl _P3
                                    219 	.globl _P2
                                    220 	.globl _P1_DIR_PU
                                    221 	.globl _P1_MOD_OC
                                    222 	.globl _P1
                                    223 	.globl _ROM_CTRL
                                    224 	.globl _ROM_DATA_H
                                    225 	.globl _ROM_DATA_L
                                    226 	.globl _ROM_DATA
                                    227 	.globl _ROM_ADDR_H
                                    228 	.globl _ROM_ADDR_L
                                    229 	.globl _ROM_ADDR
                                    230 	.globl _GPIO_IE
                                    231 	.globl _IP_EX
                                    232 	.globl _IE_EX
                                    233 	.globl _IP
                                    234 	.globl _IE
                                    235 	.globl _WDOG_COUNT
                                    236 	.globl _RESET_KEEP
                                    237 	.globl _WAKE_CTRL
                                    238 	.globl _CLOCK_CFG
                                    239 	.globl _PCON
                                    240 	.globl _GLOBAL_CFG
                                    241 	.globl _SAFE_MOD
                                    242 	.globl _DPH
                                    243 	.globl _DPL
                                    244 	.globl _SP
                                    245 	.globl _B
                                    246 	.globl _ACC
                                    247 	.globl _PSW
                                    248 	.globl _C2_ReadFlash_PARM_3
                                    249 	.globl _C2_ReadFlash_PARM_2
                                    250 	.globl _C2_WriteFlash_PARM_3
                                    251 	.globl _C2_WriteFlash_PARM_2
                                    252 	.globl _delay
                                    253 	.globl _C2_Exit
                                    254 	.globl _C2_Init
                                    255 	.globl _C2_Send
                                    256 	.globl _C2_Read
                                    257 	.globl _C2_Reset
                                    258 	.globl _C2_ReadDR
                                    259 	.globl _C2_WriteAR
                                    260 	.globl _C2_ReadAR
                                    261 	.globl _C2_WriteDR
                                    262 	.globl _C2_WriteFlash
                                    263 	.globl _C2_ReadFlash
                                    264 ;--------------------------------------------------------
                                    265 ; special function registers
                                    266 ;--------------------------------------------------------
                                    267 	.area RSEG    (ABS,DATA)
      000000                        268 	.org 0x0000
                           0000D0   269 _PSW	=	0x00d0
                           0000E0   270 _ACC	=	0x00e0
                           0000F0   271 _B	=	0x00f0
                           000081   272 _SP	=	0x0081
                           000082   273 _DPL	=	0x0082
                           000083   274 _DPH	=	0x0083
                           0000A1   275 _SAFE_MOD	=	0x00a1
                           0000B1   276 _GLOBAL_CFG	=	0x00b1
                           000087   277 _PCON	=	0x0087
                           0000B9   278 _CLOCK_CFG	=	0x00b9
                           0000A9   279 _WAKE_CTRL	=	0x00a9
                           0000FE   280 _RESET_KEEP	=	0x00fe
                           0000FF   281 _WDOG_COUNT	=	0x00ff
                           0000A8   282 _IE	=	0x00a8
                           0000B8   283 _IP	=	0x00b8
                           0000E8   284 _IE_EX	=	0x00e8
                           0000E9   285 _IP_EX	=	0x00e9
                           0000C7   286 _GPIO_IE	=	0x00c7
                           008584   287 _ROM_ADDR	=	0x8584
                           000084   288 _ROM_ADDR_L	=	0x0084
                           000085   289 _ROM_ADDR_H	=	0x0085
                           008F8E   290 _ROM_DATA	=	0x8f8e
                           00008E   291 _ROM_DATA_L	=	0x008e
                           00008F   292 _ROM_DATA_H	=	0x008f
                           000086   293 _ROM_CTRL	=	0x0086
                           000090   294 _P1	=	0x0090
                           000092   295 _P1_MOD_OC	=	0x0092
                           000093   296 _P1_DIR_PU	=	0x0093
                           0000A0   297 _P2	=	0x00a0
                           0000B0   298 _P3	=	0x00b0
                           000096   299 _P3_MOD_OC	=	0x0096
                           000097   300 _P3_DIR_PU	=	0x0097
                           0000C6   301 _PIN_FUNC	=	0x00c6
                           0000A2   302 _XBUS_AUX	=	0x00a2
                           000088   303 _TCON	=	0x0088
                           000089   304 _TMOD	=	0x0089
                           00008A   305 _TL0	=	0x008a
                           00008B   306 _TL1	=	0x008b
                           00008C   307 _TH0	=	0x008c
                           00008D   308 _TH1	=	0x008d
                           000098   309 _SCON	=	0x0098
                           000099   310 _SBUF	=	0x0099
                           0000C8   311 _T2CON	=	0x00c8
                           0000C9   312 _T2MOD	=	0x00c9
                           00CBCA   313 _RCAP2	=	0xcbca
                           0000CA   314 _RCAP2L	=	0x00ca
                           0000CB   315 _RCAP2H	=	0x00cb
                           00CDCC   316 _T2COUNT	=	0xcdcc
                           0000CC   317 _TL2	=	0x00cc
                           0000CD   318 _TH2	=	0x00cd
                           00CFCE   319 _T2CAP1	=	0xcfce
                           0000CE   320 _T2CAP1L	=	0x00ce
                           0000CF   321 _T2CAP1H	=	0x00cf
                           00009B   322 _PWM_DATA2	=	0x009b
                           00009C   323 _PWM_DATA1	=	0x009c
                           00009D   324 _PWM_CTRL	=	0x009d
                           00009E   325 _PWM_CK_SE	=	0x009e
                           0000F8   326 _SPI0_STAT	=	0x00f8
                           0000F9   327 _SPI0_DATA	=	0x00f9
                           0000FA   328 _SPI0_CTRL	=	0x00fa
                           0000FB   329 _SPI0_CK_SE	=	0x00fb
                           0000FC   330 _SPI0_SETUP	=	0x00fc
                           0000C0   331 _SCON1	=	0x00c0
                           0000C1   332 _SBUF1	=	0x00c1
                           0000C2   333 _SBAUD1	=	0x00c2
                           000080   334 _ADC_CTRL	=	0x0080
                           00009A   335 _ADC_CFG	=	0x009a
                           00009F   336 _ADC_DATA	=	0x009f
                           0000C3   337 _TKEY_CTRL	=	0x00c3
                           00C5C4   338 _TKEY_DAT	=	0xc5c4
                           0000C4   339 _TKEY_DATL	=	0x00c4
                           0000C5   340 _TKEY_DATH	=	0x00c5
                           000091   341 _USB_C_CTRL	=	0x0091
                           0000D1   342 _UDEV_CTRL	=	0x00d1
                           0000D2   343 _UEP1_CTRL	=	0x00d2
                           0000D3   344 _UEP1_T_LEN	=	0x00d3
                           0000D4   345 _UEP2_CTRL	=	0x00d4
                           0000D5   346 _UEP2_T_LEN	=	0x00d5
                           0000D6   347 _UEP3_CTRL	=	0x00d6
                           0000D7   348 _UEP3_T_LEN	=	0x00d7
                           0000D8   349 _USB_INT_FG	=	0x00d8
                           0000D9   350 _USB_INT_ST	=	0x00d9
                           0000DA   351 _USB_MIS_ST	=	0x00da
                           0000DB   352 _USB_RX_LEN	=	0x00db
                           0000DC   353 _UEP0_CTRL	=	0x00dc
                           0000DD   354 _UEP0_T_LEN	=	0x00dd
                           0000DE   355 _UEP4_CTRL	=	0x00de
                           0000DF   356 _UEP4_T_LEN	=	0x00df
                           0000E1   357 _USB_INT_EN	=	0x00e1
                           0000E2   358 _USB_CTRL	=	0x00e2
                           0000E3   359 _USB_DEV_AD	=	0x00e3
                           00E5E4   360 _UEP2_DMA	=	0xe5e4
                           0000E4   361 _UEP2_DMA_L	=	0x00e4
                           0000E5   362 _UEP2_DMA_H	=	0x00e5
                           00E7E6   363 _UEP3_DMA	=	0xe7e6
                           0000E6   364 _UEP3_DMA_L	=	0x00e6
                           0000E7   365 _UEP3_DMA_H	=	0x00e7
                           0000EA   366 _UEP4_1_MOD	=	0x00ea
                           0000EB   367 _UEP2_3_MOD	=	0x00eb
                           00EDEC   368 _UEP0_DMA	=	0xedec
                           0000EC   369 _UEP0_DMA_L	=	0x00ec
                           0000ED   370 _UEP0_DMA_H	=	0x00ed
                           00EFEE   371 _UEP1_DMA	=	0xefee
                           0000EE   372 _UEP1_DMA_L	=	0x00ee
                           0000EF   373 _UEP1_DMA_H	=	0x00ef
                                    374 ;--------------------------------------------------------
                                    375 ; special function bits
                                    376 ;--------------------------------------------------------
                                    377 	.area RSEG    (ABS,DATA)
      000000                        378 	.org 0x0000
                           0000D7   379 _CY	=	0x00d7
                           0000D6   380 _AC	=	0x00d6
                           0000D5   381 _F0	=	0x00d5
                           0000D4   382 _RS1	=	0x00d4
                           0000D3   383 _RS0	=	0x00d3
                           0000D2   384 _OV	=	0x00d2
                           0000D1   385 _F1	=	0x00d1
                           0000D0   386 _P	=	0x00d0
                           0000AF   387 _EA	=	0x00af
                           0000AE   388 _E_DIS	=	0x00ae
                           0000AD   389 _ET2	=	0x00ad
                           0000AC   390 _ES	=	0x00ac
                           0000AB   391 _ET1	=	0x00ab
                           0000AA   392 _EX1	=	0x00aa
                           0000A9   393 _ET0	=	0x00a9
                           0000A8   394 _EX0	=	0x00a8
                           0000BF   395 _PH_FLAG	=	0x00bf
                           0000BE   396 _PL_FLAG	=	0x00be
                           0000BD   397 _PT2	=	0x00bd
                           0000BC   398 _PS	=	0x00bc
                           0000BB   399 _PT1	=	0x00bb
                           0000BA   400 _PX1	=	0x00ba
                           0000B9   401 _PT0	=	0x00b9
                           0000B8   402 _PX0	=	0x00b8
                           0000EF   403 _IE_WDOG	=	0x00ef
                           0000EE   404 _IE_GPIO	=	0x00ee
                           0000ED   405 _IE_PWMX	=	0x00ed
                           0000EC   406 _IE_UART1	=	0x00ec
                           0000EB   407 _IE_ADC	=	0x00eb
                           0000EA   408 _IE_USB	=	0x00ea
                           0000E9   409 _IE_TKEY	=	0x00e9
                           0000E8   410 _IE_SPI0	=	0x00e8
                           000097   411 _SCK	=	0x0097
                           000097   412 _TXD1	=	0x0097
                           000097   413 _TIN5	=	0x0097
                           000096   414 _MISO	=	0x0096
                           000096   415 _RXD1	=	0x0096
                           000096   416 _TIN4	=	0x0096
                           000095   417 _MOSI	=	0x0095
                           000095   418 _PWM1	=	0x0095
                           000095   419 _TIN3	=	0x0095
                           000095   420 _UCC2	=	0x0095
                           000095   421 _AIN2	=	0x0095
                           000094   422 _T2_	=	0x0094
                           000094   423 _CAP1_	=	0x0094
                           000094   424 _SCS	=	0x0094
                           000094   425 _TIN2	=	0x0094
                           000094   426 _UCC1	=	0x0094
                           000094   427 _AIN1	=	0x0094
                           000093   428 _TXD_	=	0x0093
                           000092   429 _RXD_	=	0x0092
                           000091   430 _T2EX	=	0x0091
                           000091   431 _CAP2	=	0x0091
                           000091   432 _TIN1	=	0x0091
                           000091   433 _VBUS2	=	0x0091
                           000091   434 _AIN0	=	0x0091
                           000090   435 _T2	=	0x0090
                           000090   436 _CAP1	=	0x0090
                           000090   437 _TIN0	=	0x0090
                           0000B7   438 _UDM	=	0x00b7
                           0000B6   439 _UDP	=	0x00b6
                           0000B5   440 _T1	=	0x00b5
                           0000B4   441 _PWM2	=	0x00b4
                           0000B4   442 _RXD1_	=	0x00b4
                           0000B4   443 _T0	=	0x00b4
                           0000B3   444 _INT1	=	0x00b3
                           0000B2   445 _TXD1_	=	0x00b2
                           0000B2   446 _INT0	=	0x00b2
                           0000B2   447 _VBUS1	=	0x00b2
                           0000B2   448 _AIN3	=	0x00b2
                           0000B1   449 _PWM2_	=	0x00b1
                           0000B1   450 _TXD	=	0x00b1
                           0000B0   451 _PWM1_	=	0x00b0
                           0000B0   452 _RXD	=	0x00b0
                           00008F   453 _TF1	=	0x008f
                           00008E   454 _TR1	=	0x008e
                           00008D   455 _TF0	=	0x008d
                           00008C   456 _TR0	=	0x008c
                           00008B   457 _IE1	=	0x008b
                           00008A   458 _IT1	=	0x008a
                           000089   459 _IE0	=	0x0089
                           000088   460 _IT0	=	0x0088
                           00009F   461 _SM0	=	0x009f
                           00009E   462 _SM1	=	0x009e
                           00009D   463 _SM2	=	0x009d
                           00009C   464 _REN	=	0x009c
                           00009B   465 _TB8	=	0x009b
                           00009A   466 _RB8	=	0x009a
                           000099   467 _TI	=	0x0099
                           000098   468 _RI	=	0x0098
                           0000CF   469 _TF2	=	0x00cf
                           0000CF   470 _CAP1F	=	0x00cf
                           0000CE   471 _EXF2	=	0x00ce
                           0000CD   472 _RCLK	=	0x00cd
                           0000CC   473 _TCLK	=	0x00cc
                           0000CB   474 _EXEN2	=	0x00cb
                           0000CA   475 _TR2	=	0x00ca
                           0000C9   476 _C_T2	=	0x00c9
                           0000C8   477 _CP_RL2	=	0x00c8
                           0000FF   478 _S0_FST_ACT	=	0x00ff
                           0000FE   479 _S0_IF_OV	=	0x00fe
                           0000FD   480 _S0_IF_FIRST	=	0x00fd
                           0000FC   481 _S0_IF_BYTE	=	0x00fc
                           0000FB   482 _S0_FREE	=	0x00fb
                           0000FA   483 _S0_T_FIFO	=	0x00fa
                           0000F8   484 _S0_R_FIFO	=	0x00f8
                           0000C7   485 _U1SM0	=	0x00c7
                           0000C5   486 _U1SMOD	=	0x00c5
                           0000C4   487 _U1REN	=	0x00c4
                           0000C3   488 _U1TB8	=	0x00c3
                           0000C2   489 _U1RB8	=	0x00c2
                           0000C1   490 _U1TI	=	0x00c1
                           0000C0   491 _U1RI	=	0x00c0
                           000087   492 _CMPO	=	0x0087
                           000086   493 _CMP_IF	=	0x0086
                           000085   494 _ADC_IF	=	0x0085
                           000084   495 _ADC_START	=	0x0084
                           000083   496 _CMP_CHAN	=	0x0083
                           000081   497 _ADC_CHAN1	=	0x0081
                           000080   498 _ADC_CHAN0	=	0x0080
                           0000DF   499 _U_IS_NAK	=	0x00df
                           0000DE   500 _U_TOG_OK	=	0x00de
                           0000DD   501 _U_SIE_FREE	=	0x00dd
                           0000DC   502 _UIF_FIFO_OV	=	0x00dc
                           0000DB   503 _UIF_HST_SOF	=	0x00db
                           0000DA   504 _UIF_SUSPEND	=	0x00da
                           0000D9   505 _UIF_TRANSFER	=	0x00d9
                           0000D8   506 _UIF_DETECT	=	0x00d8
                           0000D8   507 _UIF_BUS_RST	=	0x00d8
                           000097   508 _P17	=	0x0097
                           000095   509 _P15	=	0x0095
                                    510 ;--------------------------------------------------------
                                    511 ; overlayable register banks
                                    512 ;--------------------------------------------------------
                                    513 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        514 	.ds 8
                                    515 ;--------------------------------------------------------
                                    516 ; internal ram data
                                    517 ;--------------------------------------------------------
                                    518 	.area DSEG    (DATA)
      000000                        519 _u8FPD:
      000000                        520 	.ds 1
      000001                        521 _C2_WriteFlash_PARM_2:
      000001                        522 	.ds 1
      000002                        523 _C2_WriteFlash_PARM_3:
      000002                        524 	.ds 3
      000005                        525 _C2_WriteFlash_u8Ret_65536_52:
      000005                        526 	.ds 1
      000006                        527 _C2_ReadFlash_PARM_2:
      000006                        528 	.ds 1
      000007                        529 _C2_ReadFlash_PARM_3:
      000007                        530 	.ds 3
      00000A                        531 _C2_ReadFlash_u8Ret_65536_72:
      00000A                        532 	.ds 1
                                    533 ;--------------------------------------------------------
                                    534 ; overlayable items in internal ram 
                                    535 ;--------------------------------------------------------
                                    536 	.area	OSEG    (OVR,DATA)
                                    537 ;--------------------------------------------------------
                                    538 ; indirectly addressable internal ram data
                                    539 ;--------------------------------------------------------
                                    540 	.area ISEG    (DATA)
                                    541 ;--------------------------------------------------------
                                    542 ; absolute internal ram data
                                    543 ;--------------------------------------------------------
                                    544 	.area IABS    (ABS,DATA)
                                    545 	.area IABS    (ABS,DATA)
                                    546 ;--------------------------------------------------------
                                    547 ; bit data
                                    548 ;--------------------------------------------------------
                                    549 	.area BSEG    (BIT)
                                    550 ;--------------------------------------------------------
                                    551 ; paged external ram data
                                    552 ;--------------------------------------------------------
                                    553 	.area PSEG    (PAG,XDATA)
                                    554 ;--------------------------------------------------------
                                    555 ; external ram data
                                    556 ;--------------------------------------------------------
                                    557 	.area XSEG    (XDATA)
                                    558 ;--------------------------------------------------------
                                    559 ; absolute external ram data
                                    560 ;--------------------------------------------------------
                                    561 	.area XABS    (ABS,XDATA)
                                    562 ;--------------------------------------------------------
                                    563 ; external initialized ram data
                                    564 ;--------------------------------------------------------
                                    565 	.area XISEG   (XDATA)
                                    566 	.area HOME    (CODE)
                                    567 	.area GSINIT0 (CODE)
                                    568 	.area GSINIT1 (CODE)
                                    569 	.area GSINIT2 (CODE)
                                    570 	.area GSINIT3 (CODE)
                                    571 	.area GSINIT4 (CODE)
                                    572 	.area GSINIT5 (CODE)
                                    573 	.area GSINIT  (CODE)
                                    574 	.area GSFINAL (CODE)
                                    575 	.area CSEG    (CODE)
                                    576 ;--------------------------------------------------------
                                    577 ; global & static initialisations
                                    578 ;--------------------------------------------------------
                                    579 	.area HOME    (CODE)
                                    580 	.area GSINIT  (CODE)
                                    581 	.area GSFINAL (CODE)
                                    582 	.area GSINIT  (CODE)
                                    583 ;--------------------------------------------------------
                                    584 ; Home
                                    585 ;--------------------------------------------------------
                                    586 	.area HOME    (CODE)
                                    587 	.area HOME    (CODE)
                                    588 ;--------------------------------------------------------
                                    589 ; code
                                    590 ;--------------------------------------------------------
                                    591 	.area CSEG    (CODE)
                                    592 ;------------------------------------------------------------
                                    593 ;Allocation info for local variables in function 'C2_Delay'
                                    594 ;------------------------------------------------------------
                                    595 ;	C2.c:14: void C2_Delay(void)
                                    596 ;	-----------------------------------------
                                    597 ;	 function C2_Delay
                                    598 ;	-----------------------------------------
      000000                        599 _C2_Delay:
                           000007   600 	ar7 = 0x07
                           000006   601 	ar6 = 0x06
                           000005   602 	ar5 = 0x05
                           000004   603 	ar4 = 0x04
                           000003   604 	ar3 = 0x03
                           000002   605 	ar2 = 0x02
                           000001   606 	ar1 = 0x01
                           000000   607 	ar0 = 0x00
                                    608 ;	C2.c:16: __asm nop __endasm;
      000000 00               [12]  609 	nop	
                                    610 ;	C2.c:17: __asm nop __endasm;
      000001 00               [12]  611 	nop	
                                    612 ;	C2.c:18: __asm nop __endasm;
      000002 00               [12]  613 	nop	
                                    614 ;	C2.c:19: __asm nop __endasm;
      000003 00               [12]  615 	nop	
                                    616 ;	C2.c:20: __asm nop __endasm;
      000004 00               [12]  617 	nop	
                                    618 ;	C2.c:23: }
      000005 22               [24]  619 	ret
                                    620 ;------------------------------------------------------------
                                    621 ;Allocation info for local variables in function 'delay'
                                    622 ;------------------------------------------------------------
                                    623 ;uDelay                    Allocated to registers r4 r5 r6 r7 
                                    624 ;------------------------------------------------------------
                                    625 ;	C2.c:25: void delay(unsigned long uDelay) {
                                    626 ;	-----------------------------------------
                                    627 ;	 function delay
                                    628 ;	-----------------------------------------
      000006                        629 _delay:
                                    630 ;	C2.c:26: __delay_us(uDelay);
                                    631 ;	C2.c:45: }
      000006 02r00r00         [24]  632 	ljmp	___delay_us
                                    633 ;------------------------------------------------------------
                                    634 ;Allocation info for local variables in function 'C2_Exit'
                                    635 ;------------------------------------------------------------
                                    636 ;	C2.c:61: void C2_Exit(void) {
                                    637 ;	-----------------------------------------
                                    638 ;	 function C2_Exit
                                    639 ;	-----------------------------------------
      000009                        640 _C2_Exit:
                                    641 ;	C2.c:62: C2K_1;
                                    642 ;	assignBit
      000009 D2 97            [12]  643 	setb	_P17
                                    644 ;	C2.c:63: C2K_DIS();
      00000B 43 90 80         [24]  645 	orl	_P1,#0x80
      00000E 43 92 80         [24]  646 	orl	_P1_MOD_OC,#0x80
      000011 43 93 80         [24]  647 	orl	_P1_DIR_PU,#0x80
                                    648 ;	C2.c:64: C2D_1;
                                    649 ;	assignBit
      000014 D2 95            [12]  650 	setb	_P15
                                    651 ;	C2.c:65: C2D_DIS();
      000016 43 90 20         [24]  652 	orl	_P1,#0x20
      000019 43 92 20         [24]  653 	orl	_P1_MOD_OC,#0x20
      00001C 43 93 20         [24]  654 	orl	_P1_DIR_PU,#0x20
                                    655 ;	C2.c:66: }
      00001F 22               [24]  656 	ret
                                    657 ;------------------------------------------------------------
                                    658 ;Allocation info for local variables in function 'C2_Init'
                                    659 ;------------------------------------------------------------
                                    660 ;u8Address                 Allocated to registers r7 
                                    661 ;------------------------------------------------------------
                                    662 ;	C2.c:68: void C2_Init(uint8_t u8Address) {
                                    663 ;	-----------------------------------------
                                    664 ;	 function C2_Init
                                    665 ;	-----------------------------------------
      000020                        666 _C2_Init:
      000020 AF 82            [24]  667 	mov	r7,dpl
                                    668 ;	C2.c:69: C2K_1;
                                    669 ;	assignBit
      000022 D2 97            [12]  670 	setb	_P17
                                    671 ;	C2.c:70: C2K_EN();
      000024 53 92 7F         [24]  672 	anl	_P1_MOD_OC,#0x7f
      000027 43 93 80         [24]  673 	orl	_P1_DIR_PU,#0x80
                                    674 ;	C2.c:71: C2D_1;
                                    675 ;	assignBit
      00002A D2 95            [12]  676 	setb	_P15
                                    677 ;	C2.c:72: C2D_EN();
      00002C 53 92 DF         [24]  678 	anl	_P1_MOD_OC,#0xdf
      00002F 43 93 20         [24]  679 	orl	_P1_DIR_PU,#0x20
                                    680 ;	C2.c:73: u8FPD = u8Address;
      000032 8F*00            [24]  681 	mov	_u8FPD,r7
                                    682 ;	C2.c:74: }
      000034 22               [24]  683 	ret
                                    684 ;------------------------------------------------------------
                                    685 ;Allocation info for local variables in function 'C2_Send'
                                    686 ;------------------------------------------------------------
                                    687 ;u8Data                    Allocated to registers r7 
                                    688 ;i                         Allocated to registers r6 
                                    689 ;------------------------------------------------------------
                                    690 ;	C2.c:76: void C2_Send(uint8_t u8Data) {
                                    691 ;	-----------------------------------------
                                    692 ;	 function C2_Send
                                    693 ;	-----------------------------------------
      000035                        694 _C2_Send:
      000035 AF 82            [24]  695 	mov	r7,dpl
                                    696 ;	C2.c:78: C2D_EN();
      000037 53 92 DF         [24]  697 	anl	_P1_MOD_OC,#0xdf
      00003A 43 93 20         [24]  698 	orl	_P1_DIR_PU,#0x20
                                    699 ;	C2.c:79: for(i=0; i<8; ++i) {
      00003D 7E 00            [12]  700 	mov	r6,#0x00
      00003F                        701 00105$:
                                    702 ;	C2.c:80: if(u8Data&0x01) {
      00003F EF               [12]  703 	mov	a,r7
      000040 30 E0 04         [24]  704 	jnb	acc.0,00102$
                                    705 ;	C2.c:81: C2D_1;
                                    706 ;	assignBit
      000043 D2 95            [12]  707 	setb	_P15
      000045 80 02            [24]  708 	sjmp	00103$
      000047                        709 00102$:
                                    710 ;	C2.c:83: C2D_0;
                                    711 ;	assignBit
      000047 C2 95            [12]  712 	clr	_P15
      000049                        713 00103$:
                                    714 ;	C2.c:86: C2_Delay();
      000049 C0 07            [24]  715 	push	ar7
      00004B C0 06            [24]  716 	push	ar6
      00004D 12r00r00         [24]  717 	lcall	_C2_Delay
      000050 D0 06            [24]  718 	pop	ar6
      000052 D0 07            [24]  719 	pop	ar7
                                    720 ;	C2.c:87: C2K_0;
                                    721 ;	assignBit
      000054 C2 97            [12]  722 	clr	_P17
                                    723 ;	C2.c:89: u8Data>>=1;
      000056 EF               [12]  724 	mov	a,r7
      000057 C3               [12]  725 	clr	c
      000058 13               [12]  726 	rrc	a
      000059 FF               [12]  727 	mov	r7,a
                                    728 ;	C2.c:90: C2K_1;
                                    729 ;	assignBit
      00005A D2 97            [12]  730 	setb	_P17
                                    731 ;	C2.c:79: for(i=0; i<8; ++i) {
      00005C 0E               [12]  732 	inc	r6
      00005D BE 08 00         [24]  733 	cjne	r6,#0x08,00119$
      000060                        734 00119$:
      000060 40 DD            [24]  735 	jc	00105$
                                    736 ;	C2.c:93: }
      000062 22               [24]  737 	ret
                                    738 ;------------------------------------------------------------
                                    739 ;Allocation info for local variables in function 'C2_Read'
                                    740 ;------------------------------------------------------------
                                    741 ;i                         Allocated to registers r6 
                                    742 ;ret                       Allocated to registers r7 
                                    743 ;------------------------------------------------------------
                                    744 ;	C2.c:95: uint8_t C2_Read(void) {
                                    745 ;	-----------------------------------------
                                    746 ;	 function C2_Read
                                    747 ;	-----------------------------------------
      000063                        748 _C2_Read:
                                    749 ;	C2.c:97: uint8_t ret=0;
      000063 7F 00            [12]  750 	mov	r7,#0x00
                                    751 ;	C2.c:98: C2D_DIS();
      000065 43 90 20         [24]  752 	orl	_P1,#0x20
      000068 43 92 20         [24]  753 	orl	_P1_MOD_OC,#0x20
      00006B 43 93 20         [24]  754 	orl	_P1_DIR_PU,#0x20
                                    755 ;	C2.c:99: for(i=0; i<8; ++i) {
      00006E 7E 00            [12]  756 	mov	r6,#0x00
      000070                        757 00104$:
                                    758 ;	C2.c:100: C2K_0;
                                    759 ;	assignBit
      000070 C2 97            [12]  760 	clr	_P17
                                    761 ;	C2.c:102: C2_Delay();
      000072 C0 07            [24]  762 	push	ar7
      000074 C0 06            [24]  763 	push	ar6
      000076 12r00r00         [24]  764 	lcall	_C2_Delay
      000079 D0 06            [24]  765 	pop	ar6
      00007B D0 07            [24]  766 	pop	ar7
                                    767 ;	C2.c:103: C2K_1;
                                    768 ;	assignBit
      00007D D2 97            [12]  769 	setb	_P17
                                    770 ;	C2.c:105: ret>>=1;
                                    771 ;	C2.c:106: if(C2D_IN_VAL) {
                                    772 ;	C2.c:107: ret|=0x80;
      00007F EF               [12]  773 	mov	a,r7
      000080 A2 95            [12]  774 	mov	c,_P15
      000082 13               [12]  775 	rrc	a
      000083 FF               [12]  776 	mov	r7,a
                                    777 ;	C2.c:99: for(i=0; i<8; ++i) {
      000084 0E               [12]  778 	inc	r6
      000085 BE 08 00         [24]  779 	cjne	r6,#0x08,00122$
      000088                        780 00122$:
      000088 40 E6            [24]  781 	jc	00104$
                                    782 ;	C2.c:110: return ret;
      00008A 8F 82            [24]  783 	mov	dpl,r7
                                    784 ;	C2.c:111: }
      00008C 22               [24]  785 	ret
                                    786 ;------------------------------------------------------------
                                    787 ;Allocation info for local variables in function 'C2_Reset'
                                    788 ;------------------------------------------------------------
                                    789 ;	C2.c:113: void C2_Reset(void) {
                                    790 ;	-----------------------------------------
                                    791 ;	 function C2_Reset
                                    792 ;	-----------------------------------------
      00008D                        793 _C2_Reset:
                                    794 ;	C2.c:114: C2D_DIS();
      00008D 43 90 20         [24]  795 	orl	_P1,#0x20
      000090 43 92 20         [24]  796 	orl	_P1_MOD_OC,#0x20
      000093 43 93 20         [24]  797 	orl	_P1_DIR_PU,#0x20
                                    798 ;	C2.c:115: C2K_0;
                                    799 ;	assignBit
      000096 C2 97            [12]  800 	clr	_P17
                                    801 ;	C2.c:116: __delay_ms(100);
      000098 90 00 64         [24]  802 	mov	dptr,#0x0064
      00009B 12r00r00         [24]  803 	lcall	___delay_ms
                                    804 ;	C2.c:117: C2K_1;
                                    805 ;	assignBit
      00009E D2 97            [12]  806 	setb	_P17
                                    807 ;	C2.c:119: }
      0000A0 22               [24]  808 	ret
                                    809 ;------------------------------------------------------------
                                    810 ;Allocation info for local variables in function 'C2_ReadDR'
                                    811 ;------------------------------------------------------------
                                    812 ;pu8Ret                    Allocated to registers r5 r6 r7 
                                    813 ;ret                       Allocated to registers r4 
                                    814 ;i                         Allocated to registers r2 r3 
                                    815 ;u8TimeOut                 Allocated to registers r4 
                                    816 ;------------------------------------------------------------
                                    817 ;	C2.c:121: uint8_t C2_ReadDR(uint8_t *pu8Ret) {
                                    818 ;	-----------------------------------------
                                    819 ;	 function C2_ReadDR
                                    820 ;	-----------------------------------------
      0000A1                        821 _C2_ReadDR:
      0000A1 AD 82            [24]  822 	mov	r5,dpl
      0000A3 AE 83            [24]  823 	mov	r6,dph
      0000A5 AF F0            [24]  824 	mov	r7,b
                                    825 ;	C2.c:126: C2D_DIS();
      0000A7 43 90 20         [24]  826 	orl	_P1,#0x20
      0000AA 43 92 20         [24]  827 	orl	_P1_MOD_OC,#0x20
      0000AD 43 93 20         [24]  828 	orl	_P1_DIR_PU,#0x20
                                    829 ;	C2.c:127: C2K_0;
                                    830 ;	assignBit
      0000B0 C2 97            [12]  831 	clr	_P17
                                    832 ;	C2.c:129: C2_Delay();
      0000B2 C0 07            [24]  833 	push	ar7
      0000B4 C0 06            [24]  834 	push	ar6
      0000B6 C0 05            [24]  835 	push	ar5
      0000B8 12r00r00         [24]  836 	lcall	_C2_Delay
                                    837 ;	C2.c:130: C2K_1;
                                    838 ;	assignBit
      0000BB D2 97            [12]  839 	setb	_P17
                                    840 ;	C2.c:131: delay(1);
      0000BD 90 00 01         [24]  841 	mov	dptr,#(0x01&0x00ff)
      0000C0 E4               [12]  842 	clr	a
      0000C1 F5 F0            [12]  843 	mov	b,a
      0000C3 12r00r06         [24]  844 	lcall	_delay
                                    845 ;	C2.c:133: C2D_EN();
      0000C6 53 92 DF         [24]  846 	anl	_P1_MOD_OC,#0xdf
      0000C9 43 93 20         [24]  847 	orl	_P1_DIR_PU,#0x20
                                    848 ;	C2.c:135: delay(6);
      0000CC 90 00 06         [24]  849 	mov	dptr,#(0x06&0x00ff)
      0000CF E4               [12]  850 	clr	a
      0000D0 F5 F0            [12]  851 	mov	b,a
      0000D2 12r00r06         [24]  852 	lcall	_delay
                                    853 ;	C2.c:137: C2D_0;
                                    854 ;	assignBit
      0000D5 C2 95            [12]  855 	clr	_P15
                                    856 ;	C2.c:138: delay(1);
      0000D7 90 00 01         [24]  857 	mov	dptr,#(0x01&0x00ff)
      0000DA E4               [12]  858 	clr	a
      0000DB F5 F0            [12]  859 	mov	b,a
      0000DD 12r00r06         [24]  860 	lcall	_delay
                                    861 ;	C2.c:139: C2K_0;
                                    862 ;	assignBit
      0000E0 C2 97            [12]  863 	clr	_P17
                                    864 ;	C2.c:141: C2_Delay();
      0000E2 12r00r00         [24]  865 	lcall	_C2_Delay
                                    866 ;	C2.c:142: C2K_1;
                                    867 ;	assignBit
      0000E5 D2 97            [12]  868 	setb	_P17
                                    869 ;	C2.c:143: delay(1);
      0000E7 90 00 01         [24]  870 	mov	dptr,#(0x01&0x00ff)
      0000EA E4               [12]  871 	clr	a
      0000EB F5 F0            [12]  872 	mov	b,a
      0000ED 12r00r06         [24]  873 	lcall	_delay
                                    874 ;	C2.c:145: C2K_0;
                                    875 ;	assignBit
      0000F0 C2 97            [12]  876 	clr	_P17
                                    877 ;	C2.c:147: C2_Delay();
      0000F2 12r00r00         [24]  878 	lcall	_C2_Delay
                                    879 ;	C2.c:148: C2K_1;
                                    880 ;	assignBit
      0000F5 D2 97            [12]  881 	setb	_P17
                                    882 ;	C2.c:149: delay(1);
      0000F7 90 00 01         [24]  883 	mov	dptr,#(0x01&0x00ff)
      0000FA E4               [12]  884 	clr	a
      0000FB F5 F0            [12]  885 	mov	b,a
      0000FD 12r00r06         [24]  886 	lcall	_delay
                                    887 ;	C2.c:154: C2K_0;
                                    888 ;	assignBit
      000100 C2 97            [12]  889 	clr	_P17
                                    890 ;	C2.c:156: C2_Delay();
      000102 12r00r00         [24]  891 	lcall	_C2_Delay
                                    892 ;	C2.c:157: C2K_1;
                                    893 ;	assignBit
      000105 D2 97            [12]  894 	setb	_P17
                                    895 ;	C2.c:158: delay(1);
      000107 90 00 01         [24]  896 	mov	dptr,#(0x01&0x00ff)
      00010A E4               [12]  897 	clr	a
      00010B F5 F0            [12]  898 	mov	b,a
      00010D 12r00r06         [24]  899 	lcall	_delay
                                    900 ;	C2.c:160: C2K_0;
                                    901 ;	assignBit
      000110 C2 97            [12]  902 	clr	_P17
                                    903 ;	C2.c:162: C2_Delay();
      000112 12r00r00         [24]  904 	lcall	_C2_Delay
                                    905 ;	C2.c:163: C2K_1;
                                    906 ;	assignBit
      000115 D2 97            [12]  907 	setb	_P17
                                    908 ;	C2.c:164: delay(1);
      000117 90 00 01         [24]  909 	mov	dptr,#(0x01&0x00ff)
      00011A E4               [12]  910 	clr	a
      00011B F5 F0            [12]  911 	mov	b,a
      00011D 12r00r06         [24]  912 	lcall	_delay
                                    913 ;	C2.c:167: delay(6);
      000120 90 00 06         [24]  914 	mov	dptr,#(0x06&0x00ff)
      000123 E4               [12]  915 	clr	a
      000124 F5 F0            [12]  916 	mov	b,a
      000126 12r00r06         [24]  917 	lcall	_delay
      000129 D0 05            [24]  918 	pop	ar5
      00012B D0 06            [24]  919 	pop	ar6
      00012D D0 07            [24]  920 	pop	ar7
                                    921 ;	C2.c:169: C2D_DIS();
      00012F 43 90 20         [24]  922 	orl	_P1,#0x20
      000132 43 92 20         [24]  923 	orl	_P1_MOD_OC,#0x20
      000135 43 93 20         [24]  924 	orl	_P1_DIR_PU,#0x20
                                    925 ;	C2.c:171: u8TimeOut = 1;
      000138 7C 01            [12]  926 	mov	r4,#0x01
                                    927 ;	C2.c:172: for (i = 0; i < 50000; ++i) {
      00013A 7A 00            [12]  928 	mov	r2,#0x00
      00013C 7B 00            [12]  929 	mov	r3,#0x00
      00013E                        930 00106$:
                                    931 ;	C2.c:173: C2K_0;
                                    932 ;	assignBit
      00013E C2 97            [12]  933 	clr	_P17
                                    934 ;	C2.c:175: C2_Delay();
      000140 C0 07            [24]  935 	push	ar7
      000142 C0 06            [24]  936 	push	ar6
      000144 C0 05            [24]  937 	push	ar5
      000146 C0 04            [24]  938 	push	ar4
      000148 C0 03            [24]  939 	push	ar3
      00014A C0 02            [24]  940 	push	ar2
      00014C 12r00r00         [24]  941 	lcall	_C2_Delay
                                    942 ;	C2.c:176: C2K_1;
                                    943 ;	assignBit
      00014F D2 97            [12]  944 	setb	_P17
                                    945 ;	C2.c:177: delay(1);
      000151 90 00 01         [24]  946 	mov	dptr,#(0x01&0x00ff)
      000154 E4               [12]  947 	clr	a
      000155 F5 F0            [12]  948 	mov	b,a
      000157 12r00r06         [24]  949 	lcall	_delay
      00015A D0 02            [24]  950 	pop	ar2
      00015C D0 03            [24]  951 	pop	ar3
      00015E D0 04            [24]  952 	pop	ar4
      000160 D0 05            [24]  953 	pop	ar5
      000162 D0 06            [24]  954 	pop	ar6
      000164 D0 07            [24]  955 	pop	ar7
                                    956 ;	C2.c:178: if(C2D_IN_VAL) {
      000166 30 95 04         [24]  957 	jnb	_P15,00107$
                                    958 ;	C2.c:179: u8TimeOut = 0;
      000169 7C 00            [12]  959 	mov	r4,#0x00
                                    960 ;	C2.c:180: break;
      00016B 80 0E            [24]  961 	sjmp	00103$
      00016D                        962 00107$:
                                    963 ;	C2.c:172: for (i = 0; i < 50000; ++i) {
      00016D 0A               [12]  964 	inc	r2
      00016E BA 00 01         [24]  965 	cjne	r2,#0x00,00123$
      000171 0B               [12]  966 	inc	r3
      000172                        967 00123$:
      000172 C3               [12]  968 	clr	c
      000173 EA               [12]  969 	mov	a,r2
      000174 94 50            [12]  970 	subb	a,#0x50
      000176 EB               [12]  971 	mov	a,r3
      000177 94 C3            [12]  972 	subb	a,#0xc3
      000179 40 C3            [24]  973 	jc	00106$
      00017B                        974 00103$:
                                    975 ;	C2.c:185: if (u8TimeOut) {
      00017B EC               [12]  976 	mov	a,r4
      00017C 60 0E            [24]  977 	jz	00105$
                                    978 ;	C2.c:186: *pu8Ret = 0;
      00017E 8D 82            [24]  979 	mov	dpl,r5
      000180 8E 83            [24]  980 	mov	dph,r6
      000182 8F F0            [24]  981 	mov	b,r7
      000184 E4               [12]  982 	clr	a
      000185 12r00r00         [24]  983 	lcall	__gptrput
                                    984 ;	C2.c:187: return 0;
      000188 75 82 00         [24]  985 	mov	dpl,#0x00
      00018B 22               [24]  986 	ret
      00018C                        987 00105$:
                                    988 ;	C2.c:191: delay(6);
      00018C 90 00 06         [24]  989 	mov	dptr,#(0x06&0x00ff)
      00018F E4               [12]  990 	clr	a
      000190 F5 F0            [12]  991 	mov	b,a
      000192 C0 07            [24]  992 	push	ar7
      000194 C0 06            [24]  993 	push	ar6
      000196 C0 05            [24]  994 	push	ar5
      000198 12r00r06         [24]  995 	lcall	_delay
                                    996 ;	C2.c:193: ret=C2_Read();
      00019B 12r00r63         [24]  997 	lcall	_C2_Read
      00019E AC 82            [24]  998 	mov	r4,dpl
                                    999 ;	C2.c:196: delay(6);
      0001A0 90 00 06         [24] 1000 	mov	dptr,#(0x06&0x00ff)
      0001A3 E4               [12] 1001 	clr	a
      0001A4 F5 F0            [12] 1002 	mov	b,a
      0001A6 C0 04            [24] 1003 	push	ar4
      0001A8 12r00r06         [24] 1004 	lcall	_delay
                                   1005 ;	C2.c:198: C2K_0;
                                   1006 ;	assignBit
      0001AB C2 97            [12] 1007 	clr	_P17
                                   1008 ;	C2.c:200: C2_Delay();
      0001AD 12r00r00         [24] 1009 	lcall	_C2_Delay
                                   1010 ;	C2.c:201: C2K_1;
                                   1011 ;	assignBit
      0001B0 D2 97            [12] 1012 	setb	_P17
                                   1013 ;	C2.c:202: delay(1);
      0001B2 90 00 01         [24] 1014 	mov	dptr,#(0x01&0x00ff)
      0001B5 E4               [12] 1015 	clr	a
      0001B6 F5 F0            [12] 1016 	mov	b,a
      0001B8 12r00r06         [24] 1017 	lcall	_delay
      0001BB D0 04            [24] 1018 	pop	ar4
      0001BD D0 05            [24] 1019 	pop	ar5
      0001BF D0 06            [24] 1020 	pop	ar6
      0001C1 D0 07            [24] 1021 	pop	ar7
                                   1022 ;	C2.c:203: *pu8Ret = 1;
      0001C3 8D 82            [24] 1023 	mov	dpl,r5
      0001C5 8E 83            [24] 1024 	mov	dph,r6
      0001C7 8F F0            [24] 1025 	mov	b,r7
      0001C9 74 01            [12] 1026 	mov	a,#0x01
      0001CB 12r00r00         [24] 1027 	lcall	__gptrput
                                   1028 ;	C2.c:204: return ret;
      0001CE 8C 82            [24] 1029 	mov	dpl,r4
                                   1030 ;	C2.c:205: }
      0001D0 22               [24] 1031 	ret
                                   1032 ;------------------------------------------------------------
                                   1033 ;Allocation info for local variables in function 'C2_WriteAR'
                                   1034 ;------------------------------------------------------------
                                   1035 ;u8Data                    Allocated to registers r7 
                                   1036 ;------------------------------------------------------------
                                   1037 ;	C2.c:207: void C2_WriteAR(uint8_t u8Data) {
                                   1038 ;	-----------------------------------------
                                   1039 ;	 function C2_WriteAR
                                   1040 ;	-----------------------------------------
      0001D1                       1041 _C2_WriteAR:
      0001D1 AF 82            [24] 1042 	mov	r7,dpl
                                   1043 ;	C2.c:208: C2D_DIS();
      0001D3 43 90 20         [24] 1044 	orl	_P1,#0x20
      0001D6 43 92 20         [24] 1045 	orl	_P1_MOD_OC,#0x20
      0001D9 43 93 20         [24] 1046 	orl	_P1_DIR_PU,#0x20
                                   1047 ;	C2.c:209: C2K_0;
                                   1048 ;	assignBit
      0001DC C2 97            [12] 1049 	clr	_P17
                                   1050 ;	C2.c:210: delay(1);
      0001DE 90 00 01         [24] 1051 	mov	dptr,#(0x01&0x00ff)
      0001E1 E4               [12] 1052 	clr	a
      0001E2 F5 F0            [12] 1053 	mov	b,a
      0001E4 C0 07            [24] 1054 	push	ar7
      0001E6 12r00r06         [24] 1055 	lcall	_delay
                                   1056 ;	C2.c:211: C2K_1;
                                   1057 ;	assignBit
      0001E9 D2 97            [12] 1058 	setb	_P17
                                   1059 ;	C2.c:212: delay(1);
      0001EB 90 00 01         [24] 1060 	mov	dptr,#(0x01&0x00ff)
      0001EE E4               [12] 1061 	clr	a
      0001EF F5 F0            [12] 1062 	mov	b,a
      0001F1 12r00r06         [24] 1063 	lcall	_delay
                                   1064 ;	C2.c:214: C2D_EN();
      0001F4 53 92 DF         [24] 1065 	anl	_P1_MOD_OC,#0xdf
      0001F7 43 93 20         [24] 1066 	orl	_P1_DIR_PU,#0x20
                                   1067 ;	C2.c:216: delay(6);
      0001FA 90 00 06         [24] 1068 	mov	dptr,#(0x06&0x00ff)
      0001FD E4               [12] 1069 	clr	a
      0001FE F5 F0            [12] 1070 	mov	b,a
      000200 12r00r06         [24] 1071 	lcall	_delay
                                   1072 ;	C2.c:218: C2D_1;
                                   1073 ;	assignBit
      000203 D2 95            [12] 1074 	setb	_P15
                                   1075 ;	C2.c:219: delay(1);
      000205 90 00 01         [24] 1076 	mov	dptr,#(0x01&0x00ff)
      000208 E4               [12] 1077 	clr	a
      000209 F5 F0            [12] 1078 	mov	b,a
      00020B 12r00r06         [24] 1079 	lcall	_delay
                                   1080 ;	C2.c:220: C2K_0;
                                   1081 ;	assignBit
      00020E C2 97            [12] 1082 	clr	_P17
                                   1083 ;	C2.c:221: delay(1);
      000210 90 00 01         [24] 1084 	mov	dptr,#(0x01&0x00ff)
      000213 E4               [12] 1085 	clr	a
      000214 F5 F0            [12] 1086 	mov	b,a
      000216 12r00r06         [24] 1087 	lcall	_delay
                                   1088 ;	C2.c:222: C2K_1;
                                   1089 ;	assignBit
      000219 D2 97            [12] 1090 	setb	_P17
                                   1091 ;	C2.c:223: delay(1);
      00021B 90 00 01         [24] 1092 	mov	dptr,#(0x01&0x00ff)
      00021E E4               [12] 1093 	clr	a
      00021F F5 F0            [12] 1094 	mov	b,a
      000221 12r00r06         [24] 1095 	lcall	_delay
                                   1096 ;	C2.c:225: C2K_0;
                                   1097 ;	assignBit
      000224 C2 97            [12] 1098 	clr	_P17
                                   1099 ;	C2.c:226: delay(1);
      000226 90 00 01         [24] 1100 	mov	dptr,#(0x01&0x00ff)
      000229 E4               [12] 1101 	clr	a
      00022A F5 F0            [12] 1102 	mov	b,a
      00022C 12r00r06         [24] 1103 	lcall	_delay
                                   1104 ;	C2.c:227: C2K_1;
                                   1105 ;	assignBit
      00022F D2 97            [12] 1106 	setb	_P17
                                   1107 ;	C2.c:228: delay(1);
      000231 90 00 01         [24] 1108 	mov	dptr,#(0x01&0x00ff)
      000234 E4               [12] 1109 	clr	a
      000235 F5 F0            [12] 1110 	mov	b,a
      000237 12r00r06         [24] 1111 	lcall	_delay
                                   1112 ;	C2.c:231: delay(6);
      00023A 90 00 06         [24] 1113 	mov	dptr,#(0x06&0x00ff)
      00023D E4               [12] 1114 	clr	a
      00023E F5 F0            [12] 1115 	mov	b,a
      000240 12r00r06         [24] 1116 	lcall	_delay
      000243 D0 07            [24] 1117 	pop	ar7
                                   1118 ;	C2.c:233: C2_Send(u8Data);
      000245 8F 82            [24] 1119 	mov	dpl,r7
      000247 12r00r35         [24] 1120 	lcall	_C2_Send
                                   1121 ;	C2.c:236: delay(6);
      00024A 90 00 06         [24] 1122 	mov	dptr,#(0x06&0x00ff)
      00024D E4               [12] 1123 	clr	a
      00024E F5 F0            [12] 1124 	mov	b,a
      000250 12r00r06         [24] 1125 	lcall	_delay
                                   1126 ;	C2.c:238: C2K_0;
                                   1127 ;	assignBit
      000253 C2 97            [12] 1128 	clr	_P17
                                   1129 ;	C2.c:239: delay(1);
      000255 90 00 01         [24] 1130 	mov	dptr,#(0x01&0x00ff)
      000258 E4               [12] 1131 	clr	a
      000259 F5 F0            [12] 1132 	mov	b,a
      00025B 12r00r06         [24] 1133 	lcall	_delay
                                   1134 ;	C2.c:240: C2K_1;
                                   1135 ;	assignBit
      00025E D2 97            [12] 1136 	setb	_P17
                                   1137 ;	C2.c:241: delay(1);
      000260 90 00 01         [24] 1138 	mov	dptr,#(0x01&0x00ff)
      000263 E4               [12] 1139 	clr	a
      000264 F5 F0            [12] 1140 	mov	b,a
      000266 12r00r06         [24] 1141 	lcall	_delay
                                   1142 ;	C2.c:242: C2D_DIS();
      000269 43 90 20         [24] 1143 	orl	_P1,#0x20
      00026C 43 92 20         [24] 1144 	orl	_P1_MOD_OC,#0x20
      00026F 43 93 20         [24] 1145 	orl	_P1_DIR_PU,#0x20
                                   1146 ;	C2.c:243: }
      000272 22               [24] 1147 	ret
                                   1148 ;------------------------------------------------------------
                                   1149 ;Allocation info for local variables in function 'C2_ReadAR'
                                   1150 ;------------------------------------------------------------
                                   1151 ;ret                       Allocated to registers r7 
                                   1152 ;------------------------------------------------------------
                                   1153 ;	C2.c:245: uint8_t C2_ReadAR(void) {
                                   1154 ;	-----------------------------------------
                                   1155 ;	 function C2_ReadAR
                                   1156 ;	-----------------------------------------
      000273                       1157 _C2_ReadAR:
                                   1158 ;	C2.c:247: C2D_DIS();
      000273 43 90 20         [24] 1159 	orl	_P1,#0x20
      000276 43 92 20         [24] 1160 	orl	_P1_MOD_OC,#0x20
      000279 43 93 20         [24] 1161 	orl	_P1_DIR_PU,#0x20
                                   1162 ;	C2.c:248: C2K_0;
                                   1163 ;	assignBit
      00027C C2 97            [12] 1164 	clr	_P17
                                   1165 ;	C2.c:249: delay(1);
      00027E 90 00 01         [24] 1166 	mov	dptr,#(0x01&0x00ff)
      000281 E4               [12] 1167 	clr	a
      000282 F5 F0            [12] 1168 	mov	b,a
      000284 12r00r06         [24] 1169 	lcall	_delay
                                   1170 ;	C2.c:250: C2K_1;
                                   1171 ;	assignBit
      000287 D2 97            [12] 1172 	setb	_P17
                                   1173 ;	C2.c:251: delay(1);
      000289 90 00 01         [24] 1174 	mov	dptr,#(0x01&0x00ff)
      00028C E4               [12] 1175 	clr	a
      00028D F5 F0            [12] 1176 	mov	b,a
      00028F 12r00r06         [24] 1177 	lcall	_delay
                                   1178 ;	C2.c:253: C2D_EN();
      000292 53 92 DF         [24] 1179 	anl	_P1_MOD_OC,#0xdf
      000295 43 93 20         [24] 1180 	orl	_P1_DIR_PU,#0x20
                                   1181 ;	C2.c:255: delay(6);
      000298 90 00 06         [24] 1182 	mov	dptr,#(0x06&0x00ff)
      00029B E4               [12] 1183 	clr	a
      00029C F5 F0            [12] 1184 	mov	b,a
      00029E 12r00r06         [24] 1185 	lcall	_delay
                                   1186 ;	C2.c:257: C2D_0;
                                   1187 ;	assignBit
      0002A1 C2 95            [12] 1188 	clr	_P15
                                   1189 ;	C2.c:258: delay(1);
      0002A3 90 00 01         [24] 1190 	mov	dptr,#(0x01&0x00ff)
      0002A6 E4               [12] 1191 	clr	a
      0002A7 F5 F0            [12] 1192 	mov	b,a
      0002A9 12r00r06         [24] 1193 	lcall	_delay
                                   1194 ;	C2.c:259: C2K_0;
                                   1195 ;	assignBit
      0002AC C2 97            [12] 1196 	clr	_P17
                                   1197 ;	C2.c:260: delay(1);
      0002AE 90 00 01         [24] 1198 	mov	dptr,#(0x01&0x00ff)
      0002B1 E4               [12] 1199 	clr	a
      0002B2 F5 F0            [12] 1200 	mov	b,a
      0002B4 12r00r06         [24] 1201 	lcall	_delay
                                   1202 ;	C2.c:261: C2K_1;
                                   1203 ;	assignBit
      0002B7 D2 97            [12] 1204 	setb	_P17
                                   1205 ;	C2.c:262: delay(1);
      0002B9 90 00 01         [24] 1206 	mov	dptr,#(0x01&0x00ff)
      0002BC E4               [12] 1207 	clr	a
      0002BD F5 F0            [12] 1208 	mov	b,a
      0002BF 12r00r06         [24] 1209 	lcall	_delay
                                   1210 ;	C2.c:264: C2D_1;
                                   1211 ;	assignBit
      0002C2 D2 95            [12] 1212 	setb	_P15
                                   1213 ;	C2.c:265: C2K_0;
                                   1214 ;	assignBit
      0002C4 C2 97            [12] 1215 	clr	_P17
                                   1216 ;	C2.c:266: delay(1);
      0002C6 90 00 01         [24] 1217 	mov	dptr,#(0x01&0x00ff)
      0002C9 E4               [12] 1218 	clr	a
      0002CA F5 F0            [12] 1219 	mov	b,a
      0002CC 12r00r06         [24] 1220 	lcall	_delay
                                   1221 ;	C2.c:267: C2K_1;
                                   1222 ;	assignBit
      0002CF D2 97            [12] 1223 	setb	_P17
                                   1224 ;	C2.c:268: delay(1);
      0002D1 90 00 01         [24] 1225 	mov	dptr,#(0x01&0x00ff)
      0002D4 E4               [12] 1226 	clr	a
      0002D5 F5 F0            [12] 1227 	mov	b,a
      0002D7 12r00r06         [24] 1228 	lcall	_delay
                                   1229 ;	C2.c:271: delay(6);
      0002DA 90 00 06         [24] 1230 	mov	dptr,#(0x06&0x00ff)
      0002DD E4               [12] 1231 	clr	a
      0002DE F5 F0            [12] 1232 	mov	b,a
      0002E0 12r00r06         [24] 1233 	lcall	_delay
                                   1234 ;	C2.c:273: ret=C2_Read();
      0002E3 12r00r63         [24] 1235 	lcall	_C2_Read
      0002E6 AF 82            [24] 1236 	mov	r7,dpl
                                   1237 ;	C2.c:276: delay(6);
      0002E8 90 00 06         [24] 1238 	mov	dptr,#(0x06&0x00ff)
      0002EB E4               [12] 1239 	clr	a
      0002EC F5 F0            [12] 1240 	mov	b,a
      0002EE C0 07            [24] 1241 	push	ar7
      0002F0 12r00r06         [24] 1242 	lcall	_delay
                                   1243 ;	C2.c:278: C2K_0;
                                   1244 ;	assignBit
      0002F3 C2 97            [12] 1245 	clr	_P17
                                   1246 ;	C2.c:279: delay(1);
      0002F5 90 00 01         [24] 1247 	mov	dptr,#(0x01&0x00ff)
      0002F8 E4               [12] 1248 	clr	a
      0002F9 F5 F0            [12] 1249 	mov	b,a
      0002FB 12r00r06         [24] 1250 	lcall	_delay
                                   1251 ;	C2.c:280: C2K_1;
                                   1252 ;	assignBit
      0002FE D2 97            [12] 1253 	setb	_P17
                                   1254 ;	C2.c:281: delay(1);
      000300 90 00 01         [24] 1255 	mov	dptr,#(0x01&0x00ff)
      000303 E4               [12] 1256 	clr	a
      000304 F5 F0            [12] 1257 	mov	b,a
      000306 12r00r06         [24] 1258 	lcall	_delay
      000309 D0 07            [24] 1259 	pop	ar7
                                   1260 ;	C2.c:282: return ret;
      00030B 8F 82            [24] 1261 	mov	dpl,r7
                                   1262 ;	C2.c:283: }
      00030D 22               [24] 1263 	ret
                                   1264 ;------------------------------------------------------------
                                   1265 ;Allocation info for local variables in function 'C2_WriteDR'
                                   1266 ;------------------------------------------------------------
                                   1267 ;u8Data                    Allocated to registers r7 
                                   1268 ;i                         Allocated to registers r5 r6 
                                   1269 ;ret                       Allocated to registers r7 
                                   1270 ;------------------------------------------------------------
                                   1271 ;	C2.c:285: uint8_t C2_WriteDR(uint8_t u8Data) {
                                   1272 ;	-----------------------------------------
                                   1273 ;	 function C2_WriteDR
                                   1274 ;	-----------------------------------------
      00030E                       1275 _C2_WriteDR:
      00030E AF 82            [24] 1276 	mov	r7,dpl
                                   1277 ;	C2.c:289: C2D_DIS();
      000310 43 90 20         [24] 1278 	orl	_P1,#0x20
      000313 43 92 20         [24] 1279 	orl	_P1_MOD_OC,#0x20
      000316 43 93 20         [24] 1280 	orl	_P1_DIR_PU,#0x20
                                   1281 ;	C2.c:290: C2K_0;
                                   1282 ;	assignBit
      000319 C2 97            [12] 1283 	clr	_P17
                                   1284 ;	C2.c:291: delay(1);
      00031B 90 00 01         [24] 1285 	mov	dptr,#(0x01&0x00ff)
      00031E E4               [12] 1286 	clr	a
      00031F F5 F0            [12] 1287 	mov	b,a
      000321 C0 07            [24] 1288 	push	ar7
      000323 12r00r06         [24] 1289 	lcall	_delay
                                   1290 ;	C2.c:292: C2K_1;
                                   1291 ;	assignBit
      000326 D2 97            [12] 1292 	setb	_P17
                                   1293 ;	C2.c:293: delay(1);
      000328 90 00 01         [24] 1294 	mov	dptr,#(0x01&0x00ff)
      00032B E4               [12] 1295 	clr	a
      00032C F5 F0            [12] 1296 	mov	b,a
      00032E 12r00r06         [24] 1297 	lcall	_delay
                                   1298 ;	C2.c:295: C2D_EN();
      000331 53 92 DF         [24] 1299 	anl	_P1_MOD_OC,#0xdf
      000334 43 93 20         [24] 1300 	orl	_P1_DIR_PU,#0x20
                                   1301 ;	C2.c:297: delay(6);
      000337 90 00 06         [24] 1302 	mov	dptr,#(0x06&0x00ff)
      00033A E4               [12] 1303 	clr	a
      00033B F5 F0            [12] 1304 	mov	b,a
      00033D 12r00r06         [24] 1305 	lcall	_delay
                                   1306 ;	C2.c:299: C2D_1;
                                   1307 ;	assignBit
      000340 D2 95            [12] 1308 	setb	_P15
                                   1309 ;	C2.c:300: delay(1);
      000342 90 00 01         [24] 1310 	mov	dptr,#(0x01&0x00ff)
      000345 E4               [12] 1311 	clr	a
      000346 F5 F0            [12] 1312 	mov	b,a
      000348 12r00r06         [24] 1313 	lcall	_delay
                                   1314 ;	C2.c:301: C2K_0;
                                   1315 ;	assignBit
      00034B C2 97            [12] 1316 	clr	_P17
                                   1317 ;	C2.c:302: delay(1);
      00034D 90 00 01         [24] 1318 	mov	dptr,#(0x01&0x00ff)
      000350 E4               [12] 1319 	clr	a
      000351 F5 F0            [12] 1320 	mov	b,a
      000353 12r00r06         [24] 1321 	lcall	_delay
                                   1322 ;	C2.c:303: C2K_1;
                                   1323 ;	assignBit
      000356 D2 97            [12] 1324 	setb	_P17
                                   1325 ;	C2.c:304: delay(1);
      000358 90 00 01         [24] 1326 	mov	dptr,#(0x01&0x00ff)
      00035B E4               [12] 1327 	clr	a
      00035C F5 F0            [12] 1328 	mov	b,a
      00035E 12r00r06         [24] 1329 	lcall	_delay
                                   1330 ;	C2.c:306: C2D_0;
                                   1331 ;	assignBit
      000361 C2 95            [12] 1332 	clr	_P15
                                   1333 ;	C2.c:307: C2K_0;
                                   1334 ;	assignBit
      000363 C2 97            [12] 1335 	clr	_P17
                                   1336 ;	C2.c:308: delay(1);
      000365 90 00 01         [24] 1337 	mov	dptr,#(0x01&0x00ff)
      000368 E4               [12] 1338 	clr	a
      000369 F5 F0            [12] 1339 	mov	b,a
      00036B 12r00r06         [24] 1340 	lcall	_delay
                                   1341 ;	C2.c:309: C2K_1;
                                   1342 ;	assignBit
      00036E D2 97            [12] 1343 	setb	_P17
                                   1344 ;	C2.c:310: delay(1);
      000370 90 00 01         [24] 1345 	mov	dptr,#(0x01&0x00ff)
      000373 E4               [12] 1346 	clr	a
      000374 F5 F0            [12] 1347 	mov	b,a
      000376 12r00r06         [24] 1348 	lcall	_delay
                                   1349 ;	C2.c:313: delay(6);
      000379 90 00 06         [24] 1350 	mov	dptr,#(0x06&0x00ff)
      00037C E4               [12] 1351 	clr	a
      00037D F5 F0            [12] 1352 	mov	b,a
      00037F 12r00r06         [24] 1353 	lcall	_delay
                                   1354 ;	C2.c:315: C2K_0;
                                   1355 ;	assignBit
      000382 C2 97            [12] 1356 	clr	_P17
                                   1357 ;	C2.c:316: delay(1);
      000384 90 00 01         [24] 1358 	mov	dptr,#(0x01&0x00ff)
      000387 E4               [12] 1359 	clr	a
      000388 F5 F0            [12] 1360 	mov	b,a
      00038A 12r00r06         [24] 1361 	lcall	_delay
                                   1362 ;	C2.c:317: C2K_1;
                                   1363 ;	assignBit
      00038D D2 97            [12] 1364 	setb	_P17
                                   1365 ;	C2.c:318: delay(1);
      00038F 90 00 01         [24] 1366 	mov	dptr,#(0x01&0x00ff)
      000392 E4               [12] 1367 	clr	a
      000393 F5 F0            [12] 1368 	mov	b,a
      000395 12r00r06         [24] 1369 	lcall	_delay
                                   1370 ;	C2.c:320: C2K_0;
                                   1371 ;	assignBit
      000398 C2 97            [12] 1372 	clr	_P17
                                   1373 ;	C2.c:321: delay(1);
      00039A 90 00 01         [24] 1374 	mov	dptr,#(0x01&0x00ff)
      00039D E4               [12] 1375 	clr	a
      00039E F5 F0            [12] 1376 	mov	b,a
      0003A0 12r00r06         [24] 1377 	lcall	_delay
                                   1378 ;	C2.c:322: C2K_1;
                                   1379 ;	assignBit
      0003A3 D2 97            [12] 1380 	setb	_P17
                                   1381 ;	C2.c:323: delay(1);
      0003A5 90 00 01         [24] 1382 	mov	dptr,#(0x01&0x00ff)
      0003A8 E4               [12] 1383 	clr	a
      0003A9 F5 F0            [12] 1384 	mov	b,a
      0003AB 12r00r06         [24] 1385 	lcall	_delay
                                   1386 ;	C2.c:327: delay(6);
      0003AE 90 00 06         [24] 1387 	mov	dptr,#(0x06&0x00ff)
      0003B1 E4               [12] 1388 	clr	a
      0003B2 F5 F0            [12] 1389 	mov	b,a
      0003B4 12r00r06         [24] 1390 	lcall	_delay
      0003B7 D0 07            [24] 1391 	pop	ar7
                                   1392 ;	C2.c:329: C2_Send(u8Data);
      0003B9 8F 82            [24] 1393 	mov	dpl,r7
      0003BB 12r00r35         [24] 1394 	lcall	_C2_Send
                                   1395 ;	C2.c:331: C2D_DIS();
      0003BE 43 90 20         [24] 1396 	orl	_P1,#0x20
      0003C1 43 92 20         [24] 1397 	orl	_P1_MOD_OC,#0x20
      0003C4 43 93 20         [24] 1398 	orl	_P1_DIR_PU,#0x20
                                   1399 ;	C2.c:334: delay(6);
      0003C7 90 00 06         [24] 1400 	mov	dptr,#(0x06&0x00ff)
      0003CA E4               [12] 1401 	clr	a
      0003CB F5 F0            [12] 1402 	mov	b,a
      0003CD 12r00r06         [24] 1403 	lcall	_delay
                                   1404 ;	C2.c:337: ret = 0;
      0003D0 7F 00            [12] 1405 	mov	r7,#0x00
                                   1406 ;	C2.c:338: for (i = 0; i < 50000; ++i) {
      0003D2 7D 00            [12] 1407 	mov	r5,#0x00
      0003D4 7E 00            [12] 1408 	mov	r6,#0x00
      0003D6                       1409 00104$:
                                   1410 ;	C2.c:339: C2K_0;
                                   1411 ;	assignBit
      0003D6 C2 97            [12] 1412 	clr	_P17
                                   1413 ;	C2.c:340: delay(1);
      0003D8 90 00 01         [24] 1414 	mov	dptr,#(0x01&0x00ff)
      0003DB E4               [12] 1415 	clr	a
      0003DC F5 F0            [12] 1416 	mov	b,a
      0003DE C0 07            [24] 1417 	push	ar7
      0003E0 C0 06            [24] 1418 	push	ar6
      0003E2 C0 05            [24] 1419 	push	ar5
      0003E4 12r00r06         [24] 1420 	lcall	_delay
                                   1421 ;	C2.c:341: C2K_1;
                                   1422 ;	assignBit
      0003E7 D2 97            [12] 1423 	setb	_P17
                                   1424 ;	C2.c:342: delay(1);
      0003E9 90 00 01         [24] 1425 	mov	dptr,#(0x01&0x00ff)
      0003EC E4               [12] 1426 	clr	a
      0003ED F5 F0            [12] 1427 	mov	b,a
      0003EF 12r00r06         [24] 1428 	lcall	_delay
      0003F2 D0 05            [24] 1429 	pop	ar5
      0003F4 D0 06            [24] 1430 	pop	ar6
      0003F6 D0 07            [24] 1431 	pop	ar7
                                   1432 ;	C2.c:343: if(C2D_IN_VAL) {
      0003F8 30 95 04         [24] 1433 	jnb	_P15,00105$
                                   1434 ;	C2.c:344: ret = 1;
      0003FB 7F 01            [12] 1435 	mov	r7,#0x01
                                   1436 ;	C2.c:345: break;
      0003FD 80 0E            [24] 1437 	sjmp	00103$
      0003FF                       1438 00105$:
                                   1439 ;	C2.c:338: for (i = 0; i < 50000; ++i) {
      0003FF 0D               [12] 1440 	inc	r5
      000400 BD 00 01         [24] 1441 	cjne	r5,#0x00,00117$
      000403 0E               [12] 1442 	inc	r6
      000404                       1443 00117$:
      000404 C3               [12] 1444 	clr	c
      000405 ED               [12] 1445 	mov	a,r5
      000406 94 50            [12] 1446 	subb	a,#0x50
      000408 EE               [12] 1447 	mov	a,r6
      000409 94 C3            [12] 1448 	subb	a,#0xc3
      00040B 40 C9            [24] 1449 	jc	00104$
      00040D                       1450 00103$:
                                   1451 ;	C2.c:351: delay(6);
      00040D 90 00 06         [24] 1452 	mov	dptr,#(0x06&0x00ff)
      000410 E4               [12] 1453 	clr	a
      000411 F5 F0            [12] 1454 	mov	b,a
      000413 C0 07            [24] 1455 	push	ar7
      000415 12r00r06         [24] 1456 	lcall	_delay
                                   1457 ;	C2.c:353: C2K_0;
                                   1458 ;	assignBit
      000418 C2 97            [12] 1459 	clr	_P17
                                   1460 ;	C2.c:354: delay(1);
      00041A 90 00 01         [24] 1461 	mov	dptr,#(0x01&0x00ff)
      00041D E4               [12] 1462 	clr	a
      00041E F5 F0            [12] 1463 	mov	b,a
      000420 12r00r06         [24] 1464 	lcall	_delay
                                   1465 ;	C2.c:355: C2K_1;
                                   1466 ;	assignBit
      000423 D2 97            [12] 1467 	setb	_P17
                                   1468 ;	C2.c:356: delay(1);
      000425 90 00 01         [24] 1469 	mov	dptr,#(0x01&0x00ff)
      000428 E4               [12] 1470 	clr	a
      000429 F5 F0            [12] 1471 	mov	b,a
      00042B 12r00r06         [24] 1472 	lcall	_delay
      00042E D0 07            [24] 1473 	pop	ar7
                                   1474 ;	C2.c:357: C2D_DIS();
      000430 43 90 20         [24] 1475 	orl	_P1,#0x20
      000433 43 92 20         [24] 1476 	orl	_P1_MOD_OC,#0x20
      000436 43 93 20         [24] 1477 	orl	_P1_DIR_PU,#0x20
                                   1478 ;	C2.c:358: return ret;
      000439 8F 82            [24] 1479 	mov	dpl,r7
                                   1480 ;	C2.c:359: }
      00043B 22               [24] 1481 	ret
                                   1482 ;------------------------------------------------------------
                                   1483 ;Allocation info for local variables in function 'C2_WriteFlash'
                                   1484 ;------------------------------------------------------------
                                   1485 ;u8Len                     Allocated with name '_C2_WriteFlash_PARM_2'
                                   1486 ;pu8Data                   Allocated with name '_C2_WriteFlash_PARM_3'
                                   1487 ;u32Address                Allocated to registers r4 r5 r6 r7 
                                   1488 ;u8Tmp                     Allocated to registers r7 
                                   1489 ;i                         Allocated to registers r7 
                                   1490 ;u8Ret                     Allocated with name '_C2_WriteFlash_u8Ret_65536_52'
                                   1491 ;------------------------------------------------------------
                                   1492 ;	C2.c:361: uint8_t C2_WriteFlash(uint32_t u32Address, uint8_t u8Len, uint8_t *pu8Data)
                                   1493 ;	-----------------------------------------
                                   1494 ;	 function C2_WriteFlash
                                   1495 ;	-----------------------------------------
      00043C                       1496 _C2_WriteFlash:
      00043C AC 82            [24] 1497 	mov	r4,dpl
      00043E AD 83            [24] 1498 	mov	r5,dph
      000440 AE F0            [24] 1499 	mov	r6,b
      000442 FF               [12] 1500 	mov	r7,a
                                   1501 ;	C2.c:366: C2_WriteAR(u8FPD);
      000443 85*00 82         [24] 1502 	mov	dpl,_u8FPD
      000446 C0 07            [24] 1503 	push	ar7
      000448 C0 06            [24] 1504 	push	ar6
      00044A C0 05            [24] 1505 	push	ar5
      00044C C0 04            [24] 1506 	push	ar4
      00044E 12r01rD1         [24] 1507 	lcall	_C2_WriteAR
                                   1508 ;	C2.c:367: C2_WriteDR(0x07);
      000451 75 82 07         [24] 1509 	mov	dpl,#0x07
      000454 12r03r0E         [24] 1510 	lcall	_C2_WriteDR
      000457 D0 04            [24] 1511 	pop	ar4
      000459 D0 05            [24] 1512 	pop	ar5
      00045B D0 06            [24] 1513 	pop	ar6
      00045D D0 07            [24] 1514 	pop	ar7
                                   1515 ;	C2.c:369: while(1) {
      00045F                       1516 00104$:
                                   1517 ;	C2.c:370: if((C2_ReadAR()&0x02)==0) {
      00045F C0 07            [24] 1518 	push	ar7
      000461 C0 06            [24] 1519 	push	ar6
      000463 C0 05            [24] 1520 	push	ar5
      000465 C0 04            [24] 1521 	push	ar4
      000467 12r02r73         [24] 1522 	lcall	_C2_ReadAR
      00046A E5 82            [12] 1523 	mov	a,dpl
      00046C D0 04            [24] 1524 	pop	ar4
      00046E D0 05            [24] 1525 	pop	ar5
      000470 D0 06            [24] 1526 	pop	ar6
      000472 D0 07            [24] 1527 	pop	ar7
      000474 20 E1 E8         [24] 1528 	jb	acc.1,00104$
                                   1529 ;	C2.c:375: while(1) {
      000477                       1530 00109$:
                                   1531 ;	C2.c:377: if((C2_ReadAR()&0x01)) {
      000477 C0 07            [24] 1532 	push	ar7
      000479 C0 06            [24] 1533 	push	ar6
      00047B C0 05            [24] 1534 	push	ar5
      00047D C0 04            [24] 1535 	push	ar4
      00047F 12r02r73         [24] 1536 	lcall	_C2_ReadAR
      000482 E5 82            [12] 1537 	mov	a,dpl
      000484 D0 04            [24] 1538 	pop	ar4
      000486 D0 05            [24] 1539 	pop	ar5
      000488 D0 06            [24] 1540 	pop	ar6
      00048A D0 07            [24] 1541 	pop	ar7
      00048C 30 E0 E8         [24] 1542 	jnb	acc.0,00109$
                                   1543 ;	C2.c:382: u8Tmp=C2_ReadDR(&u8Ret);
      00048F 90r00r05         [24] 1544 	mov	dptr,#_C2_WriteFlash_u8Ret_65536_52
      000492 75 F0 40         [24] 1545 	mov	b,#0x40
      000495 C0 07            [24] 1546 	push	ar7
      000497 C0 06            [24] 1547 	push	ar6
      000499 C0 05            [24] 1548 	push	ar5
      00049B C0 04            [24] 1549 	push	ar4
      00049D 12r00rA1         [24] 1550 	lcall	_C2_ReadDR
      0004A0 AB 82            [24] 1551 	mov	r3,dpl
      0004A2 D0 04            [24] 1552 	pop	ar4
      0004A4 D0 05            [24] 1553 	pop	ar5
      0004A6 D0 06            [24] 1554 	pop	ar6
      0004A8 D0 07            [24] 1555 	pop	ar7
                                   1556 ;	C2.c:383: if (!u8Ret) {
      0004AA E5*05            [12] 1557 	mov	a,_C2_WriteFlash_u8Ret_65536_52
                                   1558 ;	C2.c:384: return 0;
      0004AC 70 03            [24] 1559 	jnz	00112$
      0004AE F5 82            [12] 1560 	mov	dpl,a
      0004B0 22               [24] 1561 	ret
      0004B1                       1562 00112$:
                                   1563 ;	C2.c:386: if(u8Tmp!=0x0D) {
      0004B1 BB 0D 02         [24] 1564 	cjne	r3,#0x0d,00234$
      0004B4 80 04            [24] 1565 	sjmp	00114$
      0004B6                       1566 00234$:
                                   1567 ;	C2.c:387: return 0;
      0004B6 75 82 00         [24] 1568 	mov	dpl,#0x00
      0004B9 22               [24] 1569 	ret
      0004BA                       1570 00114$:
                                   1571 ;	C2.c:391: C2_WriteDR((u32Address >> 8));
      0004BA 8D 82            [24] 1572 	mov	dpl,r5
      0004BC C0 07            [24] 1573 	push	ar7
      0004BE C0 06            [24] 1574 	push	ar6
      0004C0 C0 05            [24] 1575 	push	ar5
      0004C2 C0 04            [24] 1576 	push	ar4
      0004C4 12r03r0E         [24] 1577 	lcall	_C2_WriteDR
      0004C7 D0 04            [24] 1578 	pop	ar4
      0004C9 D0 05            [24] 1579 	pop	ar5
      0004CB D0 06            [24] 1580 	pop	ar6
      0004CD D0 07            [24] 1581 	pop	ar7
                                   1582 ;	C2.c:394: while(1) {
      0004CF                       1583 00118$:
                                   1584 ;	C2.c:395: if((C2_ReadAR()&0x02)==0) {
      0004CF C0 07            [24] 1585 	push	ar7
      0004D1 C0 06            [24] 1586 	push	ar6
      0004D3 C0 05            [24] 1587 	push	ar5
      0004D5 C0 04            [24] 1588 	push	ar4
      0004D7 12r02r73         [24] 1589 	lcall	_C2_ReadAR
      0004DA E5 82            [12] 1590 	mov	a,dpl
      0004DC D0 04            [24] 1591 	pop	ar4
      0004DE D0 05            [24] 1592 	pop	ar5
      0004E0 D0 06            [24] 1593 	pop	ar6
      0004E2 D0 07            [24] 1594 	pop	ar7
      0004E4 20 E1 E8         [24] 1595 	jb	acc.1,00118$
                                   1596 ;	C2.c:400: C2_WriteDR(u32Address);
      0004E7 8C 82            [24] 1597 	mov	dpl,r4
      0004E9 12r03r0E         [24] 1598 	lcall	_C2_WriteDR
                                   1599 ;	C2.c:403: while(1) {
      0004EC                       1600 00123$:
                                   1601 ;	C2.c:404: if((C2_ReadAR()&0x02)==0) {
      0004EC 12r02r73         [24] 1602 	lcall	_C2_ReadAR
      0004EF E5 82            [12] 1603 	mov	a,dpl
      0004F1 20 E1 F8         [24] 1604 	jb	acc.1,00123$
                                   1605 ;	C2.c:410: C2_WriteDR(u8Len);
      0004F4 85*01 82         [24] 1606 	mov	dpl,_C2_WriteFlash_PARM_2
      0004F7 12r03r0E         [24] 1607 	lcall	_C2_WriteDR
                                   1608 ;	C2.c:413: while(1) {
      0004FA                       1609 00128$:
                                   1610 ;	C2.c:414: if((C2_ReadAR()&0x02)==0) {
      0004FA 12r02r73         [24] 1611 	lcall	_C2_ReadAR
      0004FD E5 82            [12] 1612 	mov	a,dpl
      0004FF 20 E1 F8         [24] 1613 	jb	acc.1,00128$
                                   1614 ;	C2.c:425: for(i=0; i<u8Len; ++i) {
      000502 7F 00            [12] 1615 	mov	r7,#0x00
      000504                       1616 00141$:
      000504 C3               [12] 1617 	clr	c
      000505 EF               [12] 1618 	mov	a,r7
      000506 95*01            [12] 1619 	subb	a,_C2_WriteFlash_PARM_2
      000508 50 1F            [24] 1620 	jnc	00134$
                                   1621 ;	C2.c:426: C2_WriteDR(pu8Data[i]);
      00050A EF               [12] 1622 	mov	a,r7
      00050B 25*02            [12] 1623 	add	a,_C2_WriteFlash_PARM_3
      00050D FC               [12] 1624 	mov	r4,a
      00050E E4               [12] 1625 	clr	a
      00050F 35*03            [12] 1626 	addc	a,(_C2_WriteFlash_PARM_3 + 1)
      000511 FD               [12] 1627 	mov	r5,a
      000512 AE*04            [24] 1628 	mov	r6,(_C2_WriteFlash_PARM_3 + 2)
      000514 8C 82            [24] 1629 	mov	dpl,r4
      000516 8D 83            [24] 1630 	mov	dph,r5
      000518 8E F0            [24] 1631 	mov	b,r6
      00051A 12r00r00         [24] 1632 	lcall	__gptrget
      00051D F5 82            [12] 1633 	mov	dpl,a
      00051F C0 07            [24] 1634 	push	ar7
      000521 12r03r0E         [24] 1635 	lcall	_C2_WriteDR
      000524 D0 07            [24] 1636 	pop	ar7
                                   1637 ;	C2.c:425: for(i=0; i<u8Len; ++i) {
      000526 0F               [12] 1638 	inc	r7
                                   1639 ;	C2.c:433: while(1) {
      000527 80 DB            [24] 1640 	sjmp	00141$
      000529                       1641 00134$:
                                   1642 ;	C2.c:435: if((C2_ReadAR()&0x01)) {
      000529 12r02r73         [24] 1643 	lcall	_C2_ReadAR
      00052C E5 82            [12] 1644 	mov	a,dpl
      00052E 30 E0 F8         [24] 1645 	jnb	acc.0,00134$
                                   1646 ;	C2.c:443: u8Tmp=C2_ReadDR(&u8Ret);
      000531 90r00r05         [24] 1647 	mov	dptr,#_C2_WriteFlash_u8Ret_65536_52
      000534 75 F0 40         [24] 1648 	mov	b,#0x40
      000537 12r00rA1         [24] 1649 	lcall	_C2_ReadDR
      00053A AF 82            [24] 1650 	mov	r7,dpl
                                   1651 ;	C2.c:445: if (!u8Ret) {
      00053C E5*05            [12] 1652 	mov	a,_C2_WriteFlash_u8Ret_65536_52
                                   1653 ;	C2.c:446: return 0;
      00053E 70 03            [24] 1654 	jnz	00137$
      000540 F5 82            [12] 1655 	mov	dpl,a
      000542 22               [24] 1656 	ret
      000543                       1657 00137$:
                                   1658 ;	C2.c:449: if(u8Tmp!=0x0D) {
      000543 BF 0D 02         [24] 1659 	cjne	r7,#0x0d,00241$
      000546 80 04            [24] 1660 	sjmp	00139$
      000548                       1661 00241$:
                                   1662 ;	C2.c:450: return 0;
      000548 75 82 00         [24] 1663 	mov	dpl,#0x00
      00054B 22               [24] 1664 	ret
      00054C                       1665 00139$:
                                   1666 ;	C2.c:452: return 1;
      00054C 75 82 01         [24] 1667 	mov	dpl,#0x01
                                   1668 ;	C2.c:453: }
      00054F 22               [24] 1669 	ret
                                   1670 ;------------------------------------------------------------
                                   1671 ;Allocation info for local variables in function 'C2_ReadFlash'
                                   1672 ;------------------------------------------------------------
                                   1673 ;u8Len                     Allocated with name '_C2_ReadFlash_PARM_2'
                                   1674 ;pu8Data                   Allocated with name '_C2_ReadFlash_PARM_3'
                                   1675 ;u32Address                Allocated to registers r4 r5 r6 r7 
                                   1676 ;u8Tmp                     Allocated to registers r7 
                                   1677 ;i                         Allocated to registers r7 
                                   1678 ;u8Ret                     Allocated with name '_C2_ReadFlash_u8Ret_65536_72'
                                   1679 ;------------------------------------------------------------
                                   1680 ;	C2.c:454: uint8_t C2_ReadFlash(uint32_t u32Address, uint8_t u8Len, uint8_t *pu8Data)
                                   1681 ;	-----------------------------------------
                                   1682 ;	 function C2_ReadFlash
                                   1683 ;	-----------------------------------------
      000550                       1684 _C2_ReadFlash:
      000550 AC 82            [24] 1685 	mov	r4,dpl
      000552 AD 83            [24] 1686 	mov	r5,dph
      000554 AE F0            [24] 1687 	mov	r6,b
      000556 FF               [12] 1688 	mov	r7,a
                                   1689 ;	C2.c:460: C2_WriteAR(u8FPD);
      000557 85*00 82         [24] 1690 	mov	dpl,_u8FPD
      00055A C0 07            [24] 1691 	push	ar7
      00055C C0 06            [24] 1692 	push	ar6
      00055E C0 05            [24] 1693 	push	ar5
      000560 C0 04            [24] 1694 	push	ar4
      000562 12r01rD1         [24] 1695 	lcall	_C2_WriteAR
                                   1696 ;	C2.c:462: C2_WriteDR(0x06);
      000565 75 82 06         [24] 1697 	mov	dpl,#0x06
      000568 12r03r0E         [24] 1698 	lcall	_C2_WriteDR
      00056B D0 04            [24] 1699 	pop	ar4
      00056D D0 05            [24] 1700 	pop	ar5
      00056F D0 06            [24] 1701 	pop	ar6
      000571 D0 07            [24] 1702 	pop	ar7
                                   1703 ;	C2.c:463: while(1) {
      000573                       1704 00104$:
                                   1705 ;	C2.c:464: if((C2_ReadAR()&0x02)==0) {
      000573 C0 07            [24] 1706 	push	ar7
      000575 C0 06            [24] 1707 	push	ar6
      000577 C0 05            [24] 1708 	push	ar5
      000579 C0 04            [24] 1709 	push	ar4
      00057B 12r02r73         [24] 1710 	lcall	_C2_ReadAR
      00057E E5 82            [12] 1711 	mov	a,dpl
      000580 D0 04            [24] 1712 	pop	ar4
      000582 D0 05            [24] 1713 	pop	ar5
      000584 D0 06            [24] 1714 	pop	ar6
      000586 D0 07            [24] 1715 	pop	ar7
      000588 20 E1 E8         [24] 1716 	jb	acc.1,00104$
                                   1717 ;	C2.c:469: while(1) {
      00058B                       1718 00109$:
                                   1719 ;	C2.c:470: if((C2_ReadAR()&0x01)) {
      00058B C0 07            [24] 1720 	push	ar7
      00058D C0 06            [24] 1721 	push	ar6
      00058F C0 05            [24] 1722 	push	ar5
      000591 C0 04            [24] 1723 	push	ar4
      000593 12r02r73         [24] 1724 	lcall	_C2_ReadAR
      000596 E5 82            [12] 1725 	mov	a,dpl
      000598 D0 04            [24] 1726 	pop	ar4
      00059A D0 05            [24] 1727 	pop	ar5
      00059C D0 06            [24] 1728 	pop	ar6
      00059E D0 07            [24] 1729 	pop	ar7
      0005A0 30 E0 E8         [24] 1730 	jnb	acc.0,00109$
                                   1731 ;	C2.c:474: u8Tmp = C2_ReadDR(&u8Ret);
      0005A3 90r00r0A         [24] 1732 	mov	dptr,#_C2_ReadFlash_u8Ret_65536_72
      0005A6 75 F0 40         [24] 1733 	mov	b,#0x40
      0005A9 C0 07            [24] 1734 	push	ar7
      0005AB C0 06            [24] 1735 	push	ar6
      0005AD C0 05            [24] 1736 	push	ar5
      0005AF C0 04            [24] 1737 	push	ar4
      0005B1 12r00rA1         [24] 1738 	lcall	_C2_ReadDR
      0005B4 AB 82            [24] 1739 	mov	r3,dpl
      0005B6 D0 04            [24] 1740 	pop	ar4
      0005B8 D0 05            [24] 1741 	pop	ar5
      0005BA D0 06            [24] 1742 	pop	ar6
      0005BC D0 07            [24] 1743 	pop	ar7
                                   1744 ;	C2.c:476: if (!u8Ret) {
      0005BE E5*0A            [12] 1745 	mov	a,_C2_ReadFlash_u8Ret_65536_72
                                   1746 ;	C2.c:477: return 0;
      0005C0 70 03            [24] 1747 	jnz	00112$
      0005C2 F5 82            [12] 1748 	mov	dpl,a
      0005C4 22               [24] 1749 	ret
      0005C5                       1750 00112$:
                                   1751 ;	C2.c:479: if(u8Tmp!=0x0D) {
      0005C5 BB 0D 02         [24] 1752 	cjne	r3,#0x0d,00245$
      0005C8 80 04            [24] 1753 	sjmp	00114$
      0005CA                       1754 00245$:
                                   1755 ;	C2.c:480: return 0;
      0005CA 75 82 00         [24] 1756 	mov	dpl,#0x00
      0005CD 22               [24] 1757 	ret
      0005CE                       1758 00114$:
                                   1759 ;	C2.c:483: C2_WriteDR((u32Address >> 8));
      0005CE 8D 82            [24] 1760 	mov	dpl,r5
      0005D0 C0 07            [24] 1761 	push	ar7
      0005D2 C0 06            [24] 1762 	push	ar6
      0005D4 C0 05            [24] 1763 	push	ar5
      0005D6 C0 04            [24] 1764 	push	ar4
      0005D8 12r03r0E         [24] 1765 	lcall	_C2_WriteDR
      0005DB D0 04            [24] 1766 	pop	ar4
      0005DD D0 05            [24] 1767 	pop	ar5
      0005DF D0 06            [24] 1768 	pop	ar6
      0005E1 D0 07            [24] 1769 	pop	ar7
                                   1770 ;	C2.c:485: while(1) {
      0005E3                       1771 00118$:
                                   1772 ;	C2.c:486: if((C2_ReadAR()&0x02)==0) {
      0005E3 C0 07            [24] 1773 	push	ar7
      0005E5 C0 06            [24] 1774 	push	ar6
      0005E7 C0 05            [24] 1775 	push	ar5
      0005E9 C0 04            [24] 1776 	push	ar4
      0005EB 12r02r73         [24] 1777 	lcall	_C2_ReadAR
      0005EE E5 82            [12] 1778 	mov	a,dpl
      0005F0 D0 04            [24] 1779 	pop	ar4
      0005F2 D0 05            [24] 1780 	pop	ar5
      0005F4 D0 06            [24] 1781 	pop	ar6
      0005F6 D0 07            [24] 1782 	pop	ar7
      0005F8 20 E1 E8         [24] 1783 	jb	acc.1,00118$
                                   1784 ;	C2.c:492: C2_WriteDR((u32Address));
      0005FB 8C 82            [24] 1785 	mov	dpl,r4
      0005FD 12r03r0E         [24] 1786 	lcall	_C2_WriteDR
                                   1787 ;	C2.c:495: while(1) {
      000600                       1788 00123$:
                                   1789 ;	C2.c:496: if((C2_ReadAR()&0x02)==0) {
      000600 12r02r73         [24] 1790 	lcall	_C2_ReadAR
      000603 E5 82            [12] 1791 	mov	a,dpl
      000605 20 E1 F8         [24] 1792 	jb	acc.1,00123$
                                   1793 ;	C2.c:502: C2_WriteDR(u8Len);
      000608 85*06 82         [24] 1794 	mov	dpl,_C2_ReadFlash_PARM_2
      00060B 12r03r0E         [24] 1795 	lcall	_C2_WriteDR
                                   1796 ;	C2.c:504: while(1) {
      00060E                       1797 00128$:
                                   1798 ;	C2.c:505: if((C2_ReadAR()&0x02)==0) {
      00060E 12r02r73         [24] 1799 	lcall	_C2_ReadAR
      000611 E5 82            [12] 1800 	mov	a,dpl
      000613 20 E1 F8         [24] 1801 	jb	acc.1,00128$
                                   1802 ;	C2.c:510: while(1) {
      000616                       1803 00133$:
                                   1804 ;	C2.c:512: if((C2_ReadAR()&0x01)) {
      000616 12r02r73         [24] 1805 	lcall	_C2_ReadAR
      000619 E5 82            [12] 1806 	mov	a,dpl
      00061B 30 E0 F8         [24] 1807 	jnb	acc.0,00133$
                                   1808 ;	C2.c:517: u8Tmp = C2_ReadDR(&u8Ret);
      00061E 90r00r0A         [24] 1809 	mov	dptr,#_C2_ReadFlash_u8Ret_65536_72
      000621 75 F0 40         [24] 1810 	mov	b,#0x40
      000624 12r00rA1         [24] 1811 	lcall	_C2_ReadDR
      000627 AF 82            [24] 1812 	mov	r7,dpl
                                   1813 ;	C2.c:518: if (!u8Ret) {
      000629 E5*0A            [12] 1814 	mov	a,_C2_ReadFlash_u8Ret_65536_72
                                   1815 ;	C2.c:519: return 0;
      00062B 70 03            [24] 1816 	jnz	00136$
      00062D F5 82            [12] 1817 	mov	dpl,a
      00062F 22               [24] 1818 	ret
      000630                       1819 00136$:
                                   1820 ;	C2.c:521: if(u8Tmp!=0x0D) {
      000630 BF 0D 02         [24] 1821 	cjne	r7,#0x0d,00251$
      000633 80 04            [24] 1822 	sjmp	00169$
      000635                       1823 00251$:
                                   1824 ;	C2.c:522: return 0;
      000635 75 82 00         [24] 1825 	mov	dpl,#0x00
                                   1826 ;	C2.c:525: for(i=0; i<u8Len; ++i) {
      000638 22               [24] 1827 	ret
      000639                       1828 00169$:
      000639 7F 00            [12] 1829 	mov	r7,#0x00
      00063B                       1830 00148$:
      00063B C3               [12] 1831 	clr	c
      00063C EF               [12] 1832 	mov	a,r7
      00063D 95*06            [12] 1833 	subb	a,_C2_ReadFlash_PARM_2
      00063F 50 45            [24] 1834 	jnc	00146$
                                   1835 ;	C2.c:526: while(1) {
      000641                       1836 00142$:
                                   1837 ;	C2.c:528: if((C2_ReadAR()&0x01)) {
      000641 C0 07            [24] 1838 	push	ar7
      000643 12r02r73         [24] 1839 	lcall	_C2_ReadAR
      000646 E5 82            [12] 1840 	mov	a,dpl
      000648 D0 07            [24] 1841 	pop	ar7
      00064A 30 E0 F4         [24] 1842 	jnb	acc.0,00142$
                                   1843 ;	C2.c:532: pu8Data[i]=C2_ReadDR(&u8Ret);
      00064D EF               [12] 1844 	mov	a,r7
      00064E 25*07            [12] 1845 	add	a,_C2_ReadFlash_PARM_3
      000650 FC               [12] 1846 	mov	r4,a
      000651 E4               [12] 1847 	clr	a
      000652 35*08            [12] 1848 	addc	a,(_C2_ReadFlash_PARM_3 + 1)
      000654 FD               [12] 1849 	mov	r5,a
      000655 AE*09            [24] 1850 	mov	r6,(_C2_ReadFlash_PARM_3 + 2)
      000657 90r00r0A         [24] 1851 	mov	dptr,#_C2_ReadFlash_u8Ret_65536_72
      00065A 75 F0 40         [24] 1852 	mov	b,#0x40
      00065D C0 07            [24] 1853 	push	ar7
      00065F C0 06            [24] 1854 	push	ar6
      000661 C0 05            [24] 1855 	push	ar5
      000663 C0 04            [24] 1856 	push	ar4
      000665 12r00rA1         [24] 1857 	lcall	_C2_ReadDR
      000668 AB 82            [24] 1858 	mov	r3,dpl
      00066A D0 04            [24] 1859 	pop	ar4
      00066C D0 05            [24] 1860 	pop	ar5
      00066E D0 06            [24] 1861 	pop	ar6
      000670 D0 07            [24] 1862 	pop	ar7
      000672 8C 82            [24] 1863 	mov	dpl,r4
      000674 8D 83            [24] 1864 	mov	dph,r5
      000676 8E F0            [24] 1865 	mov	b,r6
      000678 EB               [12] 1866 	mov	a,r3
      000679 12r00r00         [24] 1867 	lcall	__gptrput
                                   1868 ;	C2.c:533: if (!u8Ret) {
      00067C E5*0A            [12] 1869 	mov	a,_C2_ReadFlash_u8Ret_65536_72
                                   1870 ;	C2.c:534: return 0;
      00067E 70 03            [24] 1871 	jnz	00149$
      000680 F5 82            [12] 1872 	mov	dpl,a
      000682 22               [24] 1873 	ret
      000683                       1874 00149$:
                                   1875 ;	C2.c:525: for(i=0; i<u8Len; ++i) {
      000683 0F               [12] 1876 	inc	r7
      000684 80 B5            [24] 1877 	sjmp	00148$
      000686                       1878 00146$:
                                   1879 ;	C2.c:538: return 1;
      000686 75 82 01         [24] 1880 	mov	dpl,#0x01
                                   1881 ;	C2.c:539: }
      000689 22               [24] 1882 	ret
                                   1883 	.area CSEG    (CODE)
                                   1884 	.area CONST   (CODE)
                                   1885 	.area XINIT   (CODE)
                                   1886 	.area CABS    (ABS,CODE)
